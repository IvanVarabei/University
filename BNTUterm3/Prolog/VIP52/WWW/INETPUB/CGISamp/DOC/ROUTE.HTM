<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<title>Prototyping:</title>
</head>

<body bgcolor="#FFFFFF">

<p><a name="_Toc342996015"><font size="5"><b>Prototyping: A
Simple Routing Problem</b></font></a></p>

<p><font size="3">Suppose you want to construct a computer system
to help decide the best route between two U.S. cities. You could
first use Visual Prolog to build a miniature version of the
system (see 2), since it will then become easier to investigate
and explore different ways of solving the problems involved. You
will use the final system to investigate questions such as:</font></p>

<p><font size="3">Is there a direct road from one particular town
to another?</font></p>

<p><font size="3">Which towns are situated less than ten miles
from a particular town?</font></p>

<p><font size="3">The following program is a classic example of
using backtracking and recursion to solve route planning.</font></p>

<pre>
<strong>DOMAINS</strong>
  town = symbol
  distance = integer

<strong>PREDICATES</strong>
  nondeterm road(town,town,distance)
  nondeterm route(town,town,distance)

<strong>CLAUSES</strong>
  road(tampa,houston,200).
  road(gordon,tampa,300).
  road(houston,gordon,100).
  road(houston,kansas_city,120).
  road(gordon,kansas_city,130).

route(Town1,Town2,Distance):-
  road(Town1,Town2,Distance).

route(Town1,Town2,Distance):-
	road(Town1,X,Dist1),
	route(X,Town2,Dist2),
	Distance=Dist1+Dist2,!.
</pre>

<p><font size="3">The following Figure shows a simplified map for
the prototype.</font></p>

<p align="center"><font size="2"><img src="route.gif" width="352"
height="194"></font></p>

<p align="center"><font size="3"><i>Prototype Map</i></font></p>

<p><font size="3">Each clause for the <b><i>road</i></b>
predicate is a fact that describes a road of a certain length (in
miles) that goes from one town to another. </font></p>

<p><font size="3">The <b><i>route</i></b> clauses indicate that
it is possible to make a route from one town to another over
several stretches of road. Following the route, the driver
travels a distance given by the third parameter, <b><i>distance</i></b>.</font></p>

<p><font size="3">The <b><i>route</i></b> predicate is defined
recursively; a route can simply consist of one single stretch of
road, as in the first clause. In this case, the total distance is
merely the length of the road.</font></p>

<p><font size="3">You can also construct a route from <i>Town1</i>
to <i>Town2</i> by driving first from <i>Town1</i> to <i>X</i>,
then following some other route from <i>X</i> to <i>Town2</i>.
The total distance is the sum of the distance from <i>Town1</i>
to <i>X</i> and the distance from <i>X</i> to <i>Town2</i>, as
shown in the second clause for <b><i>route</i></b>.</font></p>

<p><font size="3">Try the program with the goal:</font></p>

<blockquote>
    <pre>
route(tampa,kansas_city, X).
    </pre>
</blockquote>

<p><font size="3">Can the program handle all possible
combinations of starting point and destination? If not, can you
modify the program to avoid any omissions?</font></p>

<p><font size="3">The next example will give you ideas about how
to get this routing program to make a list of towns visited
enroute. Making such a list prevents Visual Prolog from choosing
a route that involves visiting the same town twice, thereby
avoiding going around in circles, and ensures that the program
doesn't go into an infinite loop. When you've solved problems of
this type, you can enlarge the program by adding more cities and
roads.</font></p>

</body>
</html>
