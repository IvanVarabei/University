<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<title>A Prolog starter:</title>
</head>

<body bgcolor="#FFFFFF">

<h1>Family relations</h1>

<p>Family relations are, a good way to show the strengths of
Prolog's way of representing facts and rules for searching
solutions.</p>

<p>Here is a small example of such a program. The relations like
sons, sister etc. can be handled like facts in Prolog. Facts and
rules are specified in the clauses section of a Visual Prolog
program:</p>

<pre><em><strong>CLAUSES</strong></em><em>
  son(&quot;John&quot;, &quot;Dan&quot;).
  sister(&quot;Mary&quot;,&quot;Suzan&quot;).
  brother(&quot;Harold&quot;, &quot;Larry&quot;).
  married(&quot;John&quot;, &quot;Mary&quot;).
  married(&quot;Larry&quot;, &quot;Sue&quot;).</em></pre>

<p>Note, that you also have to make some definitions
(&quot;declarations&quot;) of predicates, to make the program
work, this is done in a PREDICATES section of the program</p>

<pre><strong>PREDICATES</strong><em><strong>
</strong></em><em>  son(string,string).</em></pre>

<p><em>etc.</em></p>

<p>This small example can lead us to some more powerful
abstractions in our family relations program.</p>

<p><em>father(A,B):-son(B,A).</em></p>

<p>and </p>

<p><em>grandfather(A,B):-father(A,C), father(C,B).</em></p>

<p>Father is of course the inverse of son.</p>

<p>We can construct more complex relations, for instance,
sister_in_law:</p>

<p><em>sister_in_law(A,B):-married(A,C), sister(C,B).</em></p>

<p>This leads us though to a problem, because a sister in law can
also be the spouse of your brother. This is not really a problem,
because if Prolog doesn&#146;t find solutions for a predicate in
its first clause, it tries again with the next. Therefore, we can
just add another clause</p>

<p><em>sister_in_law(A,B):-brother(A,C),</em></p>

<p><em>married(C,B).</em></p>

<p>If the first one doesn&#146;t succeed, Prolog will backtrack
and try the next. If you try the goal </p>

<pre><em><strong>GOAL</strong></em><em>
  sister_in_law(&quot;John&quot;,Z).</em></pre>

<pre>Prolog will use the first predicate and answer </pre>

<p><em>Z=&quot;Suzan&quot;.</em></p>

<p>If we try </p>

<pre><em><strong>GOAL</strong></em><em>
  sister_in_law(&quot;Harold&quot;,Z).</em></pre>

<p>the first clause can&#146;t succeed, because Harold isn't
married, so the predicate 'married' will not succeed. But the
next one can, because Harold has a brother, Larry, that is
married to Sue.</p>

<p>The list of predicates could be continued. Try to implement
uncle, nephew, stepson and others, and try to input your own
family.</p>


<p>&nbsp;</p>
</body>
</html>
