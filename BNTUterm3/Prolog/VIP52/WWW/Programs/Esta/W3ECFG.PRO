/*****************************************************************************

		Copyright (c) 1984 - 2000 Prolog Development Center A/S

 Project:  WEBESTA
 FileName: W3ECFG.PRO
 Purpose: WWW version of ESTA
 Written by: Oleg V. Erjomin
 Comments:
         Configuration File Handling
         
 14.12.97  Multiuser support
******************************************************************************/

include "w3esta.inc"
include "w3ecfg.pre"

DATABASE - def_internal
   tmp_txt(SYMBOL,STRING)
 
/******************************************************
   Load Definition File
******************************************************/

PREDICATES
  convert_def_nl
CLAUSES
  consult_def_file(SID,DF):-
  	trap(consult(DF,definitions),E,err_Report(SID,E)),
	convert_def_nl.
   	
  load_def_file(_,_,"") :- txt1(_,_),!.
  load_def_file(SID,DF,"") :-  
   	existfile(DF),
   	retractall (_,def_internal),
   	consult_def_file(SID,DF),!.
   
  load_def_file(SID,DF,Msg) :- 
  	format (Err,"Error in definition file %s or file doesn't exist\n",DF),
  	concat (Err,"Defaults loaded\n",Msg),
  	create_definition_file(SID,DF).
 
  convert_def_nl :-
	retract(txt1(SYM,STR)),
	  str_bin(STR,STR1,_),             %Text definitions.
	  assert(tmp_txt(SYM,STR1)),
        fail.
  convert_def_nl :-
        retract(tmp_txt(SYM_T,STR_T)),
          assert(txt1(SYM_T,STR_T)),
        fail.    
  convert_def_nl.
 
/******************************************************
     Creation of Default Definition File           
******************************************************/
  create_definition_file (_SID,_DF) :-
  	retractall (_,definitions),
	assert(function_name("min",    "cf_and")),
	assert(function_name("max",    "cf_or")),
	assert(function_name("calc_cf","cf_add")),
	assert(function_name("not_cf", "cf_not")),
	assert(txt1("treelevel",       "10")),
	assert(txt1("mem_error",       "There isn't enough memory to run ESTA.\nPlease exit the program and release some memory if possible.")),
	assert(txt1("system_call",     "Application activated - click OK to proceed with the ESTA session")),
	assert(txt1("net_update",      "The file % has changed.Do you want to reload the file ?")),
	assert(txt1("headtitle",       "ESTA")),
	assert(txt1("abouthead",       "About ESTA")),
	assert(txt1("abouttxt",        "ESTA\nExpert System Shell for Text Animation\nCopyright(c) 1992 version 4.1\nProlog Development Center\nH.J.Holst Vej 5A\n2605 Broendby\nDenmark")),
	assert(txt1("cantopenfile",    "Can't open the file: %")),
	assert(txt1("cantreadfile",    "Can't read the file: %")),
	assert(txt1("savepicture",     "Save picture as: ")),
	assert(txt1("pic_keep",        "Keep scale")),
	assert(txt1("pic_stretch",     "Fit in frame")),
	assert(txt1("pic_add",         "Import...")),
	assert(txt1("pic_delete",      "Delete")),
	assert(txt1("pic_edit",        "Edit...")),
	assert(txt1("pic_paste",       "Paste...")),
	assert(txt1("pic_import",      "Open a Bitmap or Metafile")),
	assert(txt1("picture_database","Pictures Database")),
	assert(txt1("pic_ex",          "% exists")),
	assert(txt1("pic_not_found",   "Picture % not found")),
	assert(txt1("pic_create",      "The pictures database is not found.\nDo you want to create it ?")), 
	assert(txt1("pic_savekb",      "Please save the untitled knowledge base.\nHaving done so you'll be able to see the pictures database.")),
	assert(txt1("pic_clear",       "Do you realy want to clear pictures database ?")),
	assert(txt1("pic_hotspot",     "&Hotspots")),
	assert(txt1("pic_param",       "Parameter:")),
	assert(txt1("pic_option",      "Option:")),
	assert(txt1("pic_height",      "20")),
	assert(txt1("pack_dba",        "The Pictures Database is packed")),
	assert(txt1("exp_dba_title",   "Export Pictures Database")),
	assert(txt1("exp_dba_msg",     "The Pictures Database is written in text format")),
	assert(txt1("imp_dba_title",   "Import Pictures Database")),
	assert(txt1("imp_dba_msg",     "The Pictures Database is appended from text format")),
	fail.
  create_definition_file (_SID,_DF) :-
	assert(txt1("hotspot_header",  "Hotspot Editor")),
	assert(txt1("all_visible",     "Set All to &Visible")),
	assert(txt1("all_invisible",   "Set All to &Invisible")),
	assert(txt1("hotspot_attr",    "Hotspot Attributes")),
	assert(txt1("invisible",       "&Invisible")),
	assert(txt1("visible",         "&Visible")),
	assert(txt1("delete_hotspot",  "&Delete")),
	assert(txt1("attr_hotspot",    "Attribute")),
	assert(txt1("bind_hotspot",    "Binding")),
	assert(txt1("hotspot_quest",   "Is the hotspot placed correct ?")),
	assert(txt1("hotspot_adj",     "Hotspot Adjustment")),
	assert(txt1("true",            " true ")),
	assert(txt1("false",           " false ")),
	assert(txt1("unknown",         " unknown ")),
	assert(txt1("unsolveable",     " unsolveable ")),
	assert(txt1("or_",             " or ")),
	assert(txt1("and_",            " AND\n")),
	assert(txt1("not_",            "it is not true that ")),
	assert(txt1("edit_status",     "Modify %: %")),
	assert(txt1("init_stat",       "Ready")),
	assert(txt1("read",            "Reading")),
	assert(txt1("read_fail",       "Reading aborted")),
	assert(txt1("write",           "Writing")),
	assert(txt1("stline",          "Section: %      Parameter: %")),
	assert(txt1("stline1",         "Ln %  Col % ")),
	assert(txt1("newkb",           "New knowledge base")),
	assert(txt1("newfile",         "New textfile")),
	assert(txt1("newlog",          "New dialog ")),
	assert(txt1("open",            "Open knowledge base, dialog or textfile")),
	assert(txt1("save",            "Save ")),
	assert(txt1("save_as",         "Save As ")),
	assert(txt1("print",           "Print")),
	assert(txt1("printing",        "Printing")),
	assert(txt1("on",              "on")),
	assert(txt1("page",            "page %")),
	assert(txt1("cancel",          " cancelled")),
	assert(txt1("margin",          "0")),
	assert(txt1("print_cancel",    "Printing cancelled")),
	fail.
  create_definition_file (_SID,_DF) :-
	assert(txt1("files",           "Knowledge base(*.kb);Text base(*.kbt);Log file(*.log);Text file(*.txt);All files(*.*)")),
	assert(txt1("filesext",        "*.kb;*.kbt;*.log;*.txt;*.*")),
	assert(txt1("ext_kb",          "*.kb")),
	assert(txt1("ext_log",         "*.log")),
	assert(txt1("ext_txt",         "*.txt")),
	assert(txt1("filetype",        "List Files of Type:")),
	assert(txt1("filename",        "File Name:")),
	assert(txt1("drive",           "Drives:")),
	assert(txt1("dir",             "Directories:")),
	assert(txt1("new_kb1",         "Untitled.kb")),
	assert(txt1("new_log1",        "Untitled.log")),
	assert(txt1("new_textfile",    "Untitled.txt")),
	assert(txt1("savewhat",        "Save knowledge base or dialog")),
	assert(txt1("openkb",          "Open knowledge base")),
	assert(txt1("opentkb",         "Open text knowledge base")),
	assert(txt1("read_kbt",        "Read to memory")),
	assert(txt1("edit_kbt",        "Read to editor")),
	assert(txt1("exitkb",          "Exit ESTA")),
	assert(txt1("savekb",          "Save current knowledge base in")),
	assert(txt1("kb_loaded",       "Entered Knowledge Base: ")),
	assert(txt1("log_loaded",      "Entered dialog: ")),
	assert(txt1("kb_saved",        "Knowledge Base saved in ")),
	assert(txt1("text_saved",      "Text saved in ")),
	assert(txt1("log_saved",       "Dialog saved in ")),
	assert(txt1("updated",         "updated")),
	assert(txt1("saved",           "saved")),
	assert(txt1("delsect",         "Delete section %")),
	assert(txt1("delparam",        "Delete parameter %")),
	assert(txt1("deleted",         "deleted")),
	assert(txt1("savclose",        "Update % before closing")),
	assert(txt1("savconsult",      "Update % before consultation")),
	assert(txt1("close_edit",      "Close editor")),
	assert(txt1("close_log",       "Close dialog")),
	assert(txt1("log_copyheader",  "Copy text from dialog to clipboard")),
	assert(txt1("log_copytext",    "Select text to copy to the clipboard")),
	assert(txt1("log_copybtn",     "&Copy")),
	fail.
  create_definition_file (_SID,_DF) :-
	assert(txt1("choose_sect",     "Choose a section")),
	assert(txt1("choose_param",    "Choose a parameter")),
	assert(txt1("choose_paropt",   "Choose an option for %")),
	assert(txt1("chckknow",        "Check knowledge")),
	assert(txt1("knowledgelist",   "Current knowledge base")),
	assert(txt1("why",             "Why")),
	assert(txt1("explain",         "Explain")),
	assert(txt1("continue",        "Continue")),
	assert(txt1("stop",            "Stop")),
	assert(txt1("whyadv",          "Why was the last advice given ?")),
	assert(txt1("whyquest",        "Why was the question being asked ?")),
	assert(txt1("adv",             "Advice")),
	assert(txt1("parmtree",        "Parameter tree")),
	assert(txt1("secttree",        "Section tree")),
	assert(txt1("findcaption",     "Find")),
	assert(txt1("findtxt",         "Fi&nd What:")),
	assert(txt1("findcase",        "Match &Case")),
	assert(txt1("findup",          "&Up")),
	assert(txt1("finddown",        "&Down")),
	assert(txt1("finddir",         "Direction")),
	assert(txt1("findnext",        "&Find Next")),
	assert(txt1("findclose",       "Close")),
	assert(txt1("findhelp",        "Help")),
	assert(txt1("word_notfound",   "The string % not found")),
	assert(txt1("replacecaption",  "Replace")),
	assert(txt1("replwith",        "Re&place With")),
	assert(txt1("repl",            "&Replace")),
	assert(txt1("replall",         "Replace &All")),
	assert(txt1("s_decl",          "section % : ' '")),
	assert(txt1("p_decl",          "parameter % : ' '\ntype %\n")),
	assert(txt1("p_bool",          "explanation ' '\n/* rules field */\nquestion ' '\npicture ' '")),
	assert(txt1("p_cat",           "explanation ' '\noptions\n  option_1 - ' ',\n  option_2 - ' ',\n  option_n - ' '.\n/* rules field */\nquestion ' '\npicture ' '")),
	assert(txt1("p_numb",          "explanation ' '\n/* rules field */\n/* range field */\nquestion ' '\npicture ' '")),
	assert(txt1("p_text",          "explanation ' '\n/* rules field */\nquestion ' '\npicture ' '")),
	assert(txt1("p_typel",         "boolean;category;text;number")),
	assert(txt1("p_name",          "Name")),
	assert(txt1("p_noname",        "Name is empty. Please type a name")),
	assert(txt1("p_type",          "Type")),
	assert(txt1("p_exist",         "Parameter already exists.")),
	assert(txt1("s_exist",         "Section already exists.")),
	fail.
  create_definition_file (_SID,_DF) :-
	FL0="abs(X);arctan(X);cf_add(X,Y);cf_and(X,Y);cf_not(X);cf_or(X,Y);",
	concat(FL0,"chr(N);concat(S1,S2);copy(S,N,M);cos(X);",FL1),
	concat(FL1,"date();dec(X);delete(S,N,M);div(X,Y);ending(N,S);endstr(N,S);",FL2),
	concat(FL2,"exp(X);frac(X);inc(X);int(X);ival(S);known(S);ln(X);log(X);",FL3),
	concat(FL3,"lowcase(S);min(X,Y);max(X,Y);mod(X,Y);pos(S1,S2);power(X,Y);",FL4),
	concat(FL4,"randomint(N);random();round(X);rval(S);sin(X);sqr(X);sqrt(X);",FL5),
	concat(FL5,"startstr(N,S);str(X);strlen(S);tan(X);time();trunc(X);upcase(S)",FL6),
	assert(txt1("funclist",FL6)),
	AL0="advice '';assign <parameter> := <expression>;",
	concat(AL0,"call clear_all();call clear_value(<parameter>);call display(<filename>);",AL1),
	concat(AL1,"call hyperadvice(<filename>,<number>);call restore_values(<filename>);",AL2),
	concat(AL2,"call save_values(<filename>);call showpic(<picturename>);",AL3),
	concat(AL3,"call sound(integer,integer);call system(<program_name>);chain <filename>;",AL4),
	concat(AL4,"do <sectionname>;do_section_of <parametername>;exit;stop",AL5),
	assert(txt1("actlist",AL5)),
	assert(txt1("ins_pic",         "Select a picture name to insert")),
	assert(txt1("ins_act",         "Select an action name to insert")),
	assert(txt1("ins_func",        "Select a function name to insert")),
	assert(txt1("ins_file",        "Select a filename to insert")),
	assert(txt1("ins_all_file",    "All files (*.*)")),
	assert(txt1("call_system",     "Application activated - click here to proceed with ESTA session")),
	assert(txt1("cons_ver",        "It must be true that ")),
	assert(txt1("cons_nolong1",    "Following advice no longer applies:\n")),
	assert(txt1("cons_nolong2",    "\nEnd of advice no longer applying")),
	assert(txt1("cons_kb",         "Knowledge base")),
	assert(txt1("cons_sect",       "Section")),
	assert(txt1("cons_parm",       "Parameter")),
	assert(txt1("cons_sects",      "Sections")),
	assert(txt1("cons_parms",      "Parameters")),
	assert(txt1("cons_title",      "Title")),
	assert(txt1("cons_picture",    "Pictures")),
	assert(txt1("cons_quest",      "Question/Answer")),
	assert(txt1("cons_textfile",   "Text file")),
	assert(txt1("cons_logfile",    "Dialog")),
	assert(txt1("cons_logfile1",   "Dialog with pictures")),
	assert(txt1("cons_logfile2",   "Dialog without pictures")),
	assert(txt1("cons_parmdef",    "Definition of parameter: %")),
	assert(txt1("cons_sectdef",    "Definition of section: %")),
	assert(txt1("cons_value_dir",  "Parameter valuelist")),
	assert(txt1("cons_parm_dir",   "Parameterlist")),
	assert(txt1("cons_sect_dir",   "Sectionlist")),
	assert(txt1("cons_explain",    "Explain question")),
	assert(txt1("cons_how_parm",   "How was parameter % established")),
	assert(txt1("cons_within",     "Entered number must be in the legal range from: ")),
	assert(txt1("cons_to",         "to ")),
	assert(txt1("cons_isittrue",   "Is it true that ")),
	assert(txt1("cons_whatis",     "What is the value of ")),
	assert(txt1("cons_inferfail",  "Error in knowledge base, use the 'Check' command")),
	fail.
  create_definition_file (_SID,_DF) :-
	assert(txt1("alien_val",       "Parameter defined in other kb")),
	assert(txt1("main_checkok",    "No errors found")),
	assert(txt1("main_fileext",    ".KB")),
	assert(txt1("main_parmfront",  "#p")),
	assert(txt1("main_sektfront",  "#s")),
	assert(txt1("main_titlfront",  "#t")),
	assert(txt1("main_errfn2",     "Error in filename or file does not exist")),
	assert(txt1("main_symbmiss",   "Missing symbol in %:")),
	assert(txt1("syntax_error",    "Syntax Error !")),
	assert(txt1("endstr_err",      "The number % is bigger than the length of the string: %")),
	assert(txt1("pars_illchar",    "Illegal character ")),
	assert(txt1("pars_illexpect",  " expected\n")),
	assert(txt1("pars_strerr",     "String must be terminated by %")),
	assert(txt1("pars_bool",       "Boolean expression expected")),
	assert(txt1("pars_p_end",      "End of parameter definition expected")),
	assert(txt1("pars_s",          "Keyword: section")),
	assert(txt1("pars_p",          "Keyword: parameter")),
	assert(txt1("pars_t",          "Keyword: type")),
	assert(txt1("pars_o",          "Keyword: options")),
	assert(txt1("pars_sectname",   "Section name without quotes")),
	assert(txt1("pars_parname",    "Parameter name without quotes")),
	assert(txt1("pars_procname",   "Procedure name")),
	assert(txt1("pars_filename",   "File name")),
	assert(txt1("pars_type",       "Type name(boolean,category,number,text)")),
	assert(txt1("pars_cat",        "Category parameter name")),
	assert(txt1("pars_a",          "Action")),
	assert(txt1("pars_a1",         "Action (not if)")),
	assert(txt1("pars_a2",         "Action/Expression")),
	assert(txt1("pars_be",         "Beginning of boolean expression")),
	assert(txt1("pars_exp",        "Beginning of expression")),
	assert(txt1("pars_text",       "Text expression")),
	assert(txt1("pars_period",     "Period")),
	assert(txt1("pars_colon",      "Colon")),
	assert(txt1("pars_equal",      "Equal sign")),
	assert(txt1("pars_lpar",       "(")),
	assert(txt1("pars_rpar",       ")")),
	assert(txt1("pars_cp",         "Comma or period")),
	assert(txt1("pars_sep",        "Comma or )")),
	assert(txt1("pars_comma",      "Comma")),
	assert(txt1("pars_number",     "Number")),
	assert(txt1("pars_p_field",    "Parameter field")),
	assert(txt1("pars_qpfield",    "Question/Picture field")),
	fail.
  create_definition_file (_SID,_DF) :-
	assert(txt1("pars_picfield",   "Picture field")),
	assert(txt1("pars_optfield",   "Option name or period")),
	assert(txt1("pars_boolfield",  "Boolean value or period")),
	assert(txt1("pars_argpic",     "Argument to PICTURE")),
	assert(txt1("pars_argnot",     "Argument to NOT")),
	assert(txt1("pars_argminus",   "Argument to MINUS")),
	assert(txt1("pars_error",      "Syntax error")),
	assert(txt1("pars_comm",       "Comment must not be nested")),
	assert(txt1("pars_comm_end",   "Comment must be terminated by */")),
	assert(txt1("tok_error_str",   " token ")),
	assert(txt1("cons_noladv",     "No advice has been given in this session")),
	assert(txt1("cons2_rule1",     "\nby answering the following question:\n")),
	assert(txt1("cons2_rudtryk",   "\nby the following expression:\n	")),
	assert(txt1("cons2_rfolwrule", "\nby using the following rule:\n	")),
	assert(txt1("cons2_rif",       "if ")),
	assert(txt1("cons2_rsiexp",    "\nby the following string expression\n	")),
	assert(txt1("cons2_ropt",      "\nby the following option\n	")),
	assert(txt1("cons2_whyl",      "The objective is to find out whether ")),
	assert(txt1("cons2_whyn",      "The objective is to establish the value of ")),
	assert(txt1("cons2_noexpl",    "\nThere is no further explanation for this question\n")),
	assert(txt1("cons2_iddiff",    "You cannot change the value of the current parameter")),
	assert(txt1("cons2_gotvalue",  " was given the value ")),
	assert(txt1("cons2_cause_adv", "This advice was given because the following condition(s) \nwas (were) fulfilled\n	")),
	assert(txt1("cons2_always",    "This advice always applies")),
	assert(txt1("cons2_always2",   "This advice was given because ")),
	assert(txt1("cons2_cursect",   "\nThis section is being executed because\n	")),
	assert(txt1("cons2_curstartsect","\nThe start section is the first to be executed")),
	assert(txt1("cons2_uniassign", "\nby assignment in section\n")),
	assert(txt1("cons2_alien",     "\nfrom reading a file\n")),
	assert(txt1("cons2_eq",        " is ")),
	assert(txt1("chck_kb",         "Please check the knowledge base.\n")),
	assert(txt1("chck_sect_err",   "Following section error(s) has been detected:\n")),
	assert(txt1("chck_tree_parm",  "Undefined parameter(s) detected:\n")),
	assert(txt1("chck_knowledge",  "Validating Knowledge Base")),
	assert(txt1("chck_impossible", " impossible (lack of heap or interrupted)")),
	assert(txt1("chck_sectudef",   "Undefined section")),
	fail.
  create_definition_file (_SID,_DF) :-
	assert(txt1("sect_notdefined", "Section % is not found.\nDo you want to define section % ?")),
	assert(txt1("parm_notdefined", "Parameter % is not found.\nDo you want to define parameter % ?")),
	assert(txt1("chck_csect",      "Cyclical referencing (sections)")),
	assert(txt1("chck_cparm",      "Cyclical referencing (parameters)")),
	assert(txt1("chck_pnotdef",    "Parameter not defined")),
	assert(txt1("chck_fnotdef",    "Function not defined")),
	assert(txt1("chck_pnotused",   "Parameter(s) not used")),
	assert(txt1("chck_snotused",   "Section(s) not used")),
	assert(txt1("chck_typeerror",  "Type error in expression")),
	assert(txt1("chck_cattypeerror","do_section_of take only a category parameter")),
	assert(txt1("chck_notdef",     "Not defined")),
	assert(txt1("chck_ill_arity",  "Illegal number of arguments, should be ")),
	assert(txt1("chck_snotfound",  "Section 'start' not found")),
	assert(txt1("wrex_cond",       "\nThis is necessary to evaluate the condition\n")),
	assert(txt1("wrex_parml",      "\nThis will help discover whether\n")),
	assert(txt1("wrex_parmn",      "\nwhich will establish the value of\n")),
	assert(txt1("wrex_vol",        "\nwhich will establish the value after volunteered information\n")),
	assert(txt1("wrex_exp",        "\nwhich is necessary to evaluate the expression\n")),
	assert(txt1("wrex_nextdisplay","\nwhich is necessary to show the text\n")),
	assert(txt1("wrex_nextrefer",  "\nwhich is necessary to refer the section\n")),
	assert(txt1("wrex_nextquit",   "\nwhich is necessary to quit the section\n")),
	assert(txt1("wrex_nextexit",   "\nwhich is necessary to terminate the consultation\n")),
	assert(txt1("wrex_nextcall",   "\nwhich is needed to call the external predicate\n")),
	assert(txt1("wrex_ass1",       "\nTo assign a value to the parameter:\n")),
	assert(txt1("wrex_ass2",       "\nevaluated from the following expression:\n")),
	assert(txt1("aux_yes",         "Yes")),
	assert(txt1("aux_no",          "No")),
	assert(txt1("aux_unknown",     "Unknown")),
	assert(txt1("parmnotfound",    "Parameter not found")),
	assert(txt1("has_value",       "Parameter already has a value")),
	assert(txt1("answ_intg_err",   "Answer is not a number. Examples: 10 10.5")),
	assert(txt1("div_zero_err",    "Division by zero is not allowed")),
	assert(txt1("si_notinst",      "\nString expression in question contains unevaluated parameters")),
	assert(txt1("no_rule_determ",  "\nRule-determined parameters cannot be changed")),
	assert(txt1("answer_err",      "\nWrong answer")),
	assert(txt1("proc_error","Error in procedure call. Illegal arguments")),
	assert(txt1("func_error","Error in function call. Illegal arguments")),
	assert(txt1("func_name_error","Can't find the function name: %")),
	assert(txt1("proc_name_error","Can't find the procedure name: %")),
	assert(txt1("system_error",    "Can't execute % \nWinexec error: %")),
	assert(txt1("text_to_big_err", "The text is too big to be shown")),
	assert(txt1("quest_only","Only question determined parameters can be changed.")),
	assert(txt1("sys_name","ESTA")),
	assert(txt1("usr_name","USER")),
	assert(txt1("adv_name","ADVICE")),
	fail.
  create_definition_file (_SID,_DF) :-
	assert(tok_keyw_str(period,    ".")),
	assert(tok_keyw_str(colon,     ":")),
	assert(tok_keyw_str(comma,     ",")),
	assert(tok_keyw_str(andsign,   "&")),
	assert(tok_keyw_str(lpar,      "(")),
	assert(tok_keyw_str(rpar,      ")")),
	assert(tok_keyw_str(plus,      "+")),
	assert(tok_keyw_str(minus,     "-")),
	assert(tok_keyw_str(mult,      "*")),
	assert(tok_keyw_str(div,       "/")),
	assert(tok_keyw_str(eq,        "=")),
	assert(tok_keyw_str(lt,        "<")),
	assert(tok_keyw_str(gt,        ">")),
	assert(tok_keyw_str(if_,       "if")),
	assert(tok_keyw_str(not_,      "not")),
	assert(tok_keyw_str(and_,      "and")),
	assert(tok_keyw_str(or_,       "or")),
	assert(tok_keyw_str(true,      "true")),
	assert(tok_keyw_str(false,     "false")),
	assert(tok_keyw_str(unknown,   "unknown")),
	assert(tok_keyw_str(fact,      "boolean")),
	assert(tok_keyw_str(phrase,    "text")),
	assert(tok_keyw_str(number,    "number")),
	assert(tok_keyw_str(category,  "category")),
	assert(tok_keyw_str(options,   "options")),
	assert(tok_keyw_str(range,     "range")),
	assert(tok_keyw_str(rule,      "rules")),
	assert(tok_keyw_str(explanation,"explanation")),
	assert(tok_keyw_str(askable,   "question")),
	assert(tok_keyw_str(section,   "section")),
	assert(tok_keyw_str(reference, "do")),
	assert(tok_keyw_str(reference_par,"do_section_of")),
	assert(tok_keyw_str(quit,      "quit")),
	assert(tok_keyw_str(quit,      "stop")),
	assert(tok_keyw_str(descriptor,"descriptor")),
	assert(tok_keyw_str(type,      "type")),
	assert(tok_keyw_str(parameter, "parameter")),
	assert(tok_keyw_str(image,     "picture")),
	assert(tok_keyw_str(advice,    "advice")),
	assert(tok_keyw_str(call,      "call")),
	assert(tok_keyw_str(exit,      "exit")),
	assert(tok_keyw_str(chain,     "chain")),
	assert(tok_keyw_str(assign,    "assign")),
	fail.
  create_definition_file (SID,DF) :-
	assert(tok_str1(id(""),        "identifier ")),
	assert(tok_str1(s(""),         "string ")),
	assert(tok_str1(float(0),      "real")),
	assert(tok_str1(int(0),        "integer")),
	assert(tok_str1(eof,           "")),
	assert(tok_str1(lt,            "<")),
	assert(tok_str1(gt,            ">")),
	assert(tok_str1(plus,          "+")),
	assert(tok_str1(minus,         "-")),
	assert(tok_str1(mult,          "*")),
	assert(tok_str1(div,           "/")),
	assert(tok_str1(lpar,          "(")),
	assert(tok_str1(rpar,          ")")),
	assert(tok_str1(dotdot,        "..")),
	assert(tok_str1(comma,         ",")),
	assert(tok_str1(period,        ".")),
	assert(tok_str1(andsign,       "+")),
	assert(tok_str1(colon,         ":")),
	assert(tok_str1(eq,            "=")),
	assert(tok_str1(ne,            "<>")),
	assert(tok_str1(le,            "<=")),
	assert(tok_str1(ge,            ">=")),
	%format (Err,"Can't create definition file %s",DF),
	trap(save(DF,definitions),Err,err_Report(SID,Err)),!.
  create_definition_file (_,_) :-!.






