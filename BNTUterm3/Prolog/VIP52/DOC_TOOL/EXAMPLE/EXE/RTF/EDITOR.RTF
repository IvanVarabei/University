{\rtf1\ansi \deff5\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv{\*\falt Arial};}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\froman\fcharset0\fprq2 CG Times;}{\f13\fswiss\fcharset0\fprq2 Univers;}{\f14\fswiss\fcharset0\fprq2 Univers Condensed;}{\f15\fswiss\fcharset0\fprq2 Antique Olive;}
{\f16\fswiss\fcharset0\fprq2 Albertus Medium;}{\f17\fswiss\fcharset0\fprq2 Albertus Extra Bold;}{\f18\fmodern\fcharset0\fprq1 Letter Gothic;}{\f19\fnil\fcharset2\fprq2 Wingdings;}{\f20\fnil\fcharset2\fprq2 Marlett;}
{\f21\fswiss\fcharset204\fprq2 Arial Cyr;}{\f22\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f23\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f24\fnil\fcharset2\fprq2 Monotype Sorts;}{\f25\fswiss\fcharset0\fprq2 Arial Narrow;}
{\f26\fscript\fcharset0\fprq2 Monotype Corsiva;}{\f27\froman\fcharset2\fprq2 MT Extra;}{\f28\fmodern\fcharset2\fprq1 MS LineDraw;}{\f29\fdecor\fcharset0\fprq2 Algerian;}{\f30\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}
{\f31\fscript\fcharset0\fprq2 Brush Script MT;}{\f32\fdecor\fcharset0\fprq2 Colonna MT;}{\f33\froman\fcharset0\fprq2 Footlight MT Light;}{\f34\fswiss\fcharset0\fprq2 Impact;}{\f35\froman\fcharset0\fprq2 Wide Latin;}
{\f36\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f37\fnil\fcharset0\fprq2 HelvC;}{\f38\fnil\fcharset0\fprq2 TimesC;}{\f39\froman\fcharset0\fprq2 Book Antiqua;}{\f40\froman\fcharset0\fprq2 Bookman Old Style;}
{\f41\fswiss\fcharset0\fprq2 Century Gothic;}{\f42\froman\fcharset0\fprq2 Century Schoolbook;}{\f43\fdecor\fcharset0\fprq2 Braggadocio;}{\f44\fswiss\fcharset0\fprq2 Britannic Bold;}{\f45\fdecor\fcharset0\fprq2 Desdemona;}
{\f46\fdecor\fcharset0\fprq2 Kino MT;}{\f47\fdecor\fcharset0\fprq2 Playbill;}{\f48\fswiss\fcharset0\fprq1 MS Dialog;}{\f49\froman\fcharset0\fprq2 CG Times (WN);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\f5\fs20 \snext0 Normal;}{\s1\sb60\keepn \b\f5 \sbasedon0\snext0 heading 1;}{\s2\li360\ri360\sb120 \b\f5 \sbasedon0\snext0 heading 2;}{\s3\sb240\sa60\keepn \b\f5 \sbasedon0\snext0 heading 3;}
{\s4\li360 \f5\ul \sbasedon0\snext0 heading 4;}{\s5\sb240\sa60 \f5\fs22 \sbasedon0\snext0 heading 5;}{\s6\sb240\sa60 \i\f5\fs22 \sbasedon0\snext0 heading 6;}{\s7\sb240\sa60 \f5\fs20 \sbasedon0\snext0 heading 7;}{\s8\sb240\sa60 \i\f5\fs20 
\sbasedon0\snext0 heading 8;}{\s9\sb240\sa60 \i\f5\fs18 \sbasedon0\snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon0\snext15 Text;}{\s16\fi-567\li851 \f11\fs20 \sbasedon17\snext16 
ProgrHang;}{\s17\li284\keep \f11\fs20 \sbasedon0\snext17 progr;}{\s18\qj\fi-851\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon15\snext18 Text_Hang;}{\s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon15\snext19 Text_Ind;}{
\s20\qj\li284\keep\tx1701 \f5\fs20 \sbasedon0\snext20 Table Text;}{\s21\qj\fi-851\li851\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon18\snext21 Table_Hang;}{\s22\qj\li851\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon19\snext22 Table_Ind;}{\s23\sa80\keepn 
\b\f5\cf2 \sbasedon0\snext0 Topic Jump Heading;}{\s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 \sbasedon15\snext24 Text Bold;}{\s25 \f5\fs20 \sbasedon0\snext25 footnote text;}{\*\cs26 \additive\super \sbasedon10 footnote reference;}{
\s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon15\snext27 Text 1st;}{\s28\sa120 \b\f5\cf2 \sbasedon23\snext28 Topic PopUp Heading;}{\s29\sb40\sa40\keepn \b\f5\fs16 \sbasedon0\snext29 Topic Reference;}{\s30\sb60\sa60\keepn \b\f5\cf2 
\sbasedon0\snext30 Topic 1Jump Heading;}{\s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon15\snext31 Text_Bullet;}{\s32\qj\sa120\keep\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon15\snext32 Text NonWrap;}{
\s33\qj\keep\tx284\tx3402 \f5\fs20 \sbasedon15\snext33 Text NWCond;}{\s34\qj\fi-1701\li1701\tx1701 \f5\fs20 \sbasedon15\snext34 Text Cond Hang;}{\s35\li851\keep \f11\fs20 \sbasedon17\snext35 ProgrInd;}{\s36\fi-851\li1702 \f11\fs20 \sbasedon35\snext36 
ProgrIndHang;}{\s37\li284\sb120\keep \f11\fs20 \sbasedon17\snext37 progr1st;}{\s38\li1701\keep \f11\fs20 \sbasedon35\snext38 ProgrInd2;}{\s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 \sbasedon0\snext39 Progr Section;}{\s40\qj 
\f5\fs20 \sbasedon15\snext40 Text Cond;}{\s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon15\snext41 Text0_Ind;}{\s42\keep \f5\fs20 \sbasedon43\snext42 C Nw;}{\s43 \f5\fs20 \sbasedon0\snext43 C;}{\s44\sa120 \f5\fs20 \sbasedon0\snext44 M;}{
\s45\qj\sb120 \b\f5\fs20\ul \sbasedon40\snext45 Text Cond 1;}{\s46\sb120\sa120 \f5\fs20 \sbasedon44\snext46 M 1;}{\s47\fi-851\li851\sa120 \f5\fs20\lang2057 \sbasedon0\snext47 M H;}{\s48\sb120 \f5\fs20 \sbasedon43\snext48 C 1;}{\s49\fi-851\li851 \f5\fs20 
\sbasedon43\snext49 C H;}{\s50\fi-851\li851\sb120 \f5\fs20 \sbasedon49\snext50 C H 1;}{\s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 \sbasedon47\snext51 M H 1;}{\s52\li851 \f5\fs20 \sbasedon43\snext52 C I;}{\s53 \f5\fs20 \sbasedon0\snext53 
annotation text;}{\s54\sa240 \f5\fs20 \sbasedon44\snext54 M L;}{\s55\sa120 \f5\fs20 \sbasedon43\snext55 C L;}{\s56\tqc\tx4320\tqr\tx8640 \f5\fs20 \sbasedon0\snext56 header;}{\*\cs57 \additive\fs16 \sbasedon10 annotation reference;}{\s58\li284\sa120 
\f5\fs20 \sbasedon44\snext58 M I 0;}{\s59\sa120\keep \f5\fs20 \sbasedon44\snext59 M NW;}{\s60\li851\sa120 \f5\fs20 \sbasedon44\snext60 M I;}{\s61\li284 \f5\fs20 \sbasedon43\snext61 C I 0;}{\s62\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 
\sbasedon22\snext62 Table_Ind_Last;}{\s63\fi-851\li1702\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon0\snext63 Table_IndHang;}{\s64\keep\tx851\tx1701\tx2552\tx3261\tx3402\tx5387\tx6521 \f5\fs20 \sbasedon0\snext64 Table_NonWrap;}{
\s65\li1701\keep\tx851\tx1701\tx2552\tx3261\tx3402\tx5387\tx6521 \f5\fs20 \sbasedon22\snext65 Table_NW_2Ind;}{\s66\li851\keep\tx851\tx1701\tx2552\tx3261\tx3402\tx5387\tx6521 \f5\fs20 \sbasedon22\snext66 Table_NW_Indent;}{
\s67\fi-1701\li1701\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 \sbasedon18\snext67 Text_2Hang;}{\s68\qj\li851 \f5\fs20 \sbasedon0\snext68 Text C Ind;}{\s69\fi-851\li851\tx851 \f5\fs20 \sbasedon34\snext69 Text Cond 1H;}{\s70\sa40\keep\keepn \b\f5\fs20 
\sbasedon44\snext70 Topic Table;}{\s71\fi-284\li284\sa60\tx284 \f5\fs20 \sbasedon44\snext71 Bullet;}{\s72\fi-284\li568\sa60\tx567 \f5\fs20 \sbasedon71\snext72 Bullet I;}{\s73\fi-851\li1135 \f5\fs20 \sbasedon74\snext73 C H 0;}{\s74\fi-851\li1702 \f5\fs20 
\sbasedon49\snext74 C H I;}{\s75\fi-851\li1135\sa120 \f5\fs20\lang2057 \sbasedon47\snext75 M H 0;}{\s76\fi-851\li1702\sa120 \f5\fs20\lang2057 \sbasedon47\snext76 M H I;}{\s77\li284\keep \f11\fs20 \sbasedon0\snext77 P;}{\s78\li284\sb120\keep \f11\fs20 
\sbasedon77\snext78 P 1st;}{\s79\fi-567\li851 \f11\fs20 \sbasedon77\snext79 P Hang;}{\s80\li851\keep \f11\fs20 \sbasedon77\snext80 P I;}{\s81\li1701\keep \f11\fs20 \sbasedon80\snext81 P I 2;}{\s82\fi-851\li1702 \f11\fs20 \sbasedon80\snext82 P I H;}{
\s83\li284\sa120\keep \f11\fs20 \sbasedon77\snext83 P L;}{\s84\fi-851\li851\sb120\sa120 \f11\fs20 \sbasedon0\snext84 P Sec H;}{\s85\sb120\keep \f11\fs20 \sbasedon0\snext85 P Section;}{\s86\qj\fi-851\li851\tx851 \f5\fs20 \sbasedon0\snext86 Table H;}{
\s87\qj\li851\keep \f5\fs20 \sbasedon0\snext87 Table I;}{\s88\qj\fi-851\li1702\tx1701 \f5\fs20 \sbasedon0\snext88 Table I H;}{\s89\sb120\sa120 \f5\fs20 \sbasedon46\snext89 Topic without caption;}}{\*\revtbl {Unknown;}{Safro Elisabeth;}{Andrew Koutchoukov
;}{Serge Mukhin;}{Alexander Doronin;}{Alexander Gorlov;}{Serge Mukhin\'00\'11Alexander Doronin\'00e\'fbz\'f1;}{Alexander Doronin\'00\'0cSerge Mukhin\'00%\'fbl\'8f;}{Serge Mukhin\'00\'11Alexander Doronin\'00%\'fbj7;}
{Alexander Doronin\'00\'10Alexander Gorlov\'00%\'fa\'83^;}{Alexander Gorlov\'00\'0cSerge Mukhin\'00%\'fa\'82\'db;}{Serge Mukhin\'00\'11Alexander Doronin\'00%\'fa\'82H;}{Alexander Doronin\'00\'0cSerge Mukhin\'00e\'fa\\\'f7;}
{Alexander Doronin\'00\'0cSerge Mukhin\'00%\'fbl\'89;}{Alexander Doronin\'00\'10Alexander Gorlov\'00%\'fa\'83\\;}{Serge Mukhin\'00\'11Alexander Doronin\'00%\'fa\'82G;}{Andrew Koutchoukov\'00\'0cSerge Mukhin\'00e\'fb|\'88;}
{Andrew Koutchoukov\'00\'0cSerge Mukhin\'00e\'fb|\'89;}{Jonathan Lerwill;}{Andrew Kuchukov;}{Jakova Uliana;}}{\info{\title # $ K + Visual Prolog Text Editor for Users}{\author Andrew Koutchoukov}{\operator Andrew Koutchoukov}
{\creatim\yr1995\mo12\dy25\hr19\min48}{\revtim\yr1995\mo12\dy25\hr19\min48}{\version2}{\edmins6}{\nofpages159}{\nofwords16408}{\nofchars93527}{\vern49203}}\deftab851\widowctrl\ftnbj\aenddoc\noextrasprl\prcolbl\cvmme\sprsspbf\brkfrm\swpbdr\hyphcaps0 \fet0
{\*\template C:\\MSOFFICE\\WINWORD\\TEMPLATE\\ROBOHELP.DOT}\sectd \linex0\headery709\footery709\colsx709\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s23\sa80\keepn \b\f5\cf2 {
\cs26 #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Visual_Prolog_Text_Editor_for_Users}} {\cs26 ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Visual Prolog Text Editor for Users}} {\cs26 K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super 
K} Visual Prolog Text Editor for Users}} {\cs26 +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Integrated_Development_Environment_VDE')")} }Visual Prolog Text Editor for Users
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 See also : {\uldb\cf11 Editor API}{\v Visual_Prolog_Text_Editor_for_Programmers}
\par \pard\plain \s15\qj\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\uldb\cf11 About Visual Prolog Text Editor}{\v About_Visual_Prolog_Text_Editor}
\par {\uldb\cf11 Invoking Edit window}{\v Edit_window}
\par {\uldb\cf11 Editor menu functions}{\v Editor_window_Global_menu_functions}
\par \pard \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 {\uldb\cf11 Editor SpeedMenu}{\v Editor_SpeedMenu}
\par \pard\plain \s48\sb120 \f5\fs20 {\b Editor commands descriptions:
\par }\pard\plain \s43\fi-850\li1134 \f5\fs20 {\uldb\cf11 Clipboard}{\v Clipboard_commands}
\par {\uldb\cf11 Search Text}{\v Find_Text}
\par {\uldb\cf11 Replace Text}{\v Replace_Text}
\par {\uldb\cf11 Go To Line Number}{\v Go_To_Line_Number}
\par {\uldb\cf11 Go to Position}{\v Go_to_Position_dialog_box}
\par {\uldb\cf11 Go to Predicate Declaration}{\v Go_to_Predicate_Declaration}
\par {\uldb\cf11 Go to Predicate Clauses}{\v Go_to_Predicate_Clauses}
\par {\uldb\cf11 Browsing User Defined Names}{\v Browsing_User_Defined_Names}
\par {\uldb\cf11 Undo & Redo}{\v Undo_Redo_features}
\par {\uldb\cf11 Insert ... >>}{\v Insert}
\par 
\par \pard \s43 {\b Keyboard and mouse functions quick reference:
\par }\pard \s43\fi-850\li1134 {\uldb\cf11 Cursor movement commands}{\v Cursor_movement_commands}
\par {\uldb\cf11 Insert and delete commands}{\v Insert_and_delete_commands}
\par {\uldb\cf11 Block commands}{\v Keyboard_and_mouse_Block_commands}
\par {\uldb\cf11 Setting Editor modes}{\v Setting_Editor_modes}
\par {\uldb\cf11 Editor font}{\v Choosing_Editor_font}
\par {\uldb\cf11 Editor Key Map}{\v Editor_Key_Map}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Editor_Key_Map}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Editor Key Map}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} Editor Key Map}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Editor Key Map
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 See also: {\b0\uldb\cf11 VDE Key Map}{\b0\v VDE_Key_Map}
\par \pard\plain \s70\sa40\keep\keepn\tx2268 \b\f5\fs20 Hot key\tab Command description
\par \pard\plain \s49\fi-2268\li2268\tx2268 \f5\fs20 {\b F4\tab }Search Text{\b 
\par Shift+F3}\tab Search again
\par {\b Ctrl+F2\tab }Go To Line Number
\par {\b Shift+F2\tab }Go to Position 
\par {\b Alt+Backspace\tab }{\b\i Undo} command
\par {\b Alt+Shift+Backspace}\tab {\b\i Redo} command
\par {\b CTRL+Tab\tab }change the active window
\par \pard\plain \s42\li567\sb120\keep \f5\fs20 {\b\ul Block commands:
\par }\pard\plain \s49\fi-2268\li2268\tx2268 \f5\fs20 {\b Ctrl+X} \tab {\uldb\cf11 Cut}{\v Clipboard_commands}
\par {\b Shift+Del}
\par {\b Ctrl+C}\tab {\uldb\cf11 Copy}{\v Clipboard_commands}
\par {\b Ctrl+Ins}
\par {\b Ctrl+V}\tab {\uldb\cf11 Paste}{\v Clipboard_commands}
\par {\b Shift+Ins}
\par {\b Alt+Del}\tab {\uldb\cf11 Clear}{\v Clipboard_commands}
\par {\b Del}
\par {\b Ctrl+U\tab }Changes selected text to all uppercase letters
\par {\b Ctrl+O\tab }Changes selected text to all lowercase{\b  }letters
\par {\b Ctrl+P\tab }Toggle case.
\par \pard\plain \s42\li567\sb120\keep \f5\fs20 {\b\ul Selecting text:
\par }\pard\plain \s49\fi-2268\li2268\tx2268 \f5\fs20 {\b Shift+Left\tab }Left one character
\par {\b Shift+Right}\tab Right one character
\par {\b Shift+End}\tab End of line
\par {\b Shift+Home}\tab Beginning of line
\par {\b Shift+Down}\tab Same column on next line
\par {\b Shift+Up}\tab Same column on previous line
\par {\b Shift+PgDn}\tab One page down
\par {\b Shift+PgUp}\tab One page up
\par {\b Shift+Ctrl+Left}\tab Left one word
\par {\b Shift+Ctrl+Right}\tab Right one word
\par {\b Shift+Ctrl+End}\tab End of file
\par {\b Shift+Ctrl+Home}\tab Beginning of file
\par \pard\plain \s42\li567\sb120\keep \f5\fs20 {\b\ul Cursor movement commands:
\par }\pard\plain \s49\fi-2268\li2268\tx2268 \f5\fs20 {\b Left\tab }Character left
\par {\b Right\tab }Character right
\par {\b Ctrl+Left} \tab Word left
\par {\b Ctrl+Right\tab }Word right
\par {\b Up\tab }Line up
\par {\b Down\tab }Line down
\par {\b PgUp\tab }Page up
\par {\b PgDn\tab }Page down
\par {\b Home\tab }Beginning of line
\par {\b End\tab }End of line
\par {\b Ctrl+Home\tab }Top of file
\par {\b Ctrl+End\tab }Bottom of file
\par \pard\plain \s42\li567\sb120\keep \f5\fs20 {\b\ul Insert and delete commands:
\par }\pard\plain \s49\fi-2268\li2268\tx2268 \f5\fs20 {\b Del\tab }Delete character
\par {\b Backspace}\tab Delete character to left
\par {\b Ctrl+Y}\tab Delete line
\par {\b Ctrl+E}\tab Delete to end of line
\par {\b Ctrl+R}\tab Delete word right
\par {\b Ctrl+L}\tab Delete word left
\par \pard\plain \s42\li567\sb120\keep \f5\fs20 {\b\ul Insert menu commands:
\par }\pard\plain \s49\fi-2268\li2268\tx2268 \f5\fs20 {\b Ctrl+Shift+K}\tab Insert Key words
\par {\b Ctrl+Shift+S}\tab Insert Standard Predicate
\par {\b Ctrl+Shift+V}\tab Insert VPI Predicate
\par {\b Ctrl+Shift+W}\tab Insert call to Window or Dialog
\par {\b Ins\tab }Switch{\b  }Insert mode ({\i on / off})
\par {\b Ctrl+N\tab }Switch{\b  }Autoindent mode({\i on / off})
\par {\b CTRL+F}\tab Set font, font style and font size for the active {\b Edit }window
\par \pard\plain \s42\li567\sb120\keep \f5\fs20 {\b\ul File menu commands:
\par }\pard\plain \s49\fi-2268\li2268\tx2268 \f5\fs20 {\b F7}\tab New file
\par {\b F8}\tab Open file
\par {\b F2}\tab Save file
\par \pard\plain \s42\li567\sb120\keep \f5\fs20 {\b\ul VDE supported commands:
\par }\pard\plain \s49\fi-2268\li2268\tx2268 \f5\fs20 {\b Ctrl+Shift+D}\tab {\uldb\cf11 Go to selected Predicate Declaration}{\v Go_to_Predicate_Declaration}
\par {\b Ctrl+Shift+C}\tab {\uldb\cf11 Go to selected Predicate Clauses}{\v Go_to_Predicate_Clauses}
\par {\b Ctrl+B}\tab {\uldb\cf11 Browse User Defined Names}{\v Browsing_User_Defined_Names}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Go_to_Predicate_Declaration}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Go to Predicate Declaration}} {\cs26\super K
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Go to Predicate Declaration}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Go to Predicate Declaration
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\b0\v Portability_Only_VDE}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 You can use the {\b Ctrl+Shift+D }hot key to locate the declaration of the selected user defined predicate.
\par {\b Remarks} 
\par \pard\plain \s44\sa120 \f5\fs20 This feature is not supported by the editor it is provided by the Visual Prolog VDE.
\par To use this feature you must previously picreate a project database by choosing the {\b\ul P}{\b roject | }{\b\ul B}{\b uild} item from the VDE\rquote s menu .
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also: }
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\uldb\cf11 Go to Predicate Clauses}{\v Go_to_Predicate_Clauses}
\par {\uldb\cf11 Browsing User Defined Names}{\v Browsing_User_Defined_Names}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Go_to_Predicate_Clauses}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Go to Predicate Clauses}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} Go to Predicate Clauses}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Go to Predicate Clauses
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\b0\v Portability_Only_VDE}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 You can use the {\b Ctrl+Shift+C }hot key to locate the clauses corresponding to the selected user defined predicate.
\par {\b Remarks} 
\par \pard\plain \s44\sa120 \f5\fs20 This feature is not internally supported by the editor it is provided by Visual Prolog VDE.
\par To use this feature you must previously create a project database by choosing the {\b\ul P}{\b roject | }{\b\ul B}{\b uild} item from the VDE\rquote s menu .
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also: }
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\uldb\cf11 Go to Predicate Declaration}{\v Go_to_Predicate_Declaration}
\par {\uldb\cf11 Browsing User Defined Names}{\v Browsing_User_Defined_Names}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Browsing_User_Defined_Names}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Browsing User Defined Names}} {\cs26\super K
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Browsing User Defined Names}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Browsing User Defined Names
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\b0\v Portability_Only_VDE}
\par \pard\plain \s46\sb120\sa120\tx1418 \f5\fs20 {\b Hot Key: \tab Ctrl+B
\par }\pard\plain \s44\sa120 \f5\fs20 You can use the {\b Ctrl+B }hot key or {\b Project | Browse }VDE menu item to invoke the Source Code {\b Browse }dialog box. 
\par {\b\ul Using it you can: 
\par }\pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7\tab }search and locate the declarations for all user defined domains; 
\par {\f1 \'b7\tab }search and locate the declarations and clauses for all user defined predicates; 
\par {\f1 \'b7\tab }search for DOMAINS and Predicate names that contain the selected text as a substring.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks} 
\par \pard\plain \s44\sa120 \f5\fs20 This feature is not internally supported by the editor it is provided by Visual Prolog VDE.
\par To use this there must be an up to date PROJECT.BRO file, it can be created by using the {\b\ul P}{\b roject|}{\b\ul B}{\b uild} VDE menu item. The PROJECT.BRO file contains information about where domains and predicates are declared and defined.
\par {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }Jonathan}}
Note that the compiler will generate the file PROJECT.BRO only if the option {\b Generate Browser Information} (in the {\b Compiler Options} dialog box) is checked {\ul on}.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also: }
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 Go to Predicate {\uldb\cf11 Declaration}{\v Go_to_Predicate_Declaration}{\b , }Go to Predicate {\uldb\cf11 Clauses}{\v Go_to_Predicate_Clauses}
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Portability_Only_VDE}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Portability Only VDE}} Portability Only VDE{\b0 

\par }\pard\plain \s44\sa120 \f5\fs20 This feature is supported by Visual Prolog VDE, and is not supported internally by any of {\b\ul\cf11 edit_Create...()}{\b\v edit_Create_Predicates}{\b  }predicates.
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} About_Visual_Prolog_Text_Editor}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} About Visual Prolog Text Editor}} {
\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} About Visual Prolog Text Editor}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }About Visual Prolog Text Editor
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Text Editor of Visual Prolog Development Environment provides multiwindowing facilities and supports colored highlighting of 
Visual Prolog keywords and other language elements, unlimited undo/redo features, search, replace, cut, copy and paste operations and has drag and drop for quick block movements.
\par You can also perform the following actions in Visual Prolog {\uldb\cf11 Edit windows}{\v Edit_window}:
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx737\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7}\tab compile your programs;
\par \pard \s31\qj\fi-737\li737\sa60\tx284\tx567\tx737\tx851\tx1701\tx2552\tx3402 {\f1 \'b7}\tab read and write files to disk, clipboard operations.
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Programmers can create a copy of the VPI\rquote s Text Editor in their applications by using {\uldb\cf11 VPI}{\v The_VPI} predicates {\b\ul\cf11 edit_Create...()}{\b\v 
edit_Create_Predicates} (See also {\uldb\cf11 Visual Prolog Text Editor API}{\v Visual_Prolog_Text_Editor_for_Programmers}).
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 On 16 bit platforms the maximum file size is 65534 bytes, on 32 bit platforms it is practically unlimited.
\par The maximum line width for a line in an Edit window is 1024 characters.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Edit_window}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Edit window}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} Edit window}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")
} }Edit window
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 See also: {\uldb\cf11 Edit window menu functions}{\v Editor_window_Global_menu_functions}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Edit windows are used for creating and editing Visual Prolog code.
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Text is entered at the caret (insertion point). The  location of the caret can be set by the keyboard or mouse.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Opening Edit Windows
\par }\pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 There are several ways to open {\b Edit window}: 
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7}\tab Choose item {\b\ul F}{\b ile|}{\b\ul N}{\b ew} from Visual Prolog Main menu.
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 \tab Hot key: {\b F7}
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7}\tab Choose item {\b\ul F}{\b ile|}{\b\ul O}{\b pen} from Visual Prolog Main menu.
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 \tab Hot key: {\b F8}
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7}\tab Choose the {\b\ul F}{\b ile}
 item in Visual Prolog Main menu, the names of the most recently used files are usually listed at the bottom of the menu, click the left mouse button on one of file names in the list. 
\par {\f1 \'b7}\tab Click MODULE toolbar button in {\b Project window,} select the desired file and open it by pressing the EDIT button or by double clicking the file name with the left mouse button.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Remarks:
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Multiple Edit windows may contain the same file.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Set the active window
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402\tx8640 \f5\fs20 If there are several Edit windows in use, only one of them can be the active window. To select active window use one of the following methods:
\par {\pntext\pard\plain\f1\fs20\lang1033 \'b7\tab}\pard\plain \s31\qj\fi-360\li360\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f5\fs20 Press Ctrl+Tab;
\par {\pntext\pard\plain\f1\fs20\lang1033 \'b7\tab}Click the left mouse button in desired window;
\par {\pntext\pard\plain\f1\fs20\lang1033 \'b7\tab}Choose the window from the list of being edited files in the {\b Window} menu;
\par {\pntext\pard\plain\f1\fs20\lang1033 \'b7\tab}Click MODULE button in {\b Project window}, select a desired file and double click mouse button or click EDIT toolbar button.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Editor_window_Global_menu_functions}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Editor window Global menu functions}} {
\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Editor window Global menu functions}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Editor menu functions
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 See also: {\uldb\cf11 SpeedMenu}{\v Editor_SpeedMenu}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The following {\b Edit window} functions are accessible from the {\b Visual Prolog Main menu} (most of these functions are only available when an{\b  Edit window }
is selected as the active window):
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\uldb\cf11 File | ...}{\v File_submenu}
\par \pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Specific{\b  Edit windows} functions from {\b File} menu
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\uldb\cf11 Edit | ...}{\v Edit_submenu}
\par \pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Specific{\b  Edit windows} functions from {\b Edit} menu
\par \pard\plain \s20\qj\li284\keep\tx1701\tx3119 \f5\fs20 {\b Project |Compile File\tab }Hot key:{\b   Ctrl+F9}{\cs57\v\fs16 {\*\atnid JL}{\*\atnauthor Jonathan Lerwill}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field\flddirty{\*\fldinst {
\revised\revauth18\revdttm100106973 PAGE \\# "'Page: '#'\line '"}{\cs57\fs16\revised\revauth18\revdttm100106973   }}{\fldrslt }}{\cs57\fs16\revised\revauth18\revdttm100106973 \chatn }{\revised\revauth18\revdttm100106973 
 should there be a heading called Making an object file ?}}}{\b 
\par }\pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b Compile file} command from the {\b Project }menu  attempts to{\b  }compile an object file from the contents of the current {\b Edit window.}
\par \pard\plain \s20\qj\li284\keep\tx1701 \f5\fs20 {\b 
\par Options | Global |}{\uldb\cf11 Editor Options}{\v Editor_Options}{\cs57\v\fs16 {\*\atnid JL}{\*\atnauthor Jonathan Lerwill}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field\flddirty{\*\fldinst {\revised\revauth18\revdttm100106973 PAGE \\
# "'Page: '#'\line '"}{\cs57\fs16\revised\revauth18\revdttm100106973   }}{\fldrslt }}{\cs57\fs16\revised\revauth18\revdttm100106973 \chatn }{\revised\revauth18\revdttm100106973 should there be a heading called Setting editor Options ?}}}
\par \pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b Options} dialog is used to set up Editor defaults such as: {\i Insert/Overwrite }mode, {\i Autoindent/NoIndent} modes, the {\i Tab Size,} {\i color} and {\i font attributes}
 used to mark programming language elements.
\par \pard\plain \s20\qj\li284\keep\tx1701 \f5\fs20 {\b Options | Global | Font}
\par \pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This {\b Font} dialog defines the default {\i font}, {\i font style} and {\i font size} {\ul for all }{\b Edit} {\b windows}.
\par \pard\plain \s20\qj\li284\keep\tx1701\tx3402 \f5\fs20 {\b Options | Temporary | Font\tab }Hot key:{\b   Ctrl+F}
\par \pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This {\b Font} dialog is used to temporarily redefine the {\i font}, {\i font style} and {\i font size} {\ul of the active }{\b Edit window }
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} File_submenu}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} File submenu}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} File submenu}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Vi
sual_Prolog_Text_Editor_for_Users')")} }File {\fs20 menu}
\par \pard\plain \s40\qj \f5\fs20 {\b File|New}. \tab Hot key:  {\b F7}
\par \pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\uldb\cf11 New}{\v File_New_menu_item} command creates an empty {\b Edit window} with the default file name {\i Untitled}{\b . }You can also click the {\b New File}
 button in the Visual Prolog toolbar
\par \pard\plain \s40\qj \f5\fs20 {\b File|Open} \tab Hot key:  {\b F8}
\par \pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\uldb\cf11 Open}{\v File}{\b\v _Open_menu_item} command allows you to select and open a file by using a standard Windows {\b File Open} dialog. You can also click the {\b Open File }
button on the Visual Prolog toolbar
\par Visual Prolog keeps track of the files you last worked with. You can quickly open one of them by selecting it from the list at the bottom of the File menu.
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The following {\b Edit window} functions are accessible from {\b File} menu when one of {\b Edit windows }{\ul is the active window}:
\par \pard\plain \s40\qj \f5\fs20 {\b File|Save }\tab Hot key:  {\b F2
\par }\pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\uldb\cf11 Save}{\v File}{\b\v _Save_menu_item} command allows you to save the contents of the active {\b Edit window}
 to disk using the original filename. If a copy already exists it will be renamed as a backup copy. You can also click the {\b Save file }button in the Visual Prolog toolbar
\par \pard\plain \s43 \f5\fs20 {\b File|Save as}
\par \pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\uldb\cf11 Save as}{\v File}{\b\v _Save_as_menu_item} command invokes the dialog box which allows you to save the contents of the active {\b Edit window}
 to a file having a new name and/or extension.
\par \pard\plain \s43 \f5\fs20 {\b File|Print}
\par \pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Sends the contents of the active {\b Edit window} to a system {\b Printer}.
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Edit_submenu}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Edit submenu}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} Edit submenu}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Edit {\fs20 menu}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b Editing} functions accessible from the {\b\ul E}{\b dit} menu when an {\b Edit windows }is the active window:
\par \pard\plain \s19\qj\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b Edit | }{\ul\cf11 Undo}{\v Undo_Redo_features}{\ul 
\par }{\b Edit | }{\ul\cf11 Redo}{\v Undo_Redo_features}{\ul 
\par }{\b Edit | }{\uldb\cf11 Cut}{\v Clipboard_commands}
\par {\b Edit | }{\uldb\cf11 Copy}{\v Clipboard_commands}
\par {\b Edit | }{\uldb\cf11 Paste}{\v Clipboard_commands}
\par {\b Edit | }{\uldb\cf11 Delete}{\v Clipboard_commands}{\ul 
\par }{\b Edit | }{\ul\cf11 Select all}{\v Select_all}
\par {\b Edit | }{\uldb\cf11 Insert ... >>}{\v Insert}
\par {\b Edit | }{\uldb\cf11 Search}{\v Find_Text}
\par {\b Edit | }{\ul\cf11 Search again}{\v Search_again}
\par {\b Edit | }{\uldb\cf11 Replace}{\v Replace_Text}
\par {\b Edit | }{\uldb\cf11 Go to line number}{\v Go_To_Line_Number}
\par {\b Edit | }{\uldb\cf11 Go to position}{\v Go_to_Position_dialog_box}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Editor_Options}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Editor Options}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} Editor Options}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Options | Global | Editor Options
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 See also: {\uldb\cf11 Setting Editor Modes by using the Keyboard }{\v Setting_Editor_modes}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This command displays the Editor {\b Options }dialog box which is used to interactively define default Editor settings such as {\i Insert/Overwrite, Autoindent/NoIndent }modes, the {\i 
tab size,} the {\i foreground} / {\i background colors} and the {\i font} attributes of the programming language elements. 
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Any settings you make will take effect immediately and apply to {\ul all} {\b Editor windows}.{\b 
\par }\pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 {\cs57\b0\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }
}{\fldrslt }}{\cs57\fs16 \chatn }Jonathan}}Setting Edit Mode Options
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7\tab }In order to set the{\i  Insert mode} for the Editor;{\b  }check on the {\b Insert }checkbox{\b , }and uncheck it to select {\i Overwrite mode.}
\par \tab When {\i Insert mode} is {\ul on} text is inserted at the caret; existing text is moved to the right, otherwise the new text overwrites the existing text.{\cs57\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain 
\s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }Jonathan}}{\b 
\par }{\f1 \'b7\tab }In order to set the{\i  Autoindent mode} for the Editor;{\b  }check on the {\b Autoindent} check button{\b , }and{\b  }uncheck it to disable {\i Autoindent mode.}{\cs57\v\fs16  }{\cs57\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}
\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }Jonathan}}{\i 
\par }\tab If you press <enter> while {\i Autoindent mode}{\b  }is selected the system automatically aligns the caret with the first non white-space character on the preceding line.{\i 
\par }{\f1 \'b7\tab }You can set the new default {\i Tab Size} by changing the value in the {\b Tab Size} edit box. {\i Tab Size} determines the spacing between tab stops as the given number of blank spaces. {\i Tab Size}
 uses the current font to define the physical size of the space character used for indentation.
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\i Insert/Overwrite}, {\i Indent/Noindent} and {\i Tab Size} values are global for all {\b Edit windows} in an application.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Setting Programming Language Syntax Highlighting Options
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{
\cs57\fs16 \chatn }Jonathan}}Each {\b Edit window} can have its own settings for {\i colors} and {\i font} attributes of the Programming Language Syntax Elements. The Visual Prolog Text editor identifies the following Visual Prolog Syntax Elements:
\par \pard\plain \s72\fi-2126\li2410\sa60\tx567\tx2268\tx2410 \f5\fs20 {\f1 \'b7\tab }{\b Atom}\tab -\tab 
Is any identifier that starts with a lower case letter followed by any combination of zero or more letters, digits, and underscores. It can be either a functor name, {\cs57\v\fs16  }or a {\uldb\cf11 symbol}{\v symbol_glossary} / {\uldb\cf11 string}{\v 
string_glossary} type constant that is not surrounded by quotation marks, or a Visual Prolog compiler directive.
\par {\f1 \'b7\tab }{\b Variable}\tab -\tab A Visual Prolog variable.
\par {\f1 \'b7\tab }{\b String}\tab -\tab A {\uldb\cf11 symbol}{\v symbol_glossary} or {\uldb\cf11 string}{\v string_glossary} type constant surrounded by quotation marks.
\par {\f1 \'b7\tab }{\b Illegal Character}\tab -\tab An illegal (for the language) character or a set of characters not identified as legal syntax construction
\par {\f1 \'b7\tab }{\b Character}\tab -\tab An arbitrary character surrounded by single quotation marks: 'a'. (Character constant).
\par {\f1 \'b7\tab }{\b Hex}\tab -\tab A hexadecimal integer number.
\par {\f1 \'b7\tab }{\b Decimal}\tab -\tab A decimal integer number.
\par {\f1 \'b7\tab }{\b Float}\tab -\tab A floating-point number
\par {\f1 \'b7\tab }{\b Octal}\tab -\tab An octal integer number.
\par {\f1 \'b7\tab }{\b Key Words}\tab -\tab Key words reserved in the language
\par {\f1 \'b7\tab }{\b Comments}\tab -\tab Comments
\par {\f1 \'b7\tab }{\b Whitespace}\tab -\tab Spaces and tabulations
\par {\f1 \'b7\tab }{\b Hyper Text}\tab -\tab A jump or popup hyperfield in {\uldb\cf11 hypertext}{\v Hypertext_fundamentals} editor
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 When you load a file into an {\b Edit window}
 the default settings for the Highlighting of the Programming Language Syntax Elements are determined by the file extension. The Visual Prolog Text editor supports the following file extensions:
\par \pard\plain \s72\fi-3402\li3686\sa60\tx567\tx3544 \f5\fs20 {\f1 \'b7\tab }{\b .PRO}, {\b .DOM}, {\b .PRE}, {\b .CON}, {\b .INC}\tab - files with Prolog source code. 
\par {\f1 \'b7\tab }{\b .RC}\tab - resource script files. 
\par {\f1 \'b7\tab }{\b .DEF\tab }- module-definition files. 
\par {\f1 \'b7\tab }{\b .C}, {\b .H\tab }- files with C source code. 
\par {\f1 \'b7\tab }{\b Others\tab }- all other files.
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 In order to set the new values to the {\b Syntax Highlighting options} you must:
\par \pard\plain \s71\fi-284\li284\sa60\tx284 \f5\fs20 {\b 1.}\tab Choose the Programming Language file extension.
\par {\b 2.}\tab Choose in the {\b Element} listbox the Programming Language element whose attributes you want to change.
\par {\b 3.}\tab Now you can take the following actions:
\par \pard\plain \s72\fi-284\li568\sa60\tx567 \f5\fs20 {\f1 \'b7\tab }Check/Uncheck the {\b Default FG} (foreground color) and {\b Default BG} (background color) check boxes to use (or not) the default settings.
\par {\f1 \'b7\tab }Click the left mouse button on a color sample in the {\b Color} group box to customize the {\ul foreground} color. 
\par {\f1 \'b7\tab }Click the right mouse button on a color sample in the {\b Color} group box to customize the {\ul background} color. 
\par {\f1 \'b7\tab }Choose the font style (Normal, Bold or Italic) in the {\b Attribute} area. 
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b Remarks:
\par }\pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\ul The font attribute is active only for nonproportional fonts.
\par }\pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Cursor_movement_commands}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Cursor movement commands}} {\cs26\super K
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Cursor movement commands}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Cursor movement commands
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 In order to set the insertion point using the mouse, position the mouse cursor at the desired location and click the left mouse button.
\par \pard\plain \s24\qj\sb120\sa120\brdrb\brdrs\brdrw15\brsp20 \tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Command\tab Key
\par \pard\plain \s32\qj\sa120\keep\tx851\tx1701\tx2552\tx3402 \f5\fs20 Character left\tab {\b Left}
\par Character right\tab {\b Right}
\par Word left\tab \tab {\b Ctrl+Left} 
\par Word right\tab {\b Ctrl+Right}
\par Line up\tab \tab {\b Up}
\par Line down\tab {\b Down}
\par Page up\tab \tab {\b PgUp}
\par Page down\tab {\b PgDn}
\par Beginning of line\tab {\b Home}
\par End of line\tab {\b End}
\par Top of file\tab {\b Ctrl+Home}
\par Bottom of file\tab {\b Ctrl+End}
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_and_delete_commands}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Insert and delete commands}} {\cs26\super K
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Insert and delete commands}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Insert and delete commands
\par \pard\plain \s24\qj\sb120\sa120\brdrb\brdrs\brdrw15\brsp20 \tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Command\tab \tab Key
\par \pard\plain \s59\sa120\keep\tx2552 \f5\fs20 Delete character\tab {\b Del}
\par Delete character to left\tab {\b Backspace}
\par Delete line\tab {\b Ctrl+Y}
\par Delete to end of line\tab {\b Ctrl+E}
\par Delete right word\tab {\b Ctrl+R}
\par Delete left word\tab {\b Ctrl+L}
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Keyboard_and_mouse_Block_commands}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Keyboard and mouse Block commands}} 
{\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Keyboard and mouse Block commands}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Keyboard and mouse Block commands
\par \pard\plain \s40\qj \f5\fs20 {\uldb\cf11 Selecting text with keyboard}{\v Selecting_text_with_keyboard}
\par {\uldb\cf11 Selecting text with mouse}{\v Selecting_text_with_mouse}{\ul 
\par }{\ul\cf11 Copying blocks with mouse}{\v Copying_blocks_with_mouse}{\ul 
\par }\pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\ul\cf11 Moving blocks with mouse}{\v Moving_blocks_with_mouse}{\ul 
\par }\pard\plain \s24\qj\sb120\sa120\keep\brdrb\brdrs\brdrw15\brsp20 \tx1134\tx1701\tx2552\tx3402\tx4253 \b\f5\fs20 Hot key\tab Command description
\par \pard\plain \s34\qj\fi-1134\li1134\tx1134 \f5\fs20 {\b Ctrl+X} \tab {\uldb\cf11 Cut}{\v Clipboard_commands}{\b 
\par }\pard\plain \s40\qj \f5\fs20 {\b Shift+Del
\par 
\par }\pard\plain \s34\qj\fi-1134\li1134\tx1134 \f5\fs20 {\b Ctrl+C}\tab {\uldb\cf11 Copy}{\v Clipboard_commands}{\b 
\par }\pard\plain \s40\qj \f5\fs20 {\b Ctrl+Ins
\par 
\par }\pard\plain \s34\qj\fi-1134\li1134\tx1134 \f5\fs20 {\b Ctrl+V}\tab {\uldb\cf11 Paste}{\v Clipboard_commands}{\b 
\par }\pard\plain \s40\qj \f5\fs20 {\b Shift+Ins
\par 
\par }\pard\plain \s34\qj\fi-1134\li1134\tx1134 \f5\fs20 {\b Alt+Del}\tab {\uldb\cf11 Clear}{\v Clipboard_commands}{\b 
\par }\pard\plain \s40\qj \f5\fs20 {\b Del
\par 
\par }\pard\plain \s34\qj\fi-1134\li1134\tx1134 \f5\fs20 {\b Ctrl+U\tab }Changes selected text {\b to all uppercase} letters{\b 
\par 
\par Ctrl+O\tab }Changes selected text {\b to all lowercase }letters{\b 
\par 
\par Ctrl+P\tab Toggle case.} Changes all uppercase letters to lowercase letters and all lowercase letters to uppercase letters in the selection{\b 
\par }\pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Selecting_text_with_keyboard}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Selecting text with keyboard}} {
\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Selecting text with keyboard}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Selecting text with keyboard
\par \pard\plain \s24\qj\sb120\sa120\brdrb\brdrs\brdrw15\brsp20 \tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Command\tab \tab \tab Hot key
\par \pard\plain \s32\qj\sa120\keep\tx851\tx1701\tx2552\tx3402 \f5\fs20 Left one character\tab \tab \tab {\b Shift+Left arrow}
\par Right one character\tab \tab {\b Shift+Right arrow}
\par End of line\tab \tab \tab {\b Shift+End}
\par Beginning of line\tab \tab \tab {\b Shift+Home}
\par Same column on next line\tab \tab {\b Shift+Down}
\par Same column on previous line\tab {\b Shift+Up arrow}
\par One page down\tab \tab \tab {\b Shift+PgDn}
\par One page up\tab \tab \tab {\b Shift+PgUp}
\par Left one word\tab \tab \tab {\b Shift+Ctrl+Left arrow}
\par Right one word\tab \tab \tab {\b Shift+Ctrl+Right arrow}
\par End of file\tab \tab \tab {\b Shift+Ctrl+End}
\par Beginning of file\tab \tab \tab {\b Shift+Ctrl+Home}
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Selecting_text_with_mouse}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Selecting text with mouse}} {\cs26\super K
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Selecting text with mouse}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Selecting text with mouse
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 You can use the mouse to select text. In order to select any piece of text hold down the left mouse button, drag mouse across the text you want to select and release the button.
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 To select a word double-click the word.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Using SHIFT key with mouse:
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b 1.\tab If there is no selected block in the active Edit window.
\par }\tab Then click the left mouse button in an appropriate position to select the beginning of a block, press {\b Shift }key and hold it down, move mouse cursor across the text you want to select and again click the left mouse button.
\par {\b 2.\tab If there is a selected block in the active Edit window.
\par }\tab When you press {\b Shift }key and click the left mouse button, then you select the new text block with the same beginning position as the  previous one 1 and with the end position where the mouse was clicked.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Select_all}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Select all}} {\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {
\cs26\super K} Select all}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }
Select all
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Selects an entire document in the active {\b Edit window}
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Copying_blocks_with_mouse}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Copying blocks with mouse}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} Copying blocks with mouse}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Copying blocks with the mouse
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Select a block and press the <{\b Ctrl>}
 key while Holding the left mouse button down, the mouse cursor should now change to indicate that the selected block has been copied to the clipboar
d.. (if not make sure that the caret is positioned inside the selected text before pressing the <Ctrl> key and the left mouse button),{\revauth1\revdttm100106973  }
drag the mouse to the place where you want a copy of the selected block, the block will be pasted when the mouse button is released .
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Moving_blocks_with_mouse}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Moving blocks with mouse}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} Moving blocks with mouse}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Moving blocks with mouse
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Hold the left mouse button down while the caret is positioned inside a selected block. Drag the mouse to the place where you want to reposition the block, then release the mouse button.

\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Setting_Editor_modes}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Setting Editor modes}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} Setting Editor modes}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Setting Editor modes
\par \pard\plain \s32\qj\sa120\keep\brdrb\brdrs\brdrw15\brsp20 \tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b Mode name\tab Value\tab \tab Hot key
\par }\pard \s32\qj\sa120\keep\tx851\tx1701\tx2552\tx3402 Insert\tab \tab ON / OFF\tab {\b Ins}
\par Autoindent\tab ON / OFF\tab {\b Ctrl+N}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{
\cs57\fs16 \chatn }}}The text which you type is inserted at the caret and an existing text is moved to the right, if the {\i Insert mode} is ON. If {\i Insert mode }is OFF the text you type overwrites an existing text. 
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Pressing the {\b Ins} key toggles the {\i Insert mode}.
\par Pressing {\b Enter} when{\b\i  }{\i Insert mode} is ON splits current line, if {\i Insert mode }is OFF, the cursor moves to the start of the next line leaving the previous line unchanged. If you press {\b Enter} while{\i  Autoindent mode }
is ON the system automatically aligns the caret with the first non white-space character on the preceding line.
\par Pressing {\b Ctrl+N} toggles the {\i Autoindent mode}.
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Clipboard_commands}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Clipboard commands}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} Clipboard commands}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Clipboard commands
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b Clipboard} {\b commands} are accessible from the {\uldb\cf11 Editor SpeedMenu}{\v Editor_SpeedMenu} and from the {\b Edit } submenu.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Cut command
\par \pard\plain \s32\qj\sa120\keep\tx851\tx1701\tx2552\tx3402 \f5\fs20 Hot key:\tab \tab {\b Ctrl+X}  or  {\b Shift+Del} 
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Use this command to remove selected text and place it on the {\b Clipboard.} This command is unavailable if you have no selected text. Cutting text to the {\b Clipboard} rep
laces any text previously stored there.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Copy command
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Hot key:\tab \tab {\b Ctrl+C}  or  {\b Ctrl+Ins}
\par Use this command to copy selected text onto the {\b Clipboard.} This command is unavailable if you have no selected text. Copying text to the {\b Clipboard} replaces any text previously stored there.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Delete command
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Hot key:\tab \tab {\b Alt+Del}  or  {\b Del}
\par This command removes the selected text but does {\i not} copy it to the {\b Clipboard}.
\par The{\b  Delete} is useful if you want to delete superfluous text, but you do not want to overwrite the contents{\b  }of the{\b  Clipboard} text buffer.
\par Note that If you type while you have a block selected that block will be deleted and replaced by the character typed.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Paste command
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Hot key:\tab \tab {\b Ctrl+V}  or  {\b Shift+Ins}
\par This command places a copy of the {\b Clipboard} contents at the insertion point. It is unavailable if the {\b Clipboard} is empty.
\par {\b Remarks:}
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7\tab }If there is a selected block in active Edit window, the {\b Paste} command replaces the selected block with the contents of the {\b  Clipboard}
s text buffer.
\par {\f1 \'b7\tab }Remember that the {\b Clipboard} contents is the same one for all windows open in an application.
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Choosing_Editor_font}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Choosing Editor font}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} Choosing Editor font; font}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Vis
ual_Prolog_Text_Editor_for_Users')")} }Choosing the default Editor font
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 You can define the default {\i font, font style} and {\i font size }for all {\b Edit windows} by using the:
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7\tab }{\b\ul O}{\b ptions | }{\b\ul G}{\b lobal | }{\b\ul F}{\b ont} menu item
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 You can redefine the {\i font, font style} and {\i font size }for the active {\b Edit window} by using:
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7\tab }Hot key:  {\b Ctrl-F}
\par {\f1 \'b7\tab }{\b Font} editor {\uldb\cf11 SpeedMenu}{\v Editor_SpeedMenu} item
\par {\f1 \'b7\tab }{\b Options| Temporary | Font} menu item
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Editor_SpeedMenu}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Editor SpeedMenu}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} Editor SpeedMenu; SpeedMenu}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Editor SpeedMenu
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 You can access  {\b Editor}'s commands through the {\b Editor SpeedMenu}. Just click the right mouse button inside an {\b Edit window} client area.
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b Editor SpeedMenu} contains the next items:
\par \pard\plain \s43\li284 \f5\fs20 {\ul\cf11 Undo}{\v Undo_Redo_features}
\par {\ul\cf11 Redo}{\v Undo_Redo_features}
\par {\uldb\cf11 Cut}{\v Clipboard_commands}
\par {\uldb\cf11 Copy}{\v Clipboard_commands}
\par {\uldb\cf11 Paste}{\v Clipboard_commands}
\par {\uldb\cf11 Delete}{\v Clipboard_commands}
\par {\ul\cf11 Select all}{\v Select_all}
\par {\uldb\cf11 Insert ... >>}{\v Insert}
\par {\uldb\cf11 Search}{\v Find_Text}
\par {\ul\cf11 Search again}{\v Search_again}
\par {\uldb\cf11 Replace}{\v Replace_Text}
\par {\uldb\cf11 Go to line number}{\v Go_To_Line_Number}
\par {\uldb\cf11 Go to position}{\v Go_to_Position_dialog_box}
\par {\uldb\cf11 Font}{\v Choosing_Editor_font}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Find_Text}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Search Text}} {\cs26\b0\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} Find Text; Search Text}} {\cs26\b0\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Search Text
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\b0 Hot key: \tab }F4\tab See also: {\ul\cf11 Search again}{\v Search_again}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Use the {\b Find Text} dialog box to specify the text you wish to locate.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 {\ul\cf11 Text to Find}{\v Text_to_Find_input_box}{\b0 
\par }\pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 You enter the search string into the {\b Text to Find }input box. Choose {\b OK} to begin the search, or choose {\b Cancel} to terminate it.
\par Pressing the {\b Alt+Down}-{\b arrow} keys or pressing the List Buttons down-arrow will display the  {\ul\cf11 history list}{\v History_list} associated with the{\b  Text to Find} input box.
\par The search string can be specified by selecting a block of text before calling the {\b Search Text }dialog box. The selected text will appear in the {\b Text to Find }input box.
\par \pard\plain \s18\qj\fi-851\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\ul\cf11 Options}{\v Find_text_Options}{\ul \tab }This group of options defines the comparison method that the {\b Editor} uses when makes a search.
\par {\ul\cf11 Direction}{\v Find_text_Direction}{\ul \tab }The {\b Direction }radio buttons{\b  }specify the search direction.
\par {\ul\cf11 Origin}{\v Find_text_Origin}\tab The {\b Origin} radio buttons are used to  specify whether the search should start from the current cursor position or from the beginning of the file.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Text_to_Find_input_box}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Text to Find input box}} {\cs26\super !{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Text to Find input box
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Use this input box to enter a search string. Choose {\b OK} to begin the search, or choose {\b Cancel} to terminate it.
\par Press the {\b Alt+Down} arrow key or press the associated List Button (with Down arrow) to display a {\ul\cf11 history list}{\v History_list} associated with the{\b  Text to Find} input box.
\par You can also specify the search string by selecting a block in the edited text and then call the {\uldb\cf11 Search Text}{\v Find_Text} dialog box or {\uldb\cf11 Replace Text}{\v Replace_Text} dialog box The selected text will appears in the {\b 
Text to Find }input box.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} New_Text}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} New Text}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {
\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }New Text
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Use this input box to enter the text you want to replace the search string with.
\par Press the {\b Alt+Down} arrow key or press the associated List Button (with Down arrow) to display a {\ul\cf11 history list}{\v History_list} associated with the {\b New Text }input box.
\par You can also enter the {\b Replace} string by using the  {\uldb\cf11 Paste}{\v Clipboard_commands} command.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} History_list}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} History list}} {\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {
\cs26\super K} History list}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }
History list
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 When you see a Down arrow icon to the right of an input box, a history list is attached to the input box. 
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 A history list remembers text that you have already entered. You can edit any item when  you have pasted it  from the history list.
\par To invoke the history list click the Down arrow icon or press {\b Alt+Down_arrow}.
\par To choose an item from the history list, click the item to place it in the input box, and press {\b Enter}.
\par To exit the history list without making a selection, click the Down arrow icon again, alternatively press {\b Alt+Down_arrow}, or click outside of the input box and history list.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Find_text_Options}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Search text Options}} {\cs26\super !{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Search text Options
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This group of options defines the comparison method that the {\b Editor} uses when it makes a search.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Case Sensitive
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 When the {\b Case Sensitive} option is checked, the {\b Editor} differentiates between upper and lower case characters when performing a search.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Whole Words Only
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 When the {\b Whole Words Only} option is checked, the {\b Editor} searches for complete words only, substrings will not give a match.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Replace_Text}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Replace Text}} {\cs26\b0\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} Replace Text}} {\cs26\b0\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Replace Text 
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 Hot key:\tab Ctrl+F3
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b Replace Text} dialog box allows you to specify the text to search for and what to replace it with.
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b Replace Text} dialog box and of the {\uldb\cf11 Search Text}{\v Find_Text} dialog box have many common components. Both dialog boxes share the same history lists of {\i 
recently searched strings}.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 {\ul\cf11 Text to Find}{\v Text_to_Find_input_box}{\b0 
\par }\pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Enter the search string into the {\b Text to Find }input box. Choose {\b OK} to begin the search, or {\b Cancel} to terminate it.
\par Press the {\b Alt+Down} arrow key or press the associated List Button (with Down arrow) to display a {\ul\cf11 history list}{\v History_list} associated with the{\b  Text to Find} input box.
\par You can also specify the search string by selecting a block in the edited text before calling the {\b Search Text }dialog box. The selected text will appear in the {\b Text to Find }input box.
\par {\ul\cf11 New Text}{\v New_Text}
\par Enter the replacement string in the {\b New Text} input box. The {\ul\cf11 history list}{\v History_list} can be used to select a string from the list of previously used strings. Also the replacement string can be entered by using the {\uldb\cf11 Paste}{
\v Clipboard_commands} command.
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Once you have entered the search string and the replacement string in the input boxes, you can choose {\b OK} or {\ul\cf11 Change All}{\v Change_All_push_button} to begin the search; choo
se {\b Cancel} to terminate it.
\par \pard\plain \s18\qj\fi-851\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\ul\cf11 Options}{\v Find_text_Options}\tab This group of options defines the comparison method that the {\b Editor} uses when makes a search.
\par {\ul\cf11 Direction}{\v Find_text_Direction}\tab The {\b Direction }radio buttons{\b  }specify the search direction.
\par {\ul\cf11 Origin}{\v Find_text_Origin}\tab The {\b Origin} radio buttons are used to  specify whether the search should start from the current cursor position or from the beginning of the file.
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Replace_Text_Options}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Replace Text Options}} {\cs26\super !{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Replace Text Options
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This group of options defines the comparison method that the {\b Editor} uses when makes a search and a replacement.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Case Sensitive
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 When the {\b Case Sensitive} option is checked, the {\b Editor} differentiates upper from lower case characters when performing a search.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Whole Words Only
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 When the {\b Whole Words Only} option is checked, the {\b Editor}
 searches for words only; that is, the symbols matching the search string must have punctuation or space characters on both sides.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Prompt on Replace
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 If you checked {\b Prompt} {\b on replace }option and if you chose {\b Change All}. Then when the {\b Editor} finds the specified text, it
 asks if you wish to make the replacement for every instance of the search text. 
\par You can answer 'Yes', 'No, 'All' or 'Cancel'. 'All' means that all remaining replacements will be done without further prompting. 'Cancel' aborts the search.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Find_text_Direction}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Search text Direction}} {\cs26\super !{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Search text Direction
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b Direction} options specify which way you want the {\b Editor} to search, starting from the current cursor position. 
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Forward
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b Forward} radio button searches toward the end of the file.
\par {\b Forward} is the default {\b Direction} setting.
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Backward
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b Backward} radio button searches toward the beginning of the file.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Find_text_Origin}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Origin}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {
\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Origin
\par \pard\plain \s18\qj\fi-851\li851\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b Origin} options determines where the search begins
\par {\ul\cf11 Options}{\v Find_text_Options}{\ul \tab }This group of options defines the comparison method that the {\b Editor} uses when making a search.
\par {\ul\cf11 Direction}{\v Find_text_Direction}\tab The {\b Direction }radio buttons{\b  }specify the search direction.
\par {\ul\cf11 Origin}{\v Find_text_Origin}\tab The {\b Origin} radio buttons are used to  specify whether the search should start from the current cursor position or from the beginning of the file.
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 From Cursor
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b From Cursor} option starts the search at the cursors current position.
\par The search then proceeds either forward to the end of the file, or backward to the beginning of the file (depending on the {\b Direction} setting).
\par \pard\plain \s24\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \b\f5\fs20 Entire Scope
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b Entire Scope} option searches the entire file (no matter where the cursor is positioned in the file).
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Change_All_push_button}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Change All push button}} {\cs26\super !{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Change All {\b0 push button}
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Choose {\b Change All} if you want the editor to replace all occurrences of the search string defined by the {\uldb\cf11 Options}{\v Replace_Text_Options}, {\ul\cf11 Direction}{\v 
Find_text_Direction}, and {\ul\cf11 Origin}{\v Find_text_Origin} options.
\par If the {\b Editor} finds the specified text and if you checked {\b Prompt} {\b on replace} option, the editor will ask you  if you want to make the replacement. 
\par You can answer {\b 'Yes'}, {\b 'No\rquote }, {\b 'All'} or {\b 'Cancel'}. {\b 'All'} means that all remaining replacements will be done without further prompting. {\b 'Cancel'} interrupts the search.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Go_To_Line_Number}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Go To Line Number}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} Go To Line Number}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Go To Line Number
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 Hot key:\tab Ctrl+F2\tab \tab See also:\tab {\uldb\cf11 Go To Position}{\v Go_to_Position_dialog_box}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 You use the {\b Go To Line Number} dialog box to move the cursor to a particular line number.
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b Go To Line Number} dialog box consists of an {\b Enter new line number} input box with a {\ul\cf11 history list,}{\v History_list} and the standard {\b OK, Cancel,} and {\b Help}
 buttons.
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b Enter new line number} input box
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Type the number of the line you want, or pick a previously entered line number from the {\ul\cf11 history list,}{\v History_list} then press {\b Enter} (or click {\b OK}
). After that you can repeat the search or interrupt it.
\par If the specified line does not exist you will see a warning message box.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Go_to_Position_dialog_box}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Go to Position dialog box}} {
\cs26\b0\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Go to Position dialog box}} {\cs26\b0\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Go to Position {\b0 dialog box}
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 Hot key:\tab Shift+F2\tab \tab See also: \tab {\uldb\cf11 Go To Line Number}{\v Go_To_Line_Number}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 You use the {\b Go to Position Number}
 dialog box to move to a particular position in the edited text. This feature is useful for finding the exact location of an error in your source code, either as reported by the compiler or during program compilation or at execution time as a  runtime err
or.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Undo_Redo_features}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Undo / Redo features}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} Undo / Redo features}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Undo & Redo
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b Undo} & {\b Redo} commands are accessible from the {\b Edit }menu and {\b Editor} {\uldb\cf11 SpeedMenu}{\v Editor_SpeedMenu}{\ul 
\par }\pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b Undo} command reverses the last editing action
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 \tab Hot key:\tab {\b Alt+Backspace}
\par {\b Redo} command reverses the action of an {\b Undo} command
\par \tab Hot key:\tab {\b Alt+Shift+Backspace}
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Search_again}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Search again}} {\cs26\b0\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} Search again}} {\cs26\b0\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Search again
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Hot key:\tab {\b Shift+F3
\par }Finds and selects the next occurrence of the text specified in the {\uldb\cf11 Search text}{\v Find_Text} dialog box
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Insert... >>}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} Insert... >>}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} 
CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Insert... >>
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b\ul I}{\b nsert...>>} Simplify an insertion of Visual Prolog program elements into the source text:
\par \pard\plain \s42\keep \f5\fs20 Edit | Insert | Predicate call | {\ul\cf11 Std Predicate  }{\v Insert_Std_Predicate}
\par Edit | Insert | Predicate call | {\ul\cf11 VPI predicate}{\v Insert_VPI_predicate}
\par Edit | Insert | Predicate call | {\ul\cf11 Windows and Dialogs}{\v Insert_Windows_and_Dialogs}
\par \pard\plain \s48\sb120 \f5\fs20 Edit | Insert | {\ul\cf11 Key words}{\v Insert_Key_words}
\par \pard\plain \s43 \f5\fs20 Edit | Insert | {\ul\cf11 Constant ...}{\v Insert_Constant}
\par Edit | Insert | {\ul\cf11 Resource identifier ...}{\v Insert_Resource_identifier}
\par Edit | Insert | {\ul\cf11 FileName}{\v Insert_FileName}
\par Edit | Insert | {\ul\cf11 Directory}{\v Insert_Directory}
\par Edit | Insert | {\ul\cf11 Color}{\v Insert_Color}
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_Std_Predicate}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Insert | Std Predicate}} {\cs26\super !{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }{\ul I}nsert | {\ul P}redicate call | {\ul S}td Predicate
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Hot key: {\b Ctrl+Shift+S}
\par Invokes {\b "Common Purpose Predicates"} dialog with listbox where you can select the name of Visual Prolog standard predicate, that you wish to insert. The selected Predicate will be inserted with meaningful names of arguments. 
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_VPI_predicate}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} VPI predicate}} {\cs26\super !{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }{\ul I}nsert | {\ul P}redicate call | {\ul V}PI predicate
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Hot key: {\b Ctrl+ Shift+V}
\par Invokes the "{\b VPI Predicates"} dialog with listbox containing  the names of the VPI Predicates. Select the one that you wish to insert. The inserted predicate will have the default meaningful argument names. 
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_Windows_and_Dialogs}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} {\ul I}nsert | {\ul P}redicate call | {\ul W}
indow, Dialog or Toolbar}} {\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} {\ul I}nsert | {\ul P}redicate call | {\ul W}indow, Dialog or Toolbar}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super 
!{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }{\ul I}nsert | {\ul P}redicate call | {\ul W}indow, Dialog or Toolbar
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Hot key: {\b Ctrl+ Shift+W}
\par Invokes the {\b Insert Call} dialog box. {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }Jonathan}}
Click the radio button to select one of the groups:
\par \pard\plain \s71\fi-284\li284\sa60\tx284 \f5\fs20 {\f1 \'b7\tab }Common Dialog
\par {\f1 \'b7\tab }User defined Dialog
\par {\f1 \'b7\tab }User defined Window
\par {\f1 \'b7\tab }User defined Toolbar
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 
From the list edit control select a name of a predicate creating one of the standard (Common) VPI Dialogs or a name of a user defined resource. Click the OK button. The selected predicate call (the predicate call that creates the selected resource), with 
meaningful names of arguments, will be inserted into the source text. 
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_Key_words}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Insert/Key words}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} Insert/Key words}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }{\ul I}nsert | {\ul K}ey Words
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Hot key: {\b Ctrl+ Shift+K}
\par Invokes the {\b Key Words} dialog with listbox containing Visual Prolog {\uldb\cf11 key words}{\v Keywords}. The selected key word will be inserted into the edited text.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_Constant}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Insert/Constant  >>}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} Insert/Constant}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Insert | Constant ...
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Invokes submenu for selection of one of the next {\b VPI Constants} groups:
\par \pard\plain \s61\li284 \f5\fs20 Color
\par Controls
\par Cursor
\par Drawmode
\par Font
\par Patstile
\par Penstyle
\par Virtual Keys
\par Wintype
\par \pard\plain \s58\li284\sa120 \f5\fs20 Other Constants
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The Constants group selection invokes the corresponding dialog box containing a list box for constant name selection. The selected constant name will be inserted into the edited text.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_Resource_identifier}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Insert/Resource identifier  >>}} {\cs26\super K
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Insert/Resource identifier}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Insert | Resource Identifier ...
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This item makes it easy to insert the names of project resources into the source text.
\par The Resource groups are: 
\par \pard\plain \s61\li284 \f5\fs20 All
\par Dialogs
\par Dialog Controls
\par Window Controls
\par Menus
\par Menu Items
\par Icons
\par Cursors
\par Bitmaps
\par Strings
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_Domains}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Insert | Domains}} {\cs26\super !{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }{\ul I}nsert | {\ul D}omains
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Invokes a submenu where one of the following domains groups can be chosen:
\par \pard\plain \s61\li284 \f5\fs20 Base Domains
\par VPI Domains
\par Editor (VPI)
\par DialogPack (VPI)
\par OwnrerdrawPack (VPI)
\par ToolbarPack (VPI)
\par TreePack (VPI)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 The selection of a Domains group invokes another dialog box that contains a list of correspondent domain names. The selected domain name will be inserted into the edited text.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_FileName}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Insert/FileName}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} Insert/FileName}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }{\ul I}nsert | {\ul F}ileName
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Invokes the standard {\b VPI} {\b Open file }dialog box. The selected {\i file name} (with the {\i Path}
) will be inserted into the text of the program being edited in accordance with Visual Prolog syntax.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_Directory}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Insert/Directory}} {\cs26\super !{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Insert | Directory
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{
\cs57\fs16 \chatn }}}Invokes the {\b Set new directory} dialog box. The selected directory{\i  full name} (Path) will be inserted into the program text.
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Insert_Color}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Insert/Color}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {
\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Users')")} }Insert | Color
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Invokes the {\b Color} dialog box.
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{
\cs57\fs16 \chatn }}}In Microsoft Windows and other GUI systems  {\i Colors} are described by some {\i number}.
\par Click with the mouse to select a {\i Color} from {\b Color} dialog box. Visual Prolog generates the corresponding {\i number} in accordance with the GUI rules (this {\i number} will also be correct for the VPI). This number, or a constant identifying it,{
\i  } will be inserted into the program text.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Visual_Prolog_Text_Editor_for_Programmers}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Visual Prolog Text Edit
or for Programmers}} {\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Visual Prolog Text Editor for Programmers}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`VPI_Programming_Overviews')")} }The Visual Prolog Text Editor API
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 See also {\uldb\cf11 Editor for Users}{\v Visual_Prolog_Text_Editor_for_Users}
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Visual Prolog provides a set of predicates that, when used in GUI programs, allow its users to access the VPI Text Editor at run time. These predicates are {\uldb\cf11 edit_Create(),}{\v 
edit_Create},.{\uldb\cf11 edit_CreateWrap()}{\v edit_CreateWrap},.{\uldb\cf11 edit_CreateHyper()}{\v edit_CreateHyper}, and {\uldb\cf11 edit_CreateSubClass()}{\v edit_CreateSubClass}. {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn 
{\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }}}
All of these predicates works through the VPI system (supplied as part of Visual Prolog). Therefore, they are portable across all windowing systems supported by the VPI.
\par \pard\plain \s43 \f5\fs20 Application programmers can add new functions to text editors created by these {\b edit_Create_...()} predicates. Service predicates (functions) are provided to simplify access to the edited text(s) and to set the Editor options:

\par 
\par \pard\plain \s49\fi-851\li851\sa60 \f5\fs20 {\b\ul Editor Handling:
\par }\pard \s49\fi-850\li1134\sa60 {\uldb\cf11 Editor Modes Handling}{\v {\*\bkmkstart Editor_functions_groups}{\*\bkmkend Editor_functions_groups}Editor_Modes_Handling}
\par {\uldb\cf11 Access to Entire Editing Text}{\v Access_to_Entire_Editing_Text}
\par \pard\plain \s48\sb120\sa60 \f5\fs20 {\b\ul Editor Functions:
\par }\pard\plain \s49\fi-850\li1134\sa60 \f5\fs20 {\uldb\cf11 Caret Positioning Predicates}{\v Caret_Positioning_Predicates}
\par {\uldb\cf11 Edit Menu Predicates}{\v Edit_Menu_Predicates}
\par \pard \s49\fi-850\li1134 {\b Text Editing Functions:}
\par \pard \s49\fi-567\li1134 {\uldb\cf11 Block Manipulating Predicates}{\v Block_Manipulating_Predicates}
\par {\uldb\cf11 Deleting and Inserting Predicates}{\v Editor_Deleting_and_Inserting_Text_Predicates}
\par {\uldb\cf11 Undo and Redo Predicates}{\v Undo_Redo_Predicates}
\par \pard\plain \s50\fi-851\li851\sb120 \f5\fs20 {\b\uldb\cf11 Hyperfield Handling Functions}{\v Hyperfiels_Handling_Functions}
\par {\b\uldb\cf11 Editor Predicates Alphabetically}{\v Editor_Predicates_Alphabetically}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 For convenience of application programmers PDC provides the files EDITOR.DOM and EDITOR.PRE. These contain all of the declarations needed to use the {\b edit_Create...()} predicates.
\par \pard\plain \s44\sa120 \f5\fs20 File EDITOR.PRO contains the Visual Prolog source text for some sophisticated predicates that are based on the {\b edit_Create...()}
 predicates. Usually it will be easier to use these predicates in your application programs than use the {\b edit_Create...()} predicates directly.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Editor_hooks_predicates}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Editor Handling Predicates}} {\cs26\super K
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Editor Handling Predicates}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }Editor Handling predicates
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Visual Prolog makes it possible for application programmers the to add new functionality to the standard text editor created by {\uldb\cf11 edit_Create_...() predicates}{\v 
edit_Create_Predicates}. For this purpose Visual Prolog has a set of service predica
tes (functions) which provide application programs with easy access to the edited text and to the Editor options. Programmers can use these predicates in their applications for programming special operations for edited text:
\par \pard\plain \s48\sb120\sa60 \f5\fs20 {\b\ul Editor Handling:
\par }\pard\plain \s49\fi-850\li1134\sa60 \f5\fs20 {\uldb\cf11 Editor Modes}{\v Editor_Modes_Handling}
\par {\uldb\cf11 Access to Entire Editing Text}{\v Access_to_Entire_Editing_Text}
\par \pard\plain \s48\sb120\sa60 \f5\fs20 {\b\ul Editor Functions:
\par }\pard\plain \s49\fi-850\li1134\sa60 \f5\fs20 {\uldb\cf11 Caret Positioning Predicates}{\v Caret_Positioning_Predicates}
\par {\uldb\cf11 Edit Menu Predicates}{\v Edit_Menu_Predicates}
\par \pard \s49\fi-850\li1134 {\b Text Editing Functions:}
\par \pard \s49\fi-567\li1134 {\uldb\cf11 Block{\*\bkmkstart a_editor_API}{\*\bkmkend a_editor_API} Manipulating Predicates}{\v Block_Manipulating_Predicates}
\par {\uldb\cf11 Deleting and Inserting Predicates}{\v Editor_Deleting_and_Inserting_Text_Predicates}
\par {\uldb\cf11 Undo and Redo Predicates}{\v Undo_Redo_Predicates}
\par \pard\plain \s50\fi-851\li851\sb120 \f5\fs20 {\uldb\cf11 Hyperfield Handling Functions}{\v Hyperfiels_Handling_Functions }
\par {\b\uldb\cf11 Editor Predicates Alphabetically}{\v Editor_Predicates_Alphabetically}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Editor_Modes_Handling}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Editor Modes Handling}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} Editor Modes Handling}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }Editor Modes
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\uldb\cf11 Editor options}{\v Editor_Options}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul Editor Options List Accessing Predicates:
\par }\pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_GetOptions}{\b\v edit_GetOptions}{\b (}ILIST {\i OptionsList}{\b ) - }({\b o})
\par {\b\uldb\cf11 edit_SetOptions}{\b\v edit_SetOptions}{\b (}ILIST{\i  OptionsList}{\b ) - }({\b i})
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 The {\b edit_GetOptions} and {\b edit_SetOptions}
 predicates are useful for implementing persistent editor options. You can read in a configuration file in the start of your application session and call {\b edit_SetOptions}
 predicate to activate the stored options. At end of application session you can obtain the editor options using {\b edit_GetOptions} and store them in a configuration file.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul Editor Options Modification Predicates:
\par }\pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 By using {\b edit_OptionsDlg} and other predicates from this group, application programmer can allow users 
to modify the Editor mode options during an editing session. In all predicates the argument {\i WinHandle }is the handle of the Editor window.
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_OptionsDlg()}{\v edit_OptionsDlg_0}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Calls the editor {\uldb\cf11 Options}{\v Editor_Options} dialog box and allows users to modify the {\i Tabulation size} (but no more then 9 blank spaces), {\i Indent/Noindent} mode, {\i 
Insert/Overwrite} mode and {\i Programming Language Elements Syntax Highlighting Options}. Any changes made will immediately be applied to all {\b Editor windows}. 
\par \pard\plain \s33\qj\sb120\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_SetIndent}{\b\v edit_SetIndent_2}{\b (}WINDOW {\i WinHandle, }BOOLEAN {\i OnOff}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Sets the {\i Indent/Noindent }mode state
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 BOOLEAN /*{\i ModeState}*/ {\b\uldb\cf11 edit_GetIndent}{\b\v edit_GetIndent_1}{\b (}WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\tx851\tx1701\tx2552\tx3402 \f5\fs20 Returns the indentation mode state . The {\i ModeState} is:
\par \pard \s41\qj\fi-850\li1701\tx1701\tx2552\tx3402 {\i b_true:\tab - }if indentation mode is {\b on}; 
\par \pard \s41\qj\fi-850\li1701\sa120\tx1701\tx2552\tx3402 {\i b_false} \tab - if indentation mode is {\b off}.
\par \pard\plain \s33\sb120\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_SetInsert}{\b\v edit_SetInsert_2}{\b (}WINDOW {\i WinHandle, }BOOLEAN {\i OnOff}{\b )} 
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Sets the insert mode state 
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 BOOLEAN /*{\i ModeState}*/ {\b\uldb\cf11 edit_GetInsert}{\b\v edit_GetInsert_1}{\b (}WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\fi-850\li1701\sa120\tx1701\tx2552\tx3402 \f5\fs20 Returns the insert mode state .
\par \pard\plain \s33\qj\sb120\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_SetTabSize}{\b\v edit_SetTabSize_2}{\b (}WINDOW{\i  WinHandle,} INTEGER {\i TabSize}{\b )} 
\par \pard\plain \s58\li284\sa120 \f5\fs20 Set tabulation size equal to {\i TabSize} blank spaces (but no more then 9).
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 INTEGER /*{\i TabSize}*/ {\b\uldb\cf11 edit_GetTabSize()}{\b\v edit_GetTabSize_1}
\par \pard\plain \s58\li284\sa120 \f5\fs20 Returns the current {\i Tabulation size }in blank spaces.
\par \pard\plain \s49\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_SetFontDlg}{\b\v edit_SetFontDlg_1}(WINDOW{\i  WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Invokes the {\b Font }dialog from which {\i font}, {\i font style} and {\i font size }can be selected.
\par \pard\plain \s49\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_SetColoring}{\v edit_SetColoring_2}(WINDOW{\i  WinHandle,} INTEGER {\i TypeOfColoring}) 
\par \pard\plain \s58\li284\sa120 \f5\fs20 Sets a new {\b coloring scheme}{\i  TypeOfColoring }for{\i  an }{\b Editor window}{\i  WinHandle}.
\par \pard\plain \s49\fi-851\li851 \f5\fs20 EDIT_ASSLIST /*{\i AssociationsList}*/ {\b\uldb\cf11 edit_GetAssociations}{\v edit_GetAssociations_0}()
\par \pard\plain \s58\li284\sa120 \f5\fs20 Returns a list of file extensions {\b .XXX} with associated default{\b  }{\i coloring schemes.}
\par \pard\plain \s49\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_SetAssociations}{\v edit_SetAssociations_1}(EDIT_ASSLIST {\i AssociationsList})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Associates (or change previously associated) default {\i coloring scheme}{\b  }for any number of file extensions {\b .XXX}.
\par \pard\plain \s49\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_StatusLineShow}{\v edit_StatusLineShow_2}(WINDOW {\i WinHandle}, BOOLEAN {\i HideShow})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Hide/show the Editor window's status line. 
\par \pard\plain \s49\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_CaretShow}{\v edit_CaretShow_2}(WINDOW {\i WinHandle}, BOOLEAN {\i HideShow})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Hide/show the insertion point's position marker.
\par \pard\plain \s49\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_SetTitle}{\v edit_SetTitle_2}(WINDOW {\i WinHandle}, STRING {\i Title})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Determines the string will be displayed in the Editor window's title bar{\i .}
\par \pard\plain \s49\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_Resume}{\v edit_Resume_1}(WINDOW {\i WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Resumes the Editor window's client area updating
\par \pard\plain \s49\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_Suspend}{\v edit_Suspend_1}(WINDOW {\i WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Suspends the Editor window's client area updating
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s40\qj \f5\fs20 {\cs26\super #} Access_to_Entire_Editing_Text}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Access to Entire Editing Text}} {
\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Access to Editing Text}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR  }} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }Access to an Entire Editing Text
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s54\sa240 \f5\fs20 Using these predicates a programmer can access the contents of an edit w
indow, replace them with new string, or append an additional string to the end of the one being edited. All declarations needed for using of these predicates are to be found in the files EDITOR.DOM and EDITOR.PRE. In all of the predicates the argument {
\i WinHandle }is a handle to an Editor window.
\par \pard\plain \s42\keep \f5\fs20 STRING /*{\i EditingString}*/ {\b\uldb\cf11 edit_GetText}{\b\v edit_GetText_1}{\b (}WINDOW{\i  WinHandle}{\b )} - (i)
\par \pard\plain \s58\li284\sa120 \f5\fs20 Returns the string being edited in the selected window.
\par \pard\plain \s42\keep \f5\fs20 STRING /*{\i EditingSubString}*/ {\b\uldb\cf11 edit_GetText}{\b\v edit_GetText_3}{\b (}WINDOW{\i  WinHandle,}UNSIGNED {\i StartPos},UNSIGNED {\i EndPos}{\b )} - (i,i,i)
\par \pard\plain \s58\li284\sa120 \f5\fs20 Returns the substring from the {\i StartPos} till the {\i EndPos }of the string being edited in the selected window.
\par \pard\plain \s42\keep \f5\fs20 {\b\uldb\cf11 edit_PasteStr}{\b\v edit_PasteStr_2}{\b (}WINDOW {\i WinHandle, }STRING {\i NewString}{\b )} - (i,i)
\par \pard\plain \s58\li284\sa120 \f5\fs20 This predicate replaces the string being edited in the {\i WinHandle} editor window with the new string {\i NewString}. Note that this predicate clears the {\b Undo and Redo} buffers!
\par \pard\plain \s44\sa120 \f5\fs20 {\b Note!} On 16 bit platforms these predicates are limited to texts of 64 Kb in length. For handling larger texts you can use two next predicates.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 See Also {\uldb\cf11 examples}{\v Access_to_editing_string_example} in EDITOR.PRO file.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Access_to_editing_string_example}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Access to editing string example}} {
\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Access to editing string example}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }Access to Editing String example
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This example is based on definition of predicate {\b add_str()} that appends a string to the message window contents. See the file MESSAGES.PRO.
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 PREDICATES
\par \pard\plain \s17\li284\keep \f11\fs20 % Adds string to the message window
\par \pard\plain \s16\fi-567\li851 \f11\fs20 add_str(STRING addedStr)
\par add_str1(STRING addedStr,INTEGER oldNOfLines,INTEGER addedNOfLines)
\par del_strings(STRING oldstr,INTEGER tmp,INTEGER del,STRING newstr)
\par \pard\plain \s17\li284\keep \f11\fs20 % count a number of lines in the adding string
\par \pard\plain \s16\fi-567\li851 \f11\fs20 getLinesInStr(STRING addedStr,INTEGER zero,INTEGER addedNOfLines)
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 CLAUSES
\par add_str(Str):-
\par \pard\plain \s17\li284\keep \f11\fs20 edwin(Win),!,
\par L1=edit_GetNumberOfLines(Win),
\par getLinesInStr(Str,0,L2),
\par add_str1(Str,L1,L2).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 add_str1(Str,L1,L2):-
\par \pard\plain \s17\li284\keep \f11\fs20 max_no_lines(Max_no_lines),
\par L=L1+L2,
\par L<=Max_no_lines,!,
\par edwin(WIN),
\par {\b edit_AppendStr}(WIN,Str).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 add_str1(Str,_,L2):-
\par \pard\plain \s17\li284\keep \f11\fs20 max_no_lines(Max_no_lines),
\par L2>=Max_no_lines,
\par edwin(WIN),!,
\par {\b edit_PasteStr}(WIN,Str),
\par edit_FileEnd(WIN).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 add_str1(Str,L1,_):-
\par \pard\plain \s17\li284\keep \f11\fs20 N=L1/2,
\par edwin(WIN),!,
\par OLDSTR={\b edit_GetText}(WIN),
\par % delete N strings form OLDSTR
\par del_strings(OLDSTR,0,N,OLDSTR1),
\par concat(OLDSTR1,Str,NEWSTR),
\par {\b edit_PasteStr}(WIN,NEWSTR),
\par edit_FileEnd(WIN).
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Caret_Positioning_Predicates}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Caret Positioning Predicates }} {\cs26\super K
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Caret Positioning Predicates }} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }Caret Positioning Predicates 
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 All declarations needed for using of these predicates are in the files EDITOR.DOM and EDITOR.PRE. In all predicates argument {\i WinHandle }is a handle of an Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul Caret Absolute Positioning Predicates:
\par }The following predicates operate with the caret position expressed as the number of characters from the beginning of the edited text.
\par \pard\plain \s49\fi-851\li851 \f5\fs20 ULONG /*{\i CaretPosition*/} {\b\uldb\cf11 edit_GetPos}{\b\v edit_GetPos_1}(WINDOW {\i WinHandle}) 
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Returns the current caret position ={\i  CaretPosition}.{\i 
\par }\pard\plain \s49\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_GetPos}{\b\v edit_GetPos_3}(WINDOW {\i WinHandle, }INTEGER {\i Line,} INTEGER {\i Column}) 
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Returns the current caret position as the {\i Line} and {\i Column}.{\i 
\par }\pard\plain \s49\fi-851\li851 \f5\fs20 BOOLEAN {\i /*ResultFlag*/ }{\b\uldb\cf11 edit_GotoPos}{\b\v edit_GotoPos_2}(WINDOW {\i WinHandle, }ULONG {\i CaretPosition})
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Sets current caret position ={\i  CaretPosition. }Returns BOOLEAN value {\i ResultFlag: b_true} on success and {\i b_false} otherwise.
\par \pard\plain \s49\fi-851\li851 \f5\fs20 INTEGER /*{\i LineNumber}*/ {\b\uldb\cf11 edit_GetNumberOfLines}{\b\v edit_GetNumberOfLines_1}(WINDOW {\i WinHandle})
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Returns the number of lines in t{\*\bkmkstart a_editor_API_cur}{\*\bkmkend a_editor_API_cur}he text being edited.
\par \pard\plain \s49\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_GotoLine}{\v edit_GotoLine_2}(WINDOW {\i WinHandle, }INTEGER {\i Line})
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the cursor to the desired line number.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul Caret Relative Moving Predicates:}
\par \pard\plain \s44\sa120 \f5\fs20 The following predicates move the caret to a new position that is relative to its current position.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_Left}{\b\v edit_Left_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret one character to the left.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_Right}{\b\v edit_Right_1}{\b ( }WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret one character to the right.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_Up}{\b\v edit_Up_1}{\b ( }WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret one line Up.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_Down}{\b\v edit_Down_1}{\b ( }WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret one line Down.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_PgUp}{\b\v edit_PgUp_1}{\b ( }WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret one page Up.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_PgDn}{\b\v edit_PgDn_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret one page Down.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_WordLeft}{\b\v edit_WordLeft_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret one word to the left.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_WordRight}{\b\v edit_WordRight_1}{\b ( }WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret one word to the right.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_LineHome}{\b\v edit_LineHome_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret to the beginning of the current line.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_LineEnd}{\b\v edit_LineEnd_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret to the end of the current line.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_FileHome}{\b\v edit_FileHome_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret to the beginning of the text.
\par \pard\plain \s33\qj\keep\tx284\tx2694 \f5\fs20 {\b\uldb\cf11 edit_FileEnd}{\b\v edit_FileEnd_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Moves the caret to the end of the text.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Block_Manipulating_Predicates}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Block Manipulating Predicates}} {\cs26\super 
K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Block Manipulating Predicates}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }Block Manipulating Predicates
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\uldb\cf11 See also}{\b0\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s44\sa120 \f5\fs20 In all predicates the argument {\i WinHandle }is the handle of the{\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{
\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }}} target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul Pasting and Deleting Blocks:}
\par \pard\plain \s34\qj\fi-851\li851 \f5\fs20 BOOLEAN {\i /*ResultFlag*/ }{\b\uldb\cf11 edit_PasteStr}{\b\v edit_PasteStr_3}{\b (} WINDOW{\i  WinHandle, }ULONG{\i  BeginPos,} STRING {\i PasteString} {\b )}
\par \pard\plain \s58\li284\sa120 \f5\fs20 Inserts the string {\i PasteString} at position {\i BeginPos.}
\par \pard\plain \s34\qj\fi-851\li851 \f5\fs20 {\b\uldb\cf11 edit_Delete}{\b\v edit_Delete_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s58\li284\sa120 \f5\fs20 Deletes the selected block {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{
\cs57\fs16 \chatn }}}(if that exists) from the text in {\i WinHandle} Edit window{\i .}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul Block Selection:}
\par \pard\plain \s49\fi-851\li851 \f5\fs20 BOOLEAN {\i /*ResultFlag*/ }{\b\uldb\cf11 edit_SetSelection}{\b\v edit_SetSelection_3}{\b (} WINDOW {\i WinHandle,} ULONG {\i PosBegin,} ULONG {\i PosEnd}{\b )}
\par \pard\plain \s58\li284\sa120 \f5\fs20 Selects the text block that extends from start position {\i PosBegin} to end position{\i  PosEnd}.
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_GetSelection}{\b\v edit_GetSelection_3}{\b (} WINDOW {\i WinHandle,} ULONG {\i PosBegin,} ULONG {\i PosEnd}{\b )} 
\par \pard\plain \s58\li284\sa120 \f5\fs20 Returns the location of the selected block. Start position{\i  PosBegin,} end position{\i  PosEnd.}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_SelectCurLine}{\v edit_SelectCurLine_1}{\b (}WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s58\li284\sa120 \f5\fs20 Selects the current line.
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 BOOLEAN {\i /*ResultFlag*/} {\b\uldb\cf11 edit_SelectWord}{\b\v edit_SelectWord_1}{\b (}WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s58\li284\sa120 \f5\fs20 Attempts to select a word by simulating a mouse button double click at the current caret position.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul Case Changing:
\par }\pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_ReverseCase}{\v edit_ReverseCase_1}(WINDOW {\i WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Changes all uppercase letters to lowercase letters and all lowercase letters to uppercase letters in the selection.
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_UpperCase}{\v edit_UpperCase_1}(WINDOW {\i WinHandle}) 
\par \pard\plain \s58\li284\sa120 \f5\fs20 Changes selected text to all uppercase letters.
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_LowerCase}{\v edit_LowerCase_1}(WINDOW {\i WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Changes selected text to all lowercase letters.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul See also: 
\par }\pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Cut/1}{\b\v edit_Cut_1}, {\b\uldb\cf11 edit_Copy/1}{\b\v edit_Copy_1}, {\b\uldb\cf11 edit_PasteStr/2}{\b\v edit_PasteStr_2}, {\b\uldb\cf11 edit_Paste/1}{\b\v edit_Paste_1}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 All declarations needed for using these predicates are in the files EDITOR.DOM and EDITOR.PRE.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Editor_Deleting_and_Inserting_Text_Predicates}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $}
 Editor Deleting and Inserting Text Predicates}} {\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Editor Deleting and Inserting Text Predicates}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }Deleting and Inserting Text Predicates
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\uldb\cf11 See also}{\b0\v\fs20 Block_Manipulating_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 In all predicates argument {\i WinHandle }is a handle of target Editor window.
\par \pard\plain \s33\qj\sb120\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_Del}{\b\v edit_Del_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Simulates a 'Delete' key press
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_Backspace}{\b\v edit_Backspace_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Simulates a 'Backspace' key press
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_Char}{\b\v edit_Char_2}{\b (} WINDOW {\i WinHandle,} CHAR {\i CharPressed}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Simulates the pressing of the viewable key passed in the argument {\i CharPressed}
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_Enter}{\b\v edit_Enter_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Simulates the pressing of the 'Enter' key
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_DelLeftWord}{\b\v edit_DelLeftWord_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This predicate deletes the word to the left of caret position. Simulates the 'Ctrl-L' key combination.
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_DelRightWord}{\b\v edit_DelRightWord_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This predicate deletes the word to the right of caret position. Simulates the 'Ctrl-R' key combination.
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_DeleteLine}{\b\v edit_DeleteLine_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 Deletes the current line. Simulates the 'Ctrl-Y' key combination.
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_DelToStartOfLine}{\b\v edit_DelToStartOfLine_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This predicate deletes text extending from the beginning of the current line to the caret position. Simulates the 'Ctrl-S' key combination.
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b\uldb\cf11 edit_DelToEndOfLine}{\b\v edit_DelToEndOfLine_1}{\b (} WINDOW {\i WinHandle}{\b )}
\par \pard\plain \s41\qj\li284\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This predicate deletes text extending from the caret position to the end of the current line (not to the end of paragraph). Simulates the 'Ctrl-E' key combination.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Undo_Redo_Predicates}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Undo and Redo Predicates}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} Undo and Redo Predicates}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }Undo and Redo Predicates
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\uldb\cf11 See also}{\b0\v Edit_Menu_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 In all predicates argument {\i WinHandle }is a handle of target Editor window.
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_PossibleUnDoReDo}{\v edit_PossibleUnDoReDo_3}(WINDOW {\i WinHandle,} BOOLEAN {\i Undo,} BOOLEAN {\i Redo})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Checks the state of the Undo and Redo buffers of {\i WinHandle }Editor window. Returns:
\par \pard\plain \s75\fi-851\li1135\sa120 \f5\fs20\lang2057 {\i Undo = \tab b_true }if it is possible to execute an Undo command
\par {\i Redo} =\tab {\i b_true }if is possible to execute a Redo command. 
\par \tab Otherwise the output parameters return {\i b_false.} 
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_Undo}{\b\v edit_Undo_1}(WINDOW{\i  WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Reverses the last editing action in {\i WinHandle }Editor window.
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_Redo}{\b\v edit_Redo_1}(WINDOW{\i  WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Reverses the changes that were made to a document by the last successful {\b Undo} action in the {\i WinHandle }Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Comments:}
\par \pard\plain \s44\sa120 \f5\fs20 Predicates {\b edit_Undo} and {\b edit_Redo} have corresponding internal Editor functions; that can be invoked when an Editor receives events {\i e_menu(1060,_)} or {\i e_menu(1061,_).}
\par These functions are invoked if the {\i EventHandler }callback function returns the {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }
}{\fldrslt }}{\cs57\fs16 \chatn } {\ul the?} zero value}}zero value (or fails) when it handles these {\i e_menu(...,_)} events. 
\par If {\i EventHandler} returns a non-zero the editor handler does not elaborate these events.{\i 
\par }{\b See also:
\par }Discussions and examples in {\uldb\cf11 Edit Menu Predicates}{\v Edit_Menu_Predicates}
\par and {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Edit_Menu_Predicates}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Edit Menu Predicates}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} Edit Menu Predicates}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }Edit Menu Predicates
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 In all predicates the argument {\i WinHandle }is the handle of the target {\b Editor} window.
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\ul Undo/Redo commands:
\par }{\b\uldb\cf11 edit_Undo}{\b\v edit_Undo_1}(WINDOW{\i  WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Reverses the last editing action in {\i WinHandle }Editor window.
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_Redo}{\b\v edit_Redo_1}(WINDOW{\i  WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Reverses the changes made to a document by the last successful {\uldb\cf11 Undo}{\v Undo_Redo_features} action in the {\i WinHandle }Editor window.
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\ul Clipboard commands:
\par }{\b\uldb\cf11 edit_Cut}{\b\v edit_Cut_1}(WINDOW{\i  WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Removes the selected block from an edit window and moves it to{\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"
{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }}} the {\uldb\cf11 Clipboard}{\v Clipboard_commands} buffer.
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_Copy}{\b\v edit_Copy_1}(WINDOW{\i  WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Copies the selected block to the {\b Clipboard.} 
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_Paste}{\b\v edit_Paste_1}(WINDOW{\i  WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Inserts a copy of the {\b Clipboard} contents at the insertion point (caret position{\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE 
\\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }}}).
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_Delete}{\b\v edit_Delete_1}(WINDOW{\i  WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Deletes the selected block {\i without} copying it to the {\b Clipboard}. 
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\ul Invoking dialogues:}{\b 
\par }{\b\uldb\cf11 edit_OptionsDlg()}{\v edit_OptionsDlg_0}
\par \pard\plain \s58\li284\sa120 \f5\fs20 Activates the {\uldb\cf11 Options}{\v Editor_Options} dialog that allows to modify the Tabulation{\i  size} , Indent and Insert mode, and Programming Language Elements Syntax Highlighting Options. 
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_SearchDlg}{\b\v edit_SearchDlg_1}(WINDOW{\i  WinHandle}) - (i)
\par \pard\plain \s58\li284\sa120 \f5\fs20 Invokes the {\uldb\cf11 Find Text}{\v Find_Text} dialog.
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_SearchAgain}{\b\v edit_SearchAgain_1}(WINDOW{\i  WinHandle}) - (i)
\par \pard\plain \s58\li284\sa120 \f5\fs20 Finds and selects the next occurrence of the text specified in a previously activated {\b Find Text} dialog box
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_ReplaceDlg}{\b\v edit_ReplaceDlg_1}(WINDOW{\i  WinHandle}) - (i)
\par \pard\plain \s58\li284\sa120 \f5\fs20 Invokes the {\uldb\cf11 Replace Text}{\v Replace_Text} dialog box that allows the user to enter the search and replace strings.
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_GotoLineDlg}{\b\v edit_GotoLineDlg_1}(WINDOW{\i  WinHandle}) - (i)
\par \pard\plain \s58\li284\sa120 \f5\fs20 Invokes the {\uldb\cf11 Go To Line Number}{\v Go_To_Line_Number} dialog box.
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_GotoPosDlg}{\v edit_GotoPosDlg_1}(WINDOW{\i  WinHandle}) - (i)
\par \pard\plain \s58\li284\sa120 \f5\fs20 Invokes the {\uldb\cf11 Go to Position}{\v Go_to_Position_dialog_box} dialog box.
\par \pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b\uldb\cf11 edit_SetFontDlg}{\b\v edit_SetFontDlg_1}(WINDOW{\i  WinHandle})
\par \pard\plain \s58\li284\sa120 \f5\fs20 Invokes the {\b Font }dialog box so that the user can select a {\i font}, {\i font style} and {\i font size}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul Comments:}{\ul 
\par }\pard\plain \s44\sa120 \f5\fs20 Predicates from this group simulate standard {\uldb\cf11 Edit Menu functions}{\v Edit_submenu} (Undo, Copy, Search, etc.)
\par The primary aim of these predicates is to provide programmers with a simple and direct method for invoking Editor actions from menus.
\par Because all of these predicates have the corresponding internal Editor functions, programmers can use two methods of simulating the action of Menu Items:
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7\tab }Directly call Edit Menu predicates in the clauses for handling {\i e_menu(Menu_Item,...)} events correspondent to Edit Menu Items (in the Editor {
\i\uldb\cf11 EventHandler}{\v edit_Create}{\i  }callback predicate), as we do this in the {\uldb\cf11 example}{\v Edit_Menu_Predicates_Usage_Example}.
\par {\f1 \'b7\tab }Cause the editor handler to accomplish the actions corresponding to Edit Menu Items by executing the internal routines.
\par \pard\plain \s44\sa120 \f5\fs20 {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }
Is all this need to be deleted???}}In order to cause the execution of internal Editor menu functions one must:
\par \pard\plain \s49\fi-426\li426\tx284 \f5\fs20 \tab - initiate sending to an Editor window of {\i e_menu(Menu_Item,_) }events with the next {\i Menu_Item} values:
\par \pard \s49\fi-709\li1276 1060 - undo;
\par 1061 - redo;
\par 1063 - cut to the clipboard;
\par 1064 - copy to the clipboard;
\par 1065 - paste from the clipboard;
\par 1066 - clear (delete block without copy to the clipboard );
\par 1077 - search;
\par 1078 - replace;
\par 1079 - search again;
\par 1081 - go to line;
\par 1082 - go to position;
\par 1085 - set editor font.
\par \pard \s49\fi-516\li630\tx284 \tab - make the Editor {\b\i EventHandler}{\i  }callback function fail or return zero for the {\i e_menu(Menu_Item,...)} events corresponding to these Men
u Items, this causes Editor event handler to execute the internal function corresponding to the received {\i e_menu(Menu_Item,_)} event.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Edit_Menu_Predicates_Usage_Example}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $}
 Edit Menu Predicates Usage Example}} {\cs26\b0\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Edit Menu Predicates Usage Example}} {\cs26\b0\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }Edit Menu Predicates Usage Example{\b0 
\par }\pard\plain \s44\sa120 \f5\fs20 This example shows how to use {\b Edit Menu }predicates to maintain a local dynamically generated menu in an {\b Editor Window}. (See: Visual Prolog MESSAGES package, file MESSAGES.PRO).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 . . . .
\par edit_MessHandler(WIN,e_MouseDown(PNT,_,1),b_true):-!,
\par \pard\plain \s17\li284\keep \f11\fs20 ParentWin=win_GetParent(WIN),
\par win_SetFocus(ParentWin),
\par mess_possible_copy(WIN,COPY_ENABLED),
\par \pard \s17\li284\sb120\keep % Create dynamic menu directly using
\par \pard \s17\li284\keep % Menu Item constants: {\b 1000, 1001, 1002}{\cs57\v\f5\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{
\cs57\fs16 \chatn }Is all this need to be deleted???}}
\par MENU=dyn_menu([txt({\b 1000},"&{\b Copy}",0,COPY_ENABLED,b_false,[]),
\par \pard\plain \s35\li1985\keep \f11\fs20 txt({\b 1001},"&{\b Search}...",0,b_true,b_false,[]),
\par txt({\b 1002},"{\b Search }&{\b again}",0,b_true,b_false,[]),
\par ]),
\par \pard\plain \s17\li284\keep \f11\fs20 menu_PopUp(Win,MENU,PNT,align_Left).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 % Handling menu item "{\b Copy"}
\par \pard \s39\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 edit_MessHandler(_Win,{\b e_Menu(1000},_),1):-!,
\par \pard\plain \s17\li284\keep \f11\fs20 {\b edit_Copy}(_Win).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 % Handling menu item "{\b Search"}
\par \pard \s39\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 edit_MessHandler(_Win,{\b e_Menu(1001},_),1):-!, 
\par \pard\plain \s17\li284\keep \f11\fs20 {\b edit_SearchDlg}(_Win).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 % Handling menu item "{\b Search again"}
\par \pard \s39\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 edit_MessHandler(_Win,{\b e_Menu(1002},_),1):-!, 
\par \pard\plain \s17\li284\keep \f11\fs20 {\b edit_SearchAgain}(_Win).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 . . . .
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Create_Predicates}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Create Predicates}} {\cs26\super !{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }edit_Create...()
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\uldb\cf11 Editor handling predicates}{\v Editor_hooks_predicates}
\par {\uldb\cf11 edit_Create/12}{\v edit_Create}
\par {\uldb\cf11 edit_CreateWrap/13}{\v edit_CreateWrap}
\par {\uldb\cf11 edit_CreateHyper/16}{\v edit_CreateHyper}
\par {\uldb\cf11 edit_CreateSubClass/9}{\v edit_CreateSubClass}
\par {\uldb\cf11 Editor for Users}{\v Visual_Prolog_Text_Editor_for_Users}
\par {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Editor_Predicates_Alphabetically}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} VPI Editor Predicates Alphabetically}} {
\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Editor Predicates Alphabetically}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super {\*\bkmkstart Predicates_Alphabetically}
{\*\bkmkend Predicates_Alphabetically}!{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }VPI Editor Predicates Alphabetically
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s43\tx3402 \f5\fs20 {\uldb\cf11 {\*\bkmkstart a_Alphabetically}{\*\bkmkend a_Alphabetically}edit_Backspace/1}{\v edit_Backspace_1} \tab {\uldb\cf11 edit_CaretShow/2}{\v edit_CaretShow_2}
\par {\uldb\cf11 edit_Char/2}{\v edit_Char_2} \tab {\uldb\cf11 edit_Copy/1}{\v edit_Copy_1} 
\par {\uldb\cf11 edit_Create/12}{\v edit_Create} \tab {\uldb\cf11 edit_CreateHyper/13}{\v edit_CreateHyper} 
\par {\uldb\cf11 edit_CreateHyperField/1}{\v edit_CreateHyperField_1}\tab {\uldb\cf11 edit_DeleteHyperField/1}{\v edit_DeleteHyperField_1}
\par {\uldb\cf11 edit_CreateSubClass/9}{\v edit_CreateSubClass}
\par {\uldb\cf11 edit_CreateWrap/13}{\v edit_CreateWrap} \tab {\uldb\cf11 edit_Cut/1}{\v edit_Cut_1} 
\par {\uldb\cf11 edit_Del/1}{\v edit_Del_1} \tab {\uldb\cf11 edit_Delete/1}{\v edit_Delete_1} 
\par {\uldb\cf11 edit_DeleteLine/1}{\v edit_DeleteLine_1} \tab 
\par {\uldb\cf11 edit_DelLeftWord/1}{\v edit_DelLeftWord_1} \tab {\uldb\cf11 edit_DelRightWord/1}{\v edit_DelRightWord_1} 
\par {\uldb\cf11 edit_DelToEndOfLine/1}{\v edit_DelToEndOfLine_1} \tab {\uldb\cf11 edit_DelToStartOfLine/1}{\v edit_DelToStartOfLine_1} 
\par {\uldb\cf11 edit_Down/1}{\v edit_Down_1} \tab {\uldb\cf11 edit_Enter/1}{\v edit_Enter_1} 
\par {\uldb\cf11 edit_FileEnd/1}{\v edit_FileEnd_1} \tab {\uldb\cf11 edit_FileHome/1}{\v edit_FileHome_1} 
\par {\uldb\cf11 edit_GetAssociations/0}{\v edit_GetAssociations_0} \tab {\uldb\cf11 edit_GetPos/1}{\v edit_GetPos_1} 
\par {\uldb\cf11 edit_GetPos/3}{\v edit_GetPos_3} 
\par {\uldb\cf11 edit_GetIndent/1}{\v edit_GetIndent_1} \tab {\uldb\cf11 edit_GetInsert/1}{\v edit_GetInsert_1} 
\par {\uldb\cf11 edit_GetNumberOfLines/1}{\v edit_GetNumberOfLines_1} \tab {\uldb\cf11 edit_GetSelection/3}{\v edit_GetSelection_3} 
\par {\uldb\cf11 edit_GetTabSize/1}{\v edit_GetTabSize_1} \tab {\uldb\cf11 edit_GetText/1}{\v edit_GetText_1} 
\par {\uldb\cf11 edit_GetText/3}{\v edit_GetText_3} 
\par {\uldb\cf11 edit_GotoLine/2}{\v edit_GotoLine_2} \tab {\uldb\cf11 edit_GotoLineDlg/1}{\v edit_GotoLineDlg_1} 
\par {\uldb\cf11 edit_GotoPos/2}{\v edit_GotoPos_2} \tab {\uldb\cf11 edit_GotoPosDlg/1}{\v edit_GotoPosDlg_1} 
\par {\uldb\cf11 edit_Left/1}{\v edit_Left_1} \tab {\uldb\cf11 edit_LineEnd/1}{\v edit_LineEnd_1} 
\par {\uldb\cf11 edit_LineHome/1}{\v edit_LineHome_1} \tab {\uldb\cf11 edit_LowerCase/1}{\v edit_LowerCase_1} 
\par {\uldb\cf11 edit_GetOptions/1}{\v edit_GetOptions} \tab {\uldb\cf11 edit_GotoLine/2}{\v edit_GotoLine_2} 
\par {\uldb\cf11 edit_OptionsDlg/0}{\v edit_OptionsDlg_0} 
\par {\uldb\cf11 edit_Paste/1}{\v edit_Paste_1} \tab {\uldb\cf11 edit_PasteStr/2}{\v edit_PasteStr_2 }
\par {\uldb\cf11 edit_PasteStr/3}{\v edit_PasteStr_3} 
\par {\uldb\cf11 edit_PgDn/1}{\v edit_PgDn_1} \tab {\uldb\cf11 edit_PgUp/1}{\v edit_PgUp_1} 
\par {\uldb\cf11 edit_PossibleUnDoReDo/3}{\v edit_PossibleUnDoReDo_3} \tab {\uldb\cf11 edit_Redo/1}{\v edit_Redo_1} 
\par {\uldb\cf11 edit_ReplaceDlg/1}{\v edit_ReplaceDlg_1} \tab {\uldb\cf11 edit_Resume/1}{\v edit_Resume_1} 
\par {\uldb\cf11 edit_ReverseCase/1}{\v edit_ReverseCase_1}\tab 
\par {\uldb\cf11 edit_Right/1}{\v edit_Right_1} \tab 
\par {\uldb\cf11 edit_SetOptions/1}{\v edit_SetOptions} \tab {\uldb\cf11 edit_SearchAgain/1}{\v edit_SearchAgain_1} 
\par {\uldb\cf11 edit_SearchDlg/1}{\v edit_SearchDlg_1} \tab {\uldb\cf11 edit_SelectCurLine/1}{\v edit_SelectCurLine_1}
\par {\uldb\cf11 edit_SelectWord/1}{\v edit_SelectWord_1} 
\par {\uldb\cf11 edit_SetAssociations/1}{\v edit_SetAssociations_1} 
\par {\uldb\cf11 edit_SetFontDlg/1}{\v edit_SetFontDlg_1} \tab {\uldb\cf11 edit_SetIndent/2}{\v edit_SetIndent_2} 
\par {\uldb\cf11 edit_SetInsert/2}{\v edit_SetInsert_2}\tab {\uldb\cf11 edit_SetColoring/2}{\v edit_SetColoring_2} 
\par {\uldb\cf11 edit_SetSelection/3}{\v edit_SetSelection_3} \tab {\uldb\cf11 edit_SetTabSize/2}{\v edit_SetTabSize_2} 
\par {\uldb\cf11 edit_SetTitle/2}{\v edit_SetTitle_2} \tab {\uldb\cf11 edit_StatusLineShow/2}{\v edit_StatusLineShow_2} 
\par {\uldb\cf11 edit_Suspend/1}{\v edit_Suspend_1} 
\par {\uldb\cf11 edit_Undo/1}{\v edit_Undo_1} \tab {\uldb\cf11 edit_Up/1}{\v edit_Up_1} 
\par {\uldb\cf11 edit_UpperCase/1}{\v edit_UpperCase_1} 
\par {\uldb\cf11 edit_WordLeft/1}{\v edit_WordLeft_1} \tab {\uldb\cf11 edit_WordRight/1}{\v edit_WordRight_1} 
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super {\*\bkmkstart Alphabetically}{\*\bkmkend Alphabetically}#{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_AppendStr}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $}
 edit_AppendStr/2}} {\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} edit_AppendStr}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Access_to_Entire_Editing_Text')")} }{\*\bkmkstart predicates}{\*\bkmkend predicates}edit_AppendStr/2 
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_AppendStr(}WINDOW{\i  WinHandle,} STRING {\i AddingStr})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This function appends the string {\i AddingStr} to the contents of the Edit window {\i WinHandle}, without closing the Edit window. Argument {\i WinHandle }is the handle of the target Editor window.
\par \pard\plain \s44\sa120 \f5\fs20 All declarations needed for using of this predicate are in the files EDITOR.DOM and EDITOR.PRE.
\par {\b\ul Attention!} This function does not support {\b Undo} operation! The primary use of this function is in message windows and other cases where  text is displayed but {\i cannot} be edited. We do not recommend its use in editor windows 
where the user can change the text to be edited.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetText_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetText/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_GetText}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Access_to_Entire_Editing_Text')")} }
edit_GetText/1
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 STRING /*{\i EditingString}*/ {\b edit_GetText(}WINDOW{\i  WinHandle}{\b )} 
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This function makes a copy of the contents of window {\i WinHandle} and returns it in {\i EditingString}.
\par {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 All declarations needed for using of this predicate are in the files EDITOR.DOM and EDITOR.PRE.
\par {\b Fail
\par }Fails if the text being edited is too long to be represented as STRING data. Remember that on 16 bit platforms STRING data is restricted to a lenght of 64K characters. 
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetText_3}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetText/3}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_GetText}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Access_to_Entire_Editing_Text')")} }
edit_GetText/3
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 STRING /*{\i EditingSubString}*/ {\b edit_GetText(}WINDOW{\i  WinHandle, }UNSIGNED {\i StartPos,} UNSIGNED {\i EndPos}{\b )} 
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This function makes a copy of the substring from the {\i StartPos} to the {\i EndPos }of the string being edited in the selected window and returns it in {\i EditingSubString}.
\par {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 All declarations needed for using of this predicate are in the files EDITOR.DOM and EDITOR.PRE.
\par {\b Fail
\par }Fails if the text being edited is too long to be represented as STRING data. Remember that on 16 bit platforms STRING data is restricted to a lenght of 64K characters. 
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_PasteStr_2}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_PasteStr/2}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_PasteStr}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Access_to_Entire_Editing_Text')")} }edit_PasteStr/2
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_PasteStr(}WINDOW {\i WinHandle, }STRING {\i NewString}{\b )} 
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This predicate replaces the string being edited in the window {\i WinHandle} with the string {\i NewString,} without closing the editor window.
\par {\b {\*\bkmkstart remark}{\*\bkmkend remark}Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 Remember that this predicate clears the {\b Undo/Redo} buffers for the editor window {\i WinHandle}! {\b 
\par }All declarations needed for using of this predicate are in the files EDITOR.DOM and EDITOR.PRE.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 See also {\uldb\cf11 examples}{\v Access_to_editing_string_example} in EDITOR.PRO file.
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetOptions}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetOptions/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_GetOptions}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }
edit_GetOptions/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_GetOptions(}ILIST {\i OptionsList}{\b )} 
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (o)
\par \pard\plain \s44\sa120 \f5\fs20 This predicate retrieves editor options. Its {\b output} argument {\i OptionsList }returns the current list of editor options.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 Domain ILIST is declared as integer list ILIST = INTEGER*
\par The list of editor options {\i OptionsList} will be a list of integers with the following structure:
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 [ .PRO(.DOM;.PRE, .CON, .INC) file extensions coloring scheme,
\par   .RC files colors,
\par   .DEF files colors,
\par   .C(.H) files colors,
\par    other files colors,
\par \pard \s33\qj\keep\tx284\tx2835    tabulation size,\tab % 0-9 blank characters
\par    Insert/OverWrite mode,\tab % 1 - Insert mode, 0 - Overwrite mode
\par    Indent/NoIndent mode\tab % 1 - Indent mode, 0 - NoIndent mode
\par \pard \s33\qj\keep\tx284\tx3402 ]
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Where each integer sublist for every file extension {\b .XXX} consists from three integer sublists:
\par \pard\plain \s71\fi-284\li284\sa60\tx284 \f5\fs20 {\f1 \'b7\tab }sublist of settings of {\i foreground colors} for Programming Language Syntax Elements;
\par {\f1 \'b7\tab }sublist of settings of {\i background colors} for Programming Language Syntax Elements;
\par {\f1 \'b7\tab }sublist of settings of {\i font} {\i attributes} for Programming Language Syntax Elements.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 In each sublist the integer values of Programming Language Syntax Elements parameters have the order:
\par \pard\plain \s72\fi-2126\li2410\sa60\tx567\tx2268\tx2410 \f5\fs20 {\f1 \'b7\tab }{\b Symbols}\tab -\tab Commas, brackets, etc.
\par {\f1 \'b7\tab }{\b Atom}\tab -\tab Is any identifier that starts with a lower case letter followed by any combination of zero or more letters, digits, and underscores. It can be either a functor name,{\cs57\v\fs16  }or a {\uldb\cf11 symbol}{\v 
symbol_glossary} / {\uldb\cf11 string}{\v string_glossary} type constant that is not surrounded by quotation marks, or a Visual Prolog compiler directive.
\par {\f1 \'b7\tab }{\b Variable}\tab -\tab A Visual Prolog variable.
\par {\f1 \'b7\tab }{\b String}\tab -\tab A {\uldb\cf11 symbol}{\v symbol_glossary} or {\uldb\cf11 string}{\v string_glossary} type constant surrounded by quotation marks.
\par {\f1 \'b7\tab }{\b Illegal Character}\tab -\tab An illegal (for the language) character or a set of characters not identified as legal syntax construction
\par {\f1 \'b7\tab }{\b Character}\tab -\tab An arbitrary character surrounded by single quotation marks: 'a'. (Character constant).
\par {\f1 \'b7\tab }{\b Hex}\tab -\tab A hexadecimal integer number.
\par {\f1 \'b7\tab }{\b Decimal}\tab -\tab A decimal integer number.
\par {\f1 \'b7\tab }{\b Float}\tab -\tab A floating-point number
\par {\f1 \'b7\tab }{\b Octal}\tab -\tab An octal integer number.
\par {\f1 \'b7\tab }{\b Key Words}\tab -\tab Key words reserved in the language
\par {\f1 \'b7\tab }{\b Comments}\tab -\tab Comments
\par {\f1 \'b7\tab }{\b Whitespace}\tab -\tab Spaces and tabulations
\par {\f1 \'b7\tab }{\b Hyper Text}\tab -\tab A jump or popup hyperfield in {\uldb\cf11 hypertext}{\v Hypertext_fundamentals} editor
\par \pard\plain \s46\sb120\sa120 \f5\fs20 And the coding of {\i foreground} / {\i background }colors is:
\par \pard\plain \s61\li284 \f5\fs20 0\tab - color_Red;
\par 1\tab - color_Green;
\par 2\tab - color_Blue;
\par 3\tab - color_Cyan;
\par 4\tab - color_Magenta;
\par 5\tab - color_Yellow;
\par 6\tab - color_Black;
\par 7\tab - color_Gray;
\par 8\tab - color_White;
\par other\tab - color_Black
\par \pard\plain \s46\sb120\sa120 \f5\fs20 and {\i font} {\i attributes} are represented by:
\par \pard\plain \s61\li284 \f5\fs20 0\tab - Normal;
\par 1\tab - Bold;
\par 2\tab - Italic.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SetOptions}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SetOptions/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_SetOptions}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }
edit_SetOptions/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_SetOptions(}ILIST{\i  OptionsList}{\b )} 
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern\tab }(i)
\par \pard\plain \s44\sa120 \f5\fs20 This predicate sets editor options. Its {\ul input} argument {\i OptionsList} must contain a list of new editor options.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 Domain ILIST is declared as integer list ILIST = INTEGER*
\par The list of editor options {\i OptionsList} must be a list of integers with the following structure:
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 [ .PRO(.DOM;.PRE, .CON, .INC) file extensions coloring scheme,
\par   .RC files colors,
\par   .DEF files colors,
\par   .C(.H) files colors,
\par    other files colors,
\par \pard \s33\qj\keep\tx284\tx2835    tabulation size,
\par    Insert/OverWrite mode,\tab % 1 - Insert mode, 0 - Overwrite mode
\par    Indent/NoIndent mode\tab % 1 - Indent mode, 0 - NoIndent mode
\par \pard \s33\qj\keep\tx284\tx3402 ]
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Where each sublist for every file extension {\b .XXX} consists from three integer sublists:
\par \pard\plain \s49\fi-283\li567\tx567 \f5\fs20 - \tab sublist of settings of {\i foreground colors} for Programming Language Syntax Elements;
\par - \tab sublist of settings of {\i background colors} for Programming Language Syntax Elements;
\par - \tab sublist of settings of {\i font} {\i attributes} for Programming Language Syntax Elements.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Where in each integer sublist the integer values of Programming Language Syntax Elements parameters have the next order:
\par \pard\plain \s72\fi-2126\li2410\sa60\tx567\tx2268\tx2410 \f5\fs20 {\f1 \'b7\tab }{\b Symbols}\tab -\tab Commas, brackets, etc.
\par {\f1 \'b7\tab }{\b Atom}\tab -\tab Is any identifier that starts with a lower case letter followed by any combination of zero or more letters, digits, and underscores. It can be either a functor name,{\cs57\v\fs16  }or a {\uldb\cf11 symbol}{\v 
symbol_glossary} / {\uldb\cf11 string}{\v string_glossary} type constant that is not surrounded by quotation marks, or a Visual Prolog compiler directive.
\par {\f1 \'b7\tab }{\b Variable}\tab -\tab A Visual Prolog variable.
\par {\f1 \'b7\tab }{\b String}\tab -\tab A {\uldb\cf11 symbol}{\v symbol_glossary} or {\uldb\cf11 string}{\v string_glossary} type constant surrounded by quotation marks.
\par {\f1 \'b7\tab }{\b Illegal Character}\tab -\tab An illegal (for the language) character or a set of characters not identified as legal syntax construction
\par {\f1 \'b7\tab }{\b Character}\tab -\tab An arbitrary character surrounded by single quotation marks: 'a'. (Character constant).
\par {\f1 \'b7\tab }{\b Hex}\tab -\tab A hexadecimal integer number.
\par {\f1 \'b7\tab }{\b Decimal}\tab -\tab A decimal integer number.
\par {\f1 \'b7\tab }{\b Float}\tab -\tab A floating-point number
\par {\f1 \'b7\tab }{\b Octal}\tab -\tab An octal integer number.
\par {\f1 \'b7\tab }{\b Key Words}\tab -\tab Key words reserved in the language
\par {\f1 \'b7\tab }{\b Comments}\tab -\tab Comments
\par {\f1 \'b7\tab }{\b Whitespace}\tab -\tab Spaces and tabulations
\par {\f1 \'b7\tab }{\b Hyper Text}\tab -\tab A jump or popup hyperfield in {\uldb\cf11 hypertext}{\v Hypertext_fundamentals} editor
\par \pard\plain \s46\sb120\sa120 \f5\fs20 And the coding of {\i foreground} / {\i background }colors is:
\par \pard\plain \s61\li284 \f5\fs20 0\tab - color_Red;
\par 1\tab - color_Green;
\par 2\tab - color_Blue;
\par 3\tab - color_Cyan;
\par 4\tab - color_Magenta;
\par 5\tab - color_Yellow;
\par 6\tab - color_Black;
\par 7\tab - color_Gray;
\par 8\tab - color_White;
\par other\tab - color_Black
\par \pard\plain \s46\sb120\sa120 \f5\fs20 and the {\i font} {\i attributes} settings are:
\par \pard\plain \s61\li284 \f5\fs20 0\tab - Normal;
\par 1\tab - Bold;
\par 2\tab - Italic.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_OptionsDlg_0}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_OptionsDlg/0}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_OptionsDlg}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }
edit_OptionsDlg/0
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_OptionsDlg()}
\par \pard\plain \s44\sa120 \f5\fs20 Calls the editor {\uldb\cf11 Options}{\v Editor_Options} dialog box, which allows the user to interactively modify the {\i Tabulation size}, {\i Indent/Noindent} mode, {\i Insert/Overwrite} mode and {\i 
Programming Language Elements Syntax Highlighting Options}. Any changes take place immediately and apply to all {\b Editor windows}.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SetIndent_2}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SetIndent/2}} {\cs26\b0\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_SetIndent}} {\cs26\b0\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }edit_SetIndent/2{\b0 
\par }\pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_SetIndent(} WINDOW {\i WinHandle, }BOOLEAN {\i OnOff}{\b )
\par }\pard \s47\fi-1701\li1701\sa120 {\b Flow pattern\tab }(i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Sets the state of {\i Indent/Noinden} mode.
\par {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 {\i WinHandle }is the handle of a target {\b Editor window}.
\par If {\i Indent}{\b  }mode is ON and the {\b Enter} key is pressed the cursor is placed on the next line in the same column as the first non white-space character on the previous line. 
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetIndent_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetIndent/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_GetIndent}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }
edit_GetIndent/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 BOOLEAN {\i /*ResultFlag*/ }{\b edit_GetIndent(}WINDOW {\i WinHandle}{\b )
\par }\pard \s47\fi-1701\li1701\sa120 {\b Flow pattern\tab }(i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This function returns BOOLEAN value {\i b_true}: if indentation mode is {\i on}, and {\i b_false} - if indentation mode is {\i off }({\i Noinden}{\b  }mode).
\par {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 If the {\i Indent/Noinden}{\b  }mode is ON and the {\b Enter} key is pressed the cursor is placed on the next line in the same column as the first non white-space character on the previous line. 
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SetInsert_2}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SetInsert/2}} {\cs26\b0\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_SetInsert}} {\cs26\b0\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }edit_SetInsert/2{\b0 
\par }\pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also
\par }{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_SetInsert(} WINDOW {\i WinHandle, }BOOLEAN {\i OnOff}{\b )
\par }\pard \s47\fi-1701\li1701\sa120 {\b Flow pattern\tab }(i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Sets the state of an {\i Insert/Overwrite} mode
\par {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 {\i WinHandle }is the handle of a target {\b Editor window}.
\par The text which you type is inserted if the {\i Insert} mode is {\i on.} If {\i Insert} mode is {\i off }({\i Overwrite} mode) then the text entered overwrites existing text. 
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetInsert_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetInsert/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_GetInsert}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }
edit_GetInsert/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 BOOLEAN {\i /*ModeState*/ }{\b edit_GetInsert(}WINDOW {\i WinHandle}{\b )
\par }\pard \s47\fi-1701\li1701\sa120 {\b Flow pattern\tab }(i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Returns the insert mode state {\i ModeState}.
\par This function returns BOOLEAN value {\i b_true}: if insert mode is ON, and {\i b_false} - if insert mode is OFF{\b  }({\i Overwrite} mode).
\par \pard\plain \s44\sa120 \f5\fs20 When you position the insertion point in text and start typing, the VDE editor moves an existing text to the right to accommodate the inserted text, {\ul if the }{\i\ul Insert mode}{\ul  is ON}
. Otherwise it overwrites (replace) existing characters one at a time as you type. {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }
}{\fldrslt }}{\cs57\fs16 \chatn }}}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SetTabSize_2}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SetTabSize/2}} {\cs26\b0\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_SetTabSize}} {\cs26\b0\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }edit_SetTabSize/2{\b0 
\par }\pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_SetTabSize(}WINDOW{\i  WinHandle,} INTEGER {\i TabSize}{\b )}
\par {\b Flow pattern}\tab (i,i){\b 
\par }\pard\plain \s44\sa120 \f5\fs20 Sets the tabulation size in blank spaces equal to {\i TabSize} argument value (but no more then 9){\i . WinHandle }is a handle of target {\b Editor window}.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetTabSize_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetTabSize/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_GetTabSize}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }
edit_GetTabSize/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 INTEGER /*{\i TabSize}*/ {\b edit_GetTabSize()
\par }\pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab None
\par \pard\plain \s44\sa120 \f5\fs20 This function returns {\i TabSize }the current {\i Tabulation size} (in blank spaces) of active {\b Editor window}.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SetColoring_2}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SetColoring/2}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_SetColoring}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }edit_SetColoring/2
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v edit_SetOptions}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_SetColoring}(WINDOW{\i  WinHandle,} INTEGER {\i TypeOfColoring})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This predicate sets a new {\b coloring scheme}{\i  TypeOfColoring }for{\i  a }target {\i WinHandle }{\b Editor window}.
\par {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 Each {\b Editor window} can use a unique {\b coloring scheme}{\i  }for handling files of the following file extensions:
\par \pard\plain \s17\li284\keep \f11\fs20 .PRO(.DOM; .PRE, .CON, .INC); .RC; .DEF; .C(.H); OTHERS. 
\par \pard\plain \s46\sb120\sa120 \f5\fs20 The following{\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }}
} predefined constants can be used to select the {\b coloring scheme} for a particular Editor window:
\par \pard\plain \s47\fi-1985\li1985\sa120\brdrb\brdrs\brdrw15\brsp20 \tx1985 \f5\fs20\lang2057 {\b Constant name\tab Associated file extensions
\par }\pard \s47\fi-1985\li1985\sa120\tx1985 edit_ftype_{\b pro}\tab for files with {\b .PRO, .DOM, .PRE, .CON, .INC} extensions
\par edit_ftype_{\b rc}\tab for files with {\b .RC} extensions
\par edit_ftype_{\b def}\tab for files with {\b .DEF} extensions
\par edit_ftype_{\b c}\tab for files with {\b .C }and {\b .H} extensions
\par \pard \s47\fi-1985\li1985\sa120\brdrb\brdrs\brdrw15\brsp20 \tx1985 edit_ftype_{\b other}\tab for files with {\b OTHER} extensions
\par \pard\plain \s46\sb120\sa120 \f5\fs20 they are declared in the file EDITOR.DOM.
\par \pard\plain \s43 \f5\fs20 The Editor window\rquote s {\b coloring scheme} describes the settings of {\i foreground / background colors} and {\i font} attributes for the following Programming Language Syntax Elements:
\par \pard\plain \s72\fi-2126\li2410\sa60\tx567\tx2268\tx2410 \f5\fs20 {\f1 \'b7\tab }{\b Symbols}\tab -\tab Commas, brackets, etc.
\par {\f1 \'b7\tab }{\b Atom}\tab -\tab Is any identifier that starts with a lower case letter followed by any combination of zero or more letters, digits, and underscores. It can be either a functor name, {\cs57\v\fs16  }or a {\uldb\cf11 symbol}{\v 
symbol_glossary} / {\uldb\cf11 string}{\v string_glossary} type constant that is not surrounded by quotation marks, or a Visual Prolog compiler directive.
\par {\f1 \'b7\tab }{\b Variable}\tab -\tab A Visual Prolog variable.
\par {\f1 \'b7\tab }{\b String}\tab -\tab A {\uldb\cf11 symbol}{\v symbol_glossary} or {\uldb\cf11 string}{\v string_glossary} type constant surrounded by quotation marks.
\par {\f1 \'b7\tab }{\b Illegal Character}\tab -\tab An illegal (for the language) character or a set of characters not identified as legal syntax construction
\par {\f1 \'b7\tab }{\b Character}\tab -\tab An arbitrary character surrounded by single quotation marks: 'a'. (Character constant).
\par {\f1 \'b7\tab }{\b Hex}\tab -\tab A hexadecimal integer number.
\par {\f1 \'b7\tab }{\b Decimal}\tab -\tab A decimal integer number.
\par {\f1 \'b7\tab }{\b Float}\tab -\tab A floating-point number
\par {\f1 \'b7\tab }{\b Octal}\tab -\tab An octal integer number.
\par {\f1 \'b7\tab }{\b Key Words}\tab -\tab Key words reserved in the language
\par {\f1 \'b7\tab }{\b Comments}\tab -\tab Comments
\par {\f1 \'b7\tab }{\b Whitespace}\tab -\tab Spaces and tabulations
\par {\f1 \'b7\tab }{\b Hyper Text}\tab -\tab A jump or popup hyperfield in {\uldb\cf11 hypertext}{\v Hypertext_fundamentals} editor
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul Comments:}
\par \pard\plain \s31\qj\fi-284\li284\sa60\tx284\tx567\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\f1 \'b7\tab }You can obtain the current {\b coloring schemes} {\i OptionsList by }calling the predicate {\uldb\cf11 edit_GetOptions}{\v edit_GetOptions}({\i 
OptionsList}){\f1 
\par \'b7\tab }The font attribute is valid for nonproportional fonts only.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SetAssociations_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SetAssociations/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_SetAssociations}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }edit_SetAssociations/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_SetAssociations}(EDIT_ASSLIST {\i AssociationsList})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Using this predicate you can create a default (or change previously associated) {\b coloring scheme }for any number of file extensions {\b .XXX. }
\par {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 The settings will be used as default for all Editor windows. 
\par The Visual Prolog Editor supports five {\b coloring} {\b schemes} for various file extensions. By default Visual Prolog uses the following associations between {\b coloring schemes }and file extensions:{\b 
\par }\pard\plain \s47\fi-1985\li1985\sa120\brdrb\brdrs\brdrw15\brsp20 \tx1985 \f5\fs20\lang2057 {\b Constant name\tab Associated file extensions
\par }\pard \s47\fi-1985\li1985\sa120\tx1985 edit_ftype_{\b pro}\tab for files with {\b .PRO, .DOM, .PRE, .CON, .INC} extensions
\par edit_ftype_{\b rc}\tab for files with {\b .RC} extensions
\par edit_ftype_{\b def}\tab for files with {\b .DEF} extensions
\par edit_ftype_{\b c}\tab for files with {\b .C }and {\b .H} extensions
\par \pard \s47\fi-1985\li1985\sa120\brdrb\brdrs\brdrw15\brsp20 \tx1985 edit_ftype_{\b other}\tab for files with {\b OTHER} extensions
\par \pard\plain \s46\sb120\sa120 \f5\fs20 You can change these default associations using the {\b edit_SetAssociations}() predicate. 
\par \pard\plain \s44\sa120 \f5\fs20 Domain for {\i AssociationsList} is declared in the file EDITOR.DOM as:
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 GLOBAL DOMAINS
\par \pard\plain \s16\fi-2835\li2835 \f11\fs20 EDIT_ASSOC = struct {\b ass}(STRING {\i FileExtension,}INTEGER {\i TypeOfColoring})
\par \pard\plain \s17\keep \f11\fs20 EDIT_ASSLIST = EDIT_ASSOC*
\par \pard\plain \s46\sb120\sa120 \f5\fs20 By using the {\b edit_SetAssociations}() predicate you can associate (reassociate) a default {\b coloring scheme }to any file extension {\b .XXX}.
\par \pard\plain \s44\sa120 \f5\fs20 {\b See also:} {\b\uldb\cf11 edit_GetAssociations}{\uldb\cf11 ()}{\v edit_GetAssociations_0}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetAssociations_0}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetAssociations/0}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_GetAssociations}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }edit_GetAssociations/0
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 EDIT_ASSLIST /*{\i AssociationsList}*/ {\b edit_GetAssociations}()
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Using {\b edit_GetAssociations}() predicate you can receive a list of file extensions {\b .XXX} and their associated default {\b coloring schemes.}
\par {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 The Visual Prolog Editor supports five {\b colouring} {\b schemes} for various file extensions. By default Visual Prolog uses the following associations between {\b coloring schemes }and file extensions:{\b 
\par }\pard\plain \s47\fi-1985\li1985\sa120\brdrb\brdrs\brdrw15\brsp20 \tx1985 \f5\fs20\lang2057 {\b Constant name\tab Associated file extensions
\par }\pard \s47\fi-1985\li1985\sa120\tx1985 edit_ftype_{\b pro}\tab for files with {\b .PRO, .DOM, .PRE, .CON, .INC} extensions
\par edit_ftype_{\b rc}\tab for files with {\b .RC} extensions
\par edit_ftype_{\b def}\tab for files with {\b .DEF} extensions
\par edit_ftype_{\b c}\tab for files with {\b .C }and {\b .H} extensions
\par \pard \s47\fi-1985\li1985\sa120\brdrb\brdrs\brdrw15\brsp20 \tx1985 edit_ftype_{\b other}\tab for files with {\b OTHER} extensions
\par \pard\plain \s46\sb120\sa120 \f5\fs20 These default associations can be changed by using the {\uldb\cf11 edit_SetAssociations()}{\v edit_SetAssociations_1} predicate. 
\par \pard\plain \s44\sa120 \f5\fs20 Domain for {\i AssociationsList} is declared in the file EDITOR.DOM as
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 GLOBAL DOMAINS
\par \pard\plain \s16\fi-2835\li2835 \f11\fs20 EDIT_ASSOC = struct {\b ass}(STRING {\i FileExtension,}INTEGER {\i TypeOfColoring})
\par \pard\plain \s17\keep \f11\fs20 EDIT_ASSLIST = EDIT_ASSOC*
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GotoPos_2}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GotoPos/2}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_GotoPos}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }
edit_GotoPos/2
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 BOOLEAN {\i /*ResultFlag*/} {\b edit_GotoPos(} WINDOW {\i WinHandle, }ULONG {\i CaretPosition}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Sets the caret position {\i CaretPosition} for the Edit window {\i WinHandle} .
\par \pard\plain \s44\sa120 \f5\fs20 Returns BOOLEAN value {\i ResultFlag }equal to{\i  b_true} on success, {\i b_false} otherwise.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 All declarations needed for using of this predicate are contained in the files EDITOR.DOM and EDITOR.PRE.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetNumberOfLines_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetNumberOfLines/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_GetNumberOfLines}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Ov
erview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }edit_GetNumberOfLines/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 INTEGER /*{\i LineNumber}*/ {\b edit_GetNumberOfLines}(WINDOW {\i WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Returns the number of lines ({\i LineNum}) in the text being edited in the {\i WinHandle} Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 All declarations needed for using of this predicate are contained in the files EDITOR.DOM and EDITOR.PRE.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GotoLine_2}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GotoLine/2}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_GotoLine}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")
} }edit_GotoLine/2
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_GotoLine(} WINDOW {\i WinHandle, }INTEGER {\i LineNum}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Moves the cursor to the specified line number {\i LineNum}. The {\i WinHandle }is an Edit window handle{\i 
\par }{\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 All declarations needed for using of this predicate are contained in the files EDITOR.DOM and EDITOR.PRE.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetPos_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetPos/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_GetPos}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }
edit_GetPos/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 ULONG /*{\i CaretPosition*/ }{\b edit_GetPos(} WINDOW{\i  WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Returns current caret position {\i CaretPosition} (as the offset) for {\i WinHandle} Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 All declarations needed for using of this predicate are contained in the files EDITOR.DOM and EDITOR.PRE.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetPos_3}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetPos/3}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_GetPos}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }
edit_GetPos/3
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_GetPos(}WINDOW {\i WinHandle, }INTEGER {\i Line,} INTEGER {\i Column}) 
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,o,o)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Returns the current caret position as the {\i Line} and {\i Column }for the {\i WinHandle} Editor window.{\i 
\par }{\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 All declarations needed for using of this predicate are contained in the files EDITOR.DOM and EDITOR.PRE.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par 
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Left_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Left/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_Left}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }
edit_Left/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Left(} WINDOW {\i WinHandle}{\b )
\par }\pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret one character to the left. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Right_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Right/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_Right}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }
edit_Right/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Right( }WINDOW {\i WinHandle}{\b )
\par }\pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret one character to the right. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Up_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Up/1}} {\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 {
\cs26\super K} edit_Up}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }edit_Up/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Up( }WINDOW {\i WinHandle}{\b )
\par }\pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret one line Up. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Down_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Down/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_Down}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }
edit_Down/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b edit_Down( }WINDOW {\i WinHandle}{\b )}
\par {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret one line Down. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_PgUp_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_PgUp/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_PgUp}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }
edit_PgUp/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_PgUp( }WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret one page Up. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_PgDn_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_PgDn/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_PgDn}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }
edit_PgDn/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_PgDn(} WINDOW {\i WinHandle}{\b )
\par }\pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret one page Down. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_WordLeft_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_WordLeft/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_WordLeft}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")
} }edit_WordLeft/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_WordLeft(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret one word to the left. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_WordRight_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_WordRight/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_WordRight}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }edit_WordRight/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_WordRight(}WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret one word to the right. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_LineHome_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_LineHome/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_LineHome}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")
} }edit_LineHome/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_LineHome(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret to the beginning of the current line. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_LineEnd_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_LineEnd/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_LineEnd}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }
edit_LineEnd/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_LineEnd(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret to the end of the current line. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_FileHome_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_FileHome/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_FileHome}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")
} }edit_FileHome/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_FileHome(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret to the beginning of the text.{\i  WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_FileEnd_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_FileEnd/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_FileEnd}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Caret_Positioning_Predicates')")} }
edit_FileEnd/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Caret_Positioning_Predicates}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_FileEnd(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Moves the caret to the end of the text.{\i  WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_PasteStr_3}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_PasteStr/3}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_PasteStr}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Block_Manipulating_Predicates')
")} }edit_PasteStr/3
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 BOOLEAN /*ResultFlag*/ {\b edit_PasteStr(} WINDOW {\i WinHandle,} ULONG {\i BeginPos,} STRING {\i PasteString}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i,i)
\par \pard\plain \s44\sa120 \f5\fs20 This predicate inserts the string {\i PasteString} into the text of an Edit window. The text is inserted at position {\i BeginPos.} The function returns BOOLEAN value {\i b_true} on success. 
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 {\i WinHandle }is a handle of target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Del_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Del/1}} {\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 
{\cs26\super K} edit_Del}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Editor_Deleting_and_Inserting_Text_Predicates')")} 
}edit_Del/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Del(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Simulates the pressing of the {\b 'Delete'} key. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Backspace_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Backspace/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_Backspace}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Deleting_and_Inserting_Text_Predicates')")} }edit_Backspace/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Backspace(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Simulates the pressing of the {\b 'Backspace'} {\i key. WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Char_2}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Char/2}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_Char}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Deleting_and_Inserting_Text_Predicates')")} }edit_Char/2
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Char(} WINDOW {\i WinHandle,} CHAR {\i CharPressed}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s44\sa120 \f5\fs20 Simulates the pressing of the viewable key passed in the argument{\i  CharPressed}.{\i  WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Enter_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Enter/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_Enter}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit
or_Deleting_and_Inserting_Text_Predicates')")} }edit_Enter/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Enter(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Simulates the pressing of the {\b 'Enter'} key. {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_DeleteLine_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_DeleteLine/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_DeleteLine}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Deleting_and_Inserting_Text_Predicates')")} }edit_DeleteLine/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_DeleteLine(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern\tab }(i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This predicate deletes the current line to the caret position. (Simulates the '{\b Ctrl-Y}' key combination.) {\i WinHandle }is the handle of a target Editor window.
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_DelLeftWord_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_DelLeftWord/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_DelLeftWord}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Deleting_and_Inserting_Text_Predicates')")} }edit_DelLeftWord/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_DelLeftWord}( WINDOW {\i WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 This predicate deletes the word to the left of caret. (Simulates the {\b 'Ctrl-L'} key combination{\i ). WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_DelRightWord_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_DelRightWord/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_DelRightWord}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Deleting_and_Inserting_Text_Predicates')")} }edit_DelRightWord/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_DelRightWord}( WINDOW {\i WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 This predicate deletes the word to the right of caret. (Simulates the '{\b Ctrl-R}' key combination).
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\i WinHandle }is the handle of a target Editor window.
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_DelToStartOfLine_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_DelToStartOfLine/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_DelToStartOfLine}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Deleting_and_Inserting_Text_Predicates')")} }edit_DelToStartOfLine/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_DelToStartOfLine(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern\tab }(i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This predicate deletes all text extending from the beginning of the current line to the caret position. (Simulates the '{\b Ctrl-S}' key combination.) {\i WinHandle }is the handle of a target Editor window.
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_DelToEndOfLine_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_DelToEndOfLine/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_DelToEndOfLine}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Deleting_and_Inserting_Text_Predicates')")} }edit_DelToEndOfLine/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Deleting_and_Inserting_Text_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_DelToEndOfLine(} WINDOW {\i WinHandle}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern\tab }(i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This predicate deletes text from the caret position to{\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{
\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }2 lena - the end of {\ul the?} current line (not to the end of ? paragraph)}} the end of the current line (not to the end of paragraph). (Simulates the '{\b Ctrl-E}' key combination). {\i WinHandle }
is the handle of a target Editor window.
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SetSelection_3}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SetSelection/3}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_SetSelection}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Block_Manipulating_Predicates')")} }edit_SetSelection/3
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Block_Manipulating_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 BOOLEAN {\i /*ResultFlag*/ }{\b edit_SetSelection(}WINDOW {\i WinHandle,} ULONG {\i PosBegin,} ULONG {\i PosEnd}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i,i)
\par \pard\plain \s44\sa120 \f5\fs20 Selects the text block in the Editor window {\i WinHandle.
\par }\pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 The function attempts to select a text block that extends from {\i PosBegin} to{\i  PosEnd}. {\b edit_SetSelection }returns BOOLEAN value{\i  ResultFlag }equal to {\i b_true} on success, {\i b_false }otherwise.
\par {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also: }{\uldb\cf11 edit_GetSelection,}{\v edit_GetSelection_3}, {\uldb\cf11 edit_SelectCurLine/1}{\v edit_SelectCurLine_1}, {\uldb\cf11 edit_SelectWord,}{\v edit_SelectWord_1}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GetSelection_3}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GetSelection/3}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_GetSelection}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Block_Manipulating_Predicates')")} }edit_GetSelection/3
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Block_Manipulating_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_GetSelection(} WINDOW {\i WinHandle,} ULONG {\i PosBegin,} ULONG {\i PosEnd}{\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,o,o)
\par \pard\plain \s44\sa120 \f5\fs20 This predicate returns the position of the selected text block in the Editor window {\i WinHandle.
\par }\pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 The {\i PosBegin }is the beginning position of block and {\i PosEnd} is the end position. If {\i PosBegin }= {\i PosEnd} = 0 there is no text selected.
\par {\i WinHandle }is the handle of a target Editor window.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also: }{\b\uldb\cf11 edit_SelectWord,}{\b\v edit_SelectWord_1}{\b  , }{\uldb\cf11 edit_SelectCurLine/1}{\v edit_SelectCurLine_1}{\b , }{\b\uldb\cf11 edit_SetSelection}{\b\v edit_SetSelection_3}
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SelectCurLine_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SelectCurLine/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_SelectCurLine}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Block_Manipulating_Predicates')")} }edit_SelectCurLine/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\b0\v Block_Manipulating_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_SelectCurLine(} WINDOW {\i WinHandle} {\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 This predicate selects the line containing the current cursor position. 
\par {\i WinHandle }is the handle of a target Editor window.
\par {\b See also: }{\b\uldb\cf11 edit_GetSelection,}{\b\v edit_GetSelection_3}{\b , }{\b\uldb\cf11 edit_SetSelection}{\b\v edit_SetSelection_3}{\b , }{\b\uldb\cf11 edit_SelectWord/1}{\v edit_SelectWord_1}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SelectWord_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SelectWord/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_SelectWord}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Block_Manipulating_Predicates')")} }edit_SelectWord/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\b0\v Block_Manipulating_Predicates}{\b0\fs20 \tab }{\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 BOOLEAN {\i /*ResultFlag*/} {\b edit_SelectWord(} WINDOW {\i WinHandle} {\b )}
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 This predicate tries to select a word in the Editor window {\i WinHandle}, simulating a mouse double click at the current cursor position.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 {\b edit_SelectWord} returns BOOLEAN value{\i  ResultFlag }equal to {\i b_true} on success and {\i b_false }otherwise.
\par {\i WinHandle }is the handle of a target Editor window.
\par {\b See also: }{\b\uldb\cf11 edit_GetSelection,}{\b\v edit_GetSelection_3}{\b  }{\b\uldb\cf11 edit_SetSelection}{\b\v edit_SetSelection_3}{\b , }{\b\uldb\cf11 edit_SelectCurLine/1}{\v edit_SelectCurLine_1}
\par 
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_PossibleUnDoReDo_3}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_PossibleUnDoReDo/3}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_PossibleUnDoReDo}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HL
P',`Undo_Redo_Predicates')")} }edit_PossibleUnDoReDo/3
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_PossibleUnDoReDo}(WINDOW {\i WinHandle,} BOOLEAN {\i Undo,} BOOLEAN {\i Redo})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,o,o)
\par \pard\plain \s44\sa120 \f5\fs20 Checks the state of the Undo and Redo buffers of {\i WinHandle }Editor window.
\par Returns:
\par \pard\plain \s75\fi-851\li1135\sa120 \f5\fs20\lang2057 {\i Undo = \tab b_true }if it is possible to execute an Undo command
\par {\i Redo} =\tab {\i b_true }if is possible to execute a Redo command. 
\par \tab Otherwise the output parameters return {\i b_false.} 
\par \pard\plain \s44\sa120 \f5\fs20 {\b See also: }{\b\uldb\cf11 edit_Undo()}{\b\v edit_Undo_1}, {\b\uldb\cf11 edit_Redo()}{\b\v edit_Redo_1}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Undo_1}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Undo/1}} {\cs26\b0\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_Undo}} {\cs26\b0\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }
edit_Undo/1{\b0 
\par }\pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Undo}(WINDOW{\i  WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern\tab }(i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Reverses the last editing action in {\i WinHandle }Editor window.
\par {\b Remarks:}
\par \pard\plain \s44\sa120 \f5\fs20 The primary aim of {\b edit_Undo()} predicate is to provide for programmers a simple method for invoking {\ul\cf11 Undo}{\v Undo_Redo_features} Editor action from menus.
\par Predicate {\b edit_Undo} has a corresponding internal Editor function. This function can be invoked to accomplish Undo action when the {\i WinHandle }Editor window receives the {\i e_menu(1060,_)} event.
\par This function will be invoked if an {\i EventHandler }callback function, that handles an Editor events, returns zero value (or fails) when {\i EventHandler }handles the {\i e_menu(1060,_)} event. Otherwise the editor handler does not elaborate the event.

\par {\b See also:
\par }{\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\b0\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Redo_1}} {\cs26\b0\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Redo/1}} {\cs26\b0\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_Redo}} {\cs26\b0\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }
edit_Redo/1{\b0 
\par }\pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Redo}(WINDOW{\i  WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Reverses the changes that were made to a document by the last successful {\b Undo} action in the {\i WinHandle }Editor window.
\par {\b Comments:}
\par \pard\plain \s44\sa120 \f5\fs20 Predicates {\b edit_Undo} and {\b edit_Redo} have corresponding internal Editor functions; that can be invoked when an Editor receives events {\i e_menu(1060,_)} or {\i e_menu(1061,_).}
\par These functions are invoked if the {\i EventHandler }callback function returns the zero value (or fails) when it{\i  }handles these {\i e_menu(...,_)} events. 
\par Otherwise the editor handler does not elaborate the event.
\par {\b See also:
\par }Discussions and examples in {\uldb\cf11 Edit Menu Predicates}{\v Edit_Menu_Predicates}
\par and {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Cut_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Cut/1}} {\cs26\super K{\footnote \pard\plain \s25 \f5\fs20 
{\cs26\super K} edit_Cut}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }edit_Cut/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b edit_Cut}(WINDOW{\i  WinHandle})
\par \pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Removes a selected text and places it on the {\uldb\cf11 Clipboard}{\v Clipboard_commands}.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks:}
\par \pard\plain \s44\sa120 \f5\fs20 The primary purpose of the {\b edit_Cut()} predicate is to provide for programmers a simple method of invoking the {\b Cut}  Editor action from menus.
\par Predicate {\b edit_Cut} has a corresponding internal Editor function. This function can be invoked (to accomplish the {\b Cut} action) when the {\i WinHandle }Editor window receives the {\i e_menu(1063,_)} event.
\par This function will only be invoked if the {\i EventHandler }callback function, that handles Editor events, returns the zero value (or fails) when it{\i  }handles the {\i e_menu(1063,_)} event. Otherwise the editor handler does not elaborate the event.

\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Copy_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Copy/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_Copy}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }edit_Copy/1

\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b edit_Copy}(WINDOW{\i  WinHandle})
\par \pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Copies a selected text to the {\uldb\cf11 Clipboard}{\v Clipboard_commands}. 
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks:}
\par \pard\plain \s44\sa120 \f5\fs20 The {\b edit_Copy()} predicate provides programmers with a simple method for invoking the {\b Copy }Editor action from menus.
\par Predicate {\b edit_Copy }has a corresponding internal Editor function. This function can be invoked to accomplish {\b Copy} action when the {\i WinHandle }Editor window receives the {\i e_menu(1064,_)} event.
\par This function will only be invoked if the {\i EventHandler }callback function, that handles Editor events, returns zero value (or fails) when it{\i  }handles the {\i e_menu(1064,_)} event. Otherwise the editor handler does not elaborate the event.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Paste_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Paste/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_Paste}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }edit_Paste/1

\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b edit_Paste}(WINDOW{\i  WinHandle})
\par \pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Inserts a copy of the {\uldb\cf11 Clipboard}{\v Clipboard_commands} contents at the insertion point.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks:}
\par \pard\plain \s44\sa120 \f5\fs20 This predicate provides programmers with a simple method for invoking the {\b Paste} Editor action from menus.
\par Predicate {\b edit_Paste }has a corresponding internal Editor function. This function can be invoked to accomplish the {\b Paste} action when the {\i WinHandle }Editor window receives the {\i e_menu(1065,_)} event.
\par This function will only be invoked if the {\i EventHandler }callback function, that handles an Editor events, returns the zero value (or fails) when it handles the {\i e_menu(1065,_)} event. Otherwise the editor handler does not elaborate the event.

\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Delete_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Delete/1}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_Delete}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }
edit_Delete/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b edit_Delete}(WINDOW{\i  WinHandle})
\par \pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Removes a selected text but does {\i not} copy it to the {\uldb\cf11 Clipboard}{\v Clipboard_commands}.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks:}
\par \pard\plain \s44\sa120 \f5\fs20 The primary aim of this predicate is to provide for programmers a simple method for invoking the {\b Delete }Editor action from menus.
\par Predicate {\b edit_Delete }has the a corresponding internal Editor function. This function can be invoked to accomplish the {\b Delete} action when the {\i WinHandle }Editor window receives the {\i e_menu(1066,_)} event.
\par This function will be invoked only if an {\i EventHandler }callback function, that handles Editor events, returns zero value (or fails) when it handles the {\i e_menu(1066,_)} event. Otherwise the editor handler does not elaborate the event.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\b0\fs20\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SearchDlg_1}} {\cs26\b0\fs20\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SearchDlg/1}} {\cs26\b0\fs20\super K
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} edit_SearchDlg}} {\cs26\b0\fs20\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }edit_SearchDlg/1{\b0\fs20 
\par }\pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b edit_SearchDlg}(WINDOW{\i  WinHandle})
\par \pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Invokes the {\uldb\cf11 Find Text}{\v Find_Text} dialog box and invites the user to enter a search string.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks:}
\par \pard\plain \s44\sa120 \f5\fs20 The primary aim of this predicate is to provide for programmers a simple method for invoking the Search Editor action from menus.
\par Predicate {\b edit_SearchDlg }has a corresponding internal Editor function. This function can be invoked to activate the {\uldb\cf11 Find Text}{\v Find_Text} dialog box in order to enable text searching in the {\i WinHandle }
Editor window when an Editor receives the {\i e_menu(1077,_)} event{\i .}
\par This dialog box will be invoked if an {\i EventHandler }callback function, that handles Editor events, returns zero value (or fails) when it{\i  }handles the {\i e_menu(1077,_)} events. Otherwise the editor handler does not elaborate the event.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SearchAgain_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SearchAgain/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_SearchAgain}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }edit_SearchAgain/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b edit_SearchAgain}(WINDOW{\i  WinHandle})
\par \pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Finds and selects the next occurrence of the text string (previously) specified in the {\uldb\cf11 Find text}{\v Find_Text} dialog box
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks:}
\par \pard\plain \s44\sa120 \f5\fs20 The primary aim of this predicate is to provide for programmers a simple method for invoking this Editor action from menus.
\par Predicate {\b edit_SearchAgain }has a corresponding internal Editor function. This function can be invoked to repeat the last search action when the {\i WinHandle }Editor window receives the {\i e_menu(1079,_) }event.
\par This function will only be invoked if an {\i EventHandler }callback function, that handles Editor events, returns zero value (or fails) when {\ul it}{\i  }handles the {\i e_menu(1079,_)} event. Otherwise the editor handler does not elaborate the event.

\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_ReplaceDlg_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_ReplaceDlg/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_ReplaceDlg}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }
edit_ReplaceDlg/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b edit_ReplaceDlg}(WINDOW{\i  WinHandle})
\par \pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Invokes the {\uldb\cf11 Replace Text}{\v Replace_Text} dialog box allows the user to specify a search string and a replace string.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 The purpose of this predicate is to provide programmers with a simple method of invoking the {\b Replace} Editor action from menus.
\par Predicate {\b edit_ReplaceDlg }has a corresponding internal Editor function. This function can be invoked to activate the {\b Replace Text }dialog box for replacing text in the {\i WinHandle }Editor window{\i ,} when an Editor receives the {\i 
e_menu(1078,_)} event.
\par This dialog box will only be invoked if an {\i EventHandler }callback function, that handles Editor events, returns zero value (or fails) when it{\i  }handles the {\i e_menu(1078,_)} event. Otherwise the editor handler does not elaborate the event.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GotoLineDlg_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GotoLineDlg/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_GotoLineDlg}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }edit_GotoLineDlg/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b edit_GotoLineDlg}(WINDOW{\i  WinHandle})
\par \pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Invokes the {\uldb\cf11 Go To Line Number}{\v Go_To_Line_Number} dialog box to move the cursor to the desired line number.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 The purpose of this predicate is to provide programmers with a simple method of invoking the {\b Go To Line Number} Editor action from menus.
\par Predicate {\b edit_GotoLineDlg }has a corresponding internal Editor function. This function can be invoked to activate the {\b Go To Line Number} dialog box when the {\i WinHandle }Editor window receives the {\i e_menu(1081,_)} event.
\par This dialog box will be invoked only if the {\i EventHandler }callback function, that handles Editor events, returns zero value (or fails) when it{\i  }handles the {\i e_menu(1081,_)} event. Otherwise the editor handler does not elaborate the event.

\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_GotoPosDlg_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_GotoPosDlg/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_GotoPosDlg}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }
edit_GotoPosDlg/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\b0\uldb\cf11 Example}{\b0\v Edit_Menu_Predicates_Usage_Example}{\b0\fs20 \tab }{\b0\ul\cf11 Portability}{\b0\v Portability_VPI}{\b0 
\par }\pard\plain \s51\fi-851\li851\sb120\sa120 \f5\fs20\lang2057 {\b edit_GotoPosDlg}(WINDOW{\i  WinHandle})
\par \pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Invokes the {\uldb\cf11 Go to Position}{\v Go_to_Position_dialog_box} dialog box to position the cursor in the edited text.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 The purpose of this predicate is to provide programmers with a simple method for invoking this Editor action from menus.
\par Predicate {\b edit_GotoPosDlg }has a corresponding internal Editor function. This function can be invoked to activate the {\b Go To Position} dialog box when the {\i WinHandle }Editor window receives the {\i e_menu(1082,_)} event.
\par This dialog box will only be invoked if an {\i EventHandler }callback function, that handles Editor events, returns zero value (or fails) when it{\i  }handles the {\i e_menu(1082,_)} event. Otherwise the editor handler does not elaborate the event.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SetFontDlg_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SetFontDlg/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_SetFontDlg}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Edit_Menu_Predicates')")} }
edit_SetFontDlg/1
\par \pard\plain \s29\sb40\sa40\keepn\tx1418 \b\f5\fs16 {\uldb\cf11 See also}{\v Editor_Modes_Handling}\tab {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_SetFontDlg}(WINDOW{\i  WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 This predicate invokes the {\b Font }dialog box in which the user can select {\i font}, {\i font style} and {\i font size.}
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 The purpose of this predicate is to provide programmers with a simple method of invoking this Editor action from menus.
\par Predicate {\b edit_SetFontDlg }has a corresponding internal Editor function. This function can be invoked to activate the {\b Font} dialog box when the {\i WinHandle }Editor window receives the {\i e_menu(1085,_)} event.
\par This dialog box will be invoked only if the {\i EventHandler }callback function, that handles Editor events, returns zero value (or fails) when it{\i  }handles the {\i e_menu(1085,_)} event. Otherwise the editor handler does not elaborate the event.

\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b See also:}
\par \pard\plain \s44\sa120 \f5\fs20 {\b\uldb\cf11 edit_Create...()}{\b\v edit_Create} predicates
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Hyperfiels_Handling_Functions}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Hyperfield Handling Functions}} {\cs26\super 
K{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} Hyperfield Handling Functions}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} Hyperfield Handling Functions
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s44\sa120 \f5\fs20 The following predicates are used for processing hyperfields in a text edited in an edit window created by a call to the predicate {\uldb\cf11 edit_CreateHyper}{\v edit_CreateHyper}.
\par 
\par {\uldb\cf11 edit_CreateHyperField}{\v edit_CreateHyperField_1}(WINDOW {\i Window}) - (I)
\par {\uldb\cf11 edit_DeleteHyperField}{\v edit_DeleteHyperField_1}(WINDOW {\i Window}) - (i)
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_CreateHyperField_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_CreateHyperField/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_CreateHyperField}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} edit_CreateHyperField/1
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_CreateHyperField}(WINDOW {\i Window})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Creates a hyperfield from the selected text.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 {\i Window } must be the edit window created by the {\uldb\cf11 edit_CreateHyper}{\v edit_CreateHyper} predicate.
\par {\b edit_CreateHyperField }checks that selected block of text belongs to one paragraph, marks (highlight) this block as a hyperfield, and inserts the{\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 
\f5\fs20 {\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn } a?}} hidden hyperfield information (the empty string).
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par {\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Kuchukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 {\field\flddirty{\*\fldinst {\revised\revauth19\revdttm-1510736888 PAGE \\# "'Page: '#'\line '"}{\cs57\fs16\revised\revauth19\revdttm-1510736888   }
}{\fldrslt }}{\cs57\fs16 \chatn } Errors ? Fail?}}
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_DeleteHyperField_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_DeleteHyperField/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_DeleteHyperField}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} edit_DeleteHyperField/1
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_DeleteHyperField}(WINDOW {\i Window})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s44\sa120 \f5\fs20 Deletes a selected hyperfield.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 {\i Window } must be the editor window created by {\uldb\cf11 edit_CreateHyper}{\v edit_CreateHyper} predicate.
\par {\b edit_CreateHyperField} removes hyperfield marking (highlighting) from the selected hyperfield, and deletes the hidden hyperfield information.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Create}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Create/12}} {\cs26\super K{\footnote \pard\plain \s25 
\f5\fs20 {\cs26\super K} edit_Create; editor API}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }edit_Create/12
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\uldb\cf11 See also}{\v edit_Create_Predicates}\tab \tab {\ul\cf11 Portability}{\v Portability_VPI}\tab 
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 WINDOW {\b edit_Create(}
\par \pard\plain \s61\li284\tx1701 \f5\fs20 WINTYPE\tab {\i WinType},
\par RCT\tab {\i Rct},
\par STRING\tab {\i Title},
\par MENU\tab {\i Menu},
\par WINDOW\tab {\i ParentWin},
\par WSFLAGS\tab {\i Flags},
\par FONT\tab {\i Font},
\par BOOLEAN\tab {\i ReadOnly,}
\par BOOLEAN\tab {\i Indent,}
\par STRING\tab {\i InputStr},
\par ULONG\tab {\i InitPos,}
\par \pard\plain \s58\li284\sa120\tx1701 \f5\fs20 EHANDLER\tab {\i EventHandler}{\b )
\par }\pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern\tab }(i,i,i,i,i,i,i,i,i,i,i,i) 
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks
\par }\pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 {\b edit_Create() }creates a Text Editor in the application program. {\b edit_Create()} does not wrap text.
\par This is the {\ul only} variant of the editor that can {\uldb\cf11 highlight Language tokens}{\v edit_SetColoring_2}.
\par \pard\plain \s32\qj\sa120\keep\brdrb\brdrs\brdrw15\brsp20 \tx1276\tx2552\tx3402 \f5\fs20 {\b Argument\tab Description
\par }\pard\plain \s34\qj\fi-1276\li1276\tx1276 \f5\fs20 {\i WinType\tab }type of window: {\i w_TopLevel }or {\i w_Child.} If {\i w_Child }is used{\i  }Editor will not have the status line capability{\i 
\par Rct\tab }window rectangle{\i 
\par Title\tab }window title: file name{\i 
\par Menu\tab }menu{\i 
\par ParentWin\tab }parent window{\i 
\par Flags\tab }window flags: {\uldb\cf11 wsf_***}{\v Window_domains}{\i 
\par Font\tab }window font{\i 
\par ReadOnly\tab b_true }- view mode; {\i b_false }- edit mode{\i 
\par Indent\tab b_true }- sets the {\uldb\cf11 Autoindent}{\v Editor_Options} mode ; if {\i b_false }- then no indentation{\i 
\par InputStr\tab }input string{\i 
\par InitPos\tab }initial cursor position{\i 
\par EventHandler\tab }callback function which handles all editor events except for {\uldb\cf11 e_Create}{\v e_Create}, {\uldb\cf11 e_Destroy}{\v e_Destroy}, {\uldb\cf11 e_Update}{\v e_Update}{\i .} Using {\i EventHandler}
 you can implement filters for almost all editor events. Thus, you can make controllable calls to the editor. The domain for this function is {\uldb\cf11 EHANDLER}{\v EHANDLER_VPI_DOMAIN}. If {\i EventHandler} function returns zero (or fails) when it{\i  
}handles the event{\*\bkmkstart current}{\*\bkmkend current}, then the editor handler elaborates the event in its turn. Otherwise the editor handler does not elaborate the event.
\par \pard\plain \s52\li1276 \f5\fs20 {\b\ul Note.} By default, the editor window is destroyed when the editor handler receives the{\i  }{\uldb\cf11 e_CloseRequest}{\v e_CloseRequest} event.
\par {\b\ul Note.} The Editor {\ul never} {\*\bkmkstart tt1}receives{\*\bkmkend tt1} the {\b e_CloseRequest} event if it is running in a dialog window
\par {\b\ul Note.} The Editor handles {\uldb\cf11 e_Menu}{\v e_Menu}( {\i Menu_tag}...) events for the following menu tags only:
\par \pard\plain \s49\fi-709\li1985 \f5\fs20 1060 - undo
\par 1061 - redo
\par 1063 - cut to the clipboard
\par 1064 - copy to the clipboard
\par 1065 - paste from the clipboard
\par 1066 - clear( delete block without copying to the clipboard )
\par 1077 - search
\par 1078 - replace
\par 1079 - search again
\par 1081 - go to line
\par 1082 - go to position
\par 1085 - set editor font
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Create_example}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Create_example}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} {\*\bkmkstart a_editor_API_cur_2}{\*\bkmkend a_editor_API_cur_2}Don't used at the moment (edit_Create_example)}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }edit_Create()  example (Don't used at the moment)
\par \pard\plain \s27\qj\sb120\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 This example is based on definition of the {\b file_open() }predicate as defined in the EDITOR.PRO, EDITOR.DOM and EDITOR.PRE files.
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 DATABASE\tab \tab % Facts for editor
\par \pard\plain \s17\li284\keep \f11\fs20 %\tab \tab \tab (WINDOW,FileName)
\par nocopy {\b fileedit_win(}WINDOW,STRING)
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 GLOBAL PREDICATES
\par \pard\plain \s17\li284\keep \f11\fs20 {\b file_open() -  ()}
\par \pard\plain \s16\fi-567\li851 \f11\fs20 WINDOW {\b create_new_editor}(STRING, STRING, RCT, ULONG, {\uldb\cf11 EDIT_CLOSE_CALLBACK, EDIT_FOCUS_CALLBACK})
\par \pard\plain \s35\li851\keep \f11\fs20  - (i,i,i,i,i,i)
\par \pard\plain \s17\li284\keep \f11\fs20 {\b edit_focus_handler\tab \tab }: {\uldb\cf11 EDIT_FOCUS_CALLBACK}
\par {\b file_edit_close_handler}\tab : {\uldb\cf11 EDIT_CLOSE_CALLBACK}
\par \pard\plain \s37\li284\sb120\keep \f11\fs20 \tab % Clauses for next predicate must be written by user 
\par \pard\plain \s17\li284\keep \f11\fs20 {\b edit_command_handler\tab }: {\uldb\cf11 EDIT_COMMAND_CALLBACK}
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 PREDICATES
\par \pard\plain \s16\fi-567\li851 \f11\fs20 WINDOW {\b create_new_file_editor(}STRING, STRING, RCT, ULONG)
\par STRING get_file_data(STRING)
\par BOOLEAN file_edit_close_handler1(WINDOW)
\par BOOLEAN file_edit_close_handler2(STRING, STRING, STRING)
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 CLAUSES\tab % Open new editor with file
\par \pard\plain \s17\li284\keep \f11\fs20 {\b file_open():-
\par }\pard\plain \s36\fi-851\li1702 \f11\fs20 FILENAME = {\f5 dlg_GetOpenFileName(}"*.pro", ["*.pro","*.pro", "*.pre","*.pre", "*.con","*.con", "*.dom","*.dom"], "Load_a_file_to_edit"),
\par \pard\plain \s35\li851\keep \f11\fs20 FILENAME<>"",!,
\par Left = 10,
\par Right = Left+500,
\par Top = 10,
\par Bottom = Top + 250,
\par RCT = rct(Left,Top,Right,Bottom),
\par DATA = {\b get_file_data(}FILENAME),
\par {\b create_new_file_editor(}FILENAME,DATA,RCT,1).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 CLAUSES
\par \pard\plain \s17\li284\keep \f11\fs20 {\b create_new_file_editor(}FILENAME,DATA,RCT,POS,WIN):-
\par \pard\plain \s35\li851\keep \f11\fs20 NULLWIN=cast(window,0),
\par assert({\b fileedit_win(}NULLWIN,FILENAME,DATA)),
\par \pard\plain \s36\fi-851\li1702 \f11\fs20 WIN = {\b create_new_editor(}FILENAME, DATA, RCT, POS, file_edit_close_handler, edit_focus_handler),!.
\par \pard\plain \s16\fi-851\li1135\sb120 \f11\fs20 {\b create_new_editor}(TITLE, DATA, RCT, POS, CLOSE_HANDLER, EDIT_FOCUS_HANDLER,WIN):-
\par \pard\plain \s35\li851\keep \f11\fs20 inc_edit,
\par FONT = {\f5 font_Create}(ff_fixed,[],9),
\par READONLY = b_false,
\par WRAP = b_false,
\par NULLWIN=cast(window,0),
\par Task_Tmp = {\f5 win_GetAttrVal}(NULLWIN, attr_task_window),
\par Task_Win=cast(window,Task_Tmp),
\par \pard\plain \s36\fi-851\li1702 \f11\fs20 {\f5 FLAGS} = [wsf_Close, wsf_Minimize, wsf_Maximize, wsf_TitleBar, wsf_SizeBorder, wsf_ClipChildren, wsf_ClipSiblings],
\par WIN = {\uldb\cf11 edit_Create}{\v edit_Create}(w_TopLevel, RCT, TITLE, no_menu, Task_win, FLAGS, FONT, READONLY, WRAP, DATA, POS, "", edit_command_handler, CLOSE_HANDLER, EDIT_FOCUS_HANDLER, b_false).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 \tab % Load contents of a file
\par \pard\plain \s17\li284\keep \f11\fs20 {\b get_file_data(}FILENAME, DATA) :-
\par \pard\plain \s35\li851\keep \f11\fs20 existfile(FILENAME),!,
\par format(ERROR_MSG, "Unable to load file %", FILENAME),
\par trap(file_str(FILENAME,DATA),E,error_handler(ERROR_MSG,E)).
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 CLAUSES
\par \pard\plain \s17\li284\keep \f11\fs20 {\b edit_focus_handler(}WIN,b_true) :-
\par \pard\plain \s35\li851\keep \f11\fs20 NULLWIN=cast(window,0),
\par retract(fileedit_win(NULLWIN,FILENAME)),!,
\par assert(fileedit_win(WIN,FILENAME)).
\par \pard\plain \s17\li284\keep \f11\fs20 {\b edit_focus_handler(}_,_).
\par \pard\plain \s37\li284\sb120\keep \f11\fs20 \tab % Handle closing of file editor windows
\par \pard\plain \s17\li284\keep \f11\fs20 {\b file_edit_close_handler(}W, _):-
\par \pard\plain \s36\fi-851\li1702 \f11\fs20 trap(CLOSE_OK = file_edit_close_handler1(W),C,vpi_prolog_error(C)), assert(return_value(W, CLOSE_OK)),
\par \pard\plain \s35\li851\keep \f11\fs20 fail.
\par \pard\plain \s17\li284\keep \f11\fs20 {\b file_edit_close_handler(}W,CLOSE_OK) :-
\par \pard\plain \s35\li851\keep \f11\fs20 retract(return_value(W,CLOSE_OK)), !.
\par \pard\plain \s17\li284\keep \f11\fs20 {\b file_edit_close_handler(}_,b_false).
\par \pard \s17\li284\sb120\keep file_edit_close_handler1(W,CLOSE_OK):-
\par \pard\plain \s35\li851\keep \f11\fs20 fileedit_win(W,FILENAME),
\par DATA = edit_GetText(W),
\par get_win_restore_rct(W,RCT),
\par CLOSE_OK = file_edit_close_handler2(FILENAME,DATA),
\par CLOSE_OK = b_true,
\par retract(fileedit_win(W,_,_)),!.
\par \pard\plain \s17\li284\keep \f11\fs20 file_edit_close_handler1(_, b_false).
\par \pard \s17\li284\sb120\keep file_edit_close_handler2(FILENAME, DATA, b_true) :-!,
\par \pard\plain \s35\li851\keep \f11\fs20 format(ERROR_MSG, "Unable to save to file %", FILENAME),
\par trap(file_str(FILENAME, DATA), E, error_handler(ERROR_MSG,E)),
\par write("File ",FILENAME," saved\\n").
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 /*********************************************************
\par \pard\plain \s40\qj \f5\fs20 The{\b  edit_command_handler()}
 is the callback function which handles editor messages. Clauses for this predicate must be written by user. Here we show  example code  for the e_Menu(id_edins_keywords,_,_) message. This function corresponds to the {\ul\cf11 Insert|Keywords}{\v 
Insert_Key_words} function of the VDEs text Editor menu
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 **********************************************************/
\par CONSTANTS
\par id_edins_keywords = 1507
\par CLAUSES
\par \pard\plain \s16\fi-567\li851 \f11\fs20 {\b edit_command_handler(}EdWin,e_Menu(id_edins_keywords,_,_),b_false):-!,
\par \pard\plain \s35\li851\keep \f11\fs20 KeyWordListToView = [
\par \pard\plain \s38\li1701\keep \f11\fs20 "CLAUSES\\n",
\par "DATABASE\\n",
\par "DOMAINS\\n",
\par ...
\par "structure",
\par "reference"],
\par \pard\plain \s35\li851\keep \f11\fs20 Answer = {\f5 dlg_ListSelect(}"Key WORDS", KeyWordListToView, 0, SelectedName,_),
\par Answer = b_true,
\par CurPos = edit_GetPos(EdWin),
\par {\uldb\cf11 edit_PasteText} (EdWin,CurPos,SelectedName).
\par \pard\plain \s44\sa120 \f5\fs20 
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_CreateWrap}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_CreateWrap/13}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_CreateWrap; editor API}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }edit_CreateWrap/13
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\uldb\cf11 See also}{\v edit_Create_Predicates}\tab \tab {\ul\cf11 Portability}{\v Portability_VPI}\tab 
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 WINDOW {\b edit_CreateWrap(
\par }\pard \s33\qj\li284\keep\tx2268 WINTYPE\tab {\i WinType},
\par \pard \s33\qj\li284\keep\tx284\tx2268 RCT\tab {\i Rct},
\par STRING\tab {\i Title},
\par MENU\tab {\i Menu},
\par WINDOW\tab {\i ParentWin},
\par WSFLAGS\tab {\i Flags},
\par FONT\tab {\i Font},
\par BOOLEAN\tab {\i ReadOnly,}
\par BOOLEAN\tab {\i Indent,}
\par BOOLEAN\tab {\i Wrap,}
\par STRING\tab {\i InputStr},
\par ULONG\tab {\i InitPos,}
\par \pard\plain \s58\li284\sa120 \f5\fs20 EHANDLER\tab {\i Handler}{\b )
\par }\pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern\tab }(i,i,i,i,i,i,i,i,i,i,i,i,i){\b  }
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks
\par }\pard\plain \s44\sa120 \f5\fs20 {\b edit_CreateWrap() }create a Text Editor in you application program.
\par The editor created by this predicate, as opposed to the editor created by the {\b\uldb\cf11 edit_Create()}{\b\v edit_Create}{\b ,} is able to wrap the edited text in the Editor window, but it {\ul cannot highlight }Language tokens.
\par All arguments and functions, with the exception of the {\i Wrap} parameter{\i ,} are identical with those of the {\uldb\cf11 edit_Create()}{\v edit_Create}{\b  }predicate{\i . }When {\b edit_CreateWrap()} is called with {\i Wrap }equal to {\i b_true}
 then text will be wrapped within the Editor window, otherwise when {\i Wrap} is{\i  b_false} then text will not be wrapped. 
\par {\b Note. }It is{\ul  not possible} to switch {\i Wrap mode} in{\*\bkmkstart tmp}{\*\bkmkend tmp} an active editor. 
\par \pard\plain \s32\qj\sa120\keep\brdrb\brdrs\brdrw15\brsp20 \tx1276\tx2552\tx3402 \f5\fs20 {\b Argument\tab Description
\par }\pard\plain \s34\qj\fi-1276\li1276\tx1276 \f5\fs20 {\i WinType\tab }type of window: {\i w_TopLevel }or {\i w_Child.} If {\i w_Child }is used{\i  }Editor will not have the status line capability{\i 
\par Rct\tab }window rectangle{\i 
\par Title\tab }window title: file name{\i 
\par Menu\tab }menu{\i 
\par ParentWin\tab }parent window{\i 
\par Flags\tab }window flags: {\uldb\cf11  wsf_***}{\v Window_domains}{\i 
\par Font\tab }window font{\i 
\par ReadOnly\tab b_true }- view mode; {\i b_false }- edit mode{\i 
\par Indent\tab b_true }- sets the {\uldb\cf11 Autoindent}{\v Editor_Options} mode ; if {\i b_false }- then no indentation{\i 
\par Wrap\tab b_true }sets wrap mode on ; if {\i b_false }- then text will not be wrapped{\i 
\par InputStr\tab }input string{\i 
\par InitPos\tab }initial cursor position{\i 
\par EventHandler\tab }callback function which handles all editor events except for {\uldb\cf11 e_Create}{\v e_Create}, {\uldb\cf11 e_Destroy}{\v e_Destroy}, {\uldb\cf11 e_Update}{\v e_Update}{\i .} Using {\i EventHandler} you can impl
ement filters for almost all editor events. Thus, you can make controllable calls to the editor. The domain for this function is {\uldb\cf11 EHANDLER}{\v EHANDLER_VPI_DOMAIN}. If {\i EventHandler} function returns zero (or fails) when it{\i  }
handles the event, then the editor handler elaborates the event in its turn. Otherwise the editor handler does not elaborate the event.
\par \pard\plain \s52\li1276 \f5\fs20 {\b\ul Note.} By default, the editor window is destroyed when the editor handler receives the{\i  }{\uldb\cf11 e_CloseRequest}{\v e_CloseRequest} event.
\par {\b\ul Note.} The Editor {\ul never} receives the {\b e_CloseRequest} event if it is running in a dialog window
\par {\b\ul Note.} The Editor handles {\uldb\cf11 e_Menu}{\v e_Menu}( {\i Menu_tag}...) events for the following menu tags only:
\par \pard\plain \s49\fi-709\li1985 \f5\fs20 1060 - undo
\par 1061 - redo
\par 1063 - cut to the clipboard
\par 1064 - copy to the clipboard
\par 1065 - paste from the clipboard
\par 1066 - clear( delete block without copying it to the clipboard )
\par 1077 - search
\par 1078 - replace
\par 1079 - search again
\par 1081 - go to line
\par 1082 - go to position
\par 1085 - set editor font
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_CreateSubClass}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_CreateSubClass/9}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_CreateSubClass; editor API}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super {\*\bkmkstart edit_CreateSubClass}!{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }edit_CreateSubClass{\*\bkmkend edit_CreateSubClass}/9
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\uldb\cf11 See also}{\v edit_Create_Predicates}\tab \tab {\ul\cf11 Portability}{\v Portability_VPI} 
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 {\b edit_CreateSubClass(
\par }\pard \s33\qj\li284\keep\tx284\tx2268\tx3402 WINDOW\tab {\i WinHandle},
\par STRING\tab {\i Title},
\par FONT\tab {\i Font},
\par BOOLEAN\tab {\i ReadOnly,}
\par BOOLEAN\tab {\i Indent,}
\par BOOLEAN\tab {\i Wrap,}
\par STRING\tab {\i InputStr},
\par ULONG\tab {\i InitPos,}
\par \pard\plain \s58\li284\sa120\tx2268 \f5\fs20 EHANDLER\tab {\i EventHandler}{\b )
\par }\pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern\tab }(i,i,i,i,i,i,i,i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks
\par }\pard\plain \s44\sa120 \f5\fs20 {\b edit_CreateSubClass() }creates an editor in an existing window {\i WinHandle}.
\par The valid types of window{\i  WinHandle }are: w_TopLevel, w_Child, w_Task, and wc_Custom.
\par This predicate is usually applied to custom controls.
\par The editor created by this predicate, is similar to the editor created by the {\b\uldb\cf11 edit_CreateWrap()}{\b\v edit_CreateWrap}{\b ,} it able to wrap the edited text in the Editor window, but it {\ul cannot} {\uldb\cf11 highlight}{\v 
edit_SetColoring_2} language tokens.
\par {\b Note. }It is{\ul  not possible} to switch {\i Wrap mode} in an active editor. 
\par \pard\plain \s32\qj\sa120\keep\brdrb\brdrs\brdrw15\brsp20 \tx1276\tx2552\tx3402 \f5\fs20 {\b Argument\tab Description
\par }\pard\plain \s34\qj\fi-1276\li1276\tx1276 \f5\fs20 {\i WinHandle\tab }the handle of the existing window in which the editor is created{\i 
\par Title\tab }window title: file name{\i 
\par Font\tab }window font{\i 
\par ReadOnly\tab b_true }- view mode; {\i b_false }- edit mode{\i 
\par Indent\tab b_true }- sets the {\uldb\cf11 Autoindent}{\v Editor_Options} mode ; if {\i b_false }- then no indentation{\i 
\par Wrap\tab b_true }sets wrap mode on ; if {\i b_false }- then text will not be wrapped{\i 
\par InputStr\tab }input string{\i 
\par InitPos\tab }initial cursor position{\i 
\par EventHandler\tab }callback function which handles all editor events except for {\uldb\cf11 e_Create}{\v e_Create}, {\uldb\cf11 e_Destroy}{\v e_Destroy}, {\uldb\cf11 e_Update}{\v e_Update}{\i .} Using {\i EventHandler}
 you can implement filters for almost all editor events. Thus, you can make controllable calls to the editor. The domain for this function is {\uldb\cf11 EHANDLER}{\v EHANDLER_VPI_DOMAIN}. If {\i EventHandler} function returns zero (or fails) when it{\i  
}handles the event, then the editor handler elaborates the event in its turn. Otherwise the editor handler does not elaborate the event.
\par \pard\plain \s52\li1276 \f5\fs20 {\b\ul Note.} By default, the editor window is destroyed when the editor handler receives the{\i  }{\uldb\cf11 e_CloseRequest}{\v e_CloseRequest} event.
\par {\b\ul Note.} The Editor {\ul never} receives the {\b e_CloseRequest} event if it is running in a dialog window
\par {\b\ul Note.} The Editor handles {\uldb\cf11 e_Menu}{\v e_Menu}( {\i Menu_tag}...) events for the following menu tags only:
\par \pard\plain \s49\fi-709\li1985 \f5\fs20 1060 - undo
\par 1061 - redo
\par 1063 - cut to the clipboard
\par 1064 - copy to the clipboard
\par 1065 - paste from the clipboard
\par 1066 - clear( delete block without copying to the clipboard )
\par 1077 - search
\par 1078 - replace
\par 1079 - search again
\par 1081 - go to line
\par 1082 - go to position
\par 1085 - set editor font
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Newer fails.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s49\fi-851\li851\tx851 \f5\fs20 {\ul\cf11 6001}{\v VPI_Error_6001}\tab Invalid window type
\par \pard\plain \s44\sa120 \f5\fs20 If the window's{\i  WinHandle} type is not w_TopLevel, w_Child, w_Task or wc_Custom.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_CreateHyper}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_CreateHyper/13}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_CreateHyper; HYPER_EVENT; editor API}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Visual_Prolog_Text_Editor_for_Programmers')")} }edit_CreateHyper/13
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\uldb\cf11 See also}{\v edit_Create_Predicates}\tab \tab {\ul\cf11 Portability}{\v Portability_VPI} 
\par \pard\plain \s33\qj\keep\tx284\tx3402 \f5\fs20 WINDOW {\b edit_CreateHyper(
\par }\pard \s33\qj\li284\keep\tx2268\tx3402 WINTYPE\tab {\i WinType},
\par \pard \s33\qj\li284\keep\tx284\tx2268\tx3402 RCT\tab {\i Rct},
\par STRING\tab {\i Title},
\par MENU\tab {\i Menu},
\par WINDOW\tab {\i ParentWin},
\par WSFLAGS\tab {\i Flags},
\par FONT\tab {\i Font},
\par BOOLEAN\tab {\i ReadOnly,}
\par BOOLEAN\tab {\i Indent,}
\par BOOLEAN\tab {\i Wrap,}
\par STRING\tab {\i InputStr},
\par ULONG\tab {\i InitPos,}
\par \pard\plain \s58\li284\sa120\tx2268 \f5\fs20 EHANDLER\tab {\i EventHandler}{\b )
\par }\pard\plain \s47\fi-1701\li1701\sa120 \f5\fs20\lang2057 {\b Flow pattern\tab }(i,i,i,i,i,i,i,i,i,i,i,i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks
\par }\pard\plain \s44\sa120 \f5\fs20 {\b edit_CreateHyper() }creates a {\uldb\cf11 Hypertext Editor}{\v PDC_Help_Development_System} in an application program.
\par Predicate {\b edit_CreateHyper()} has the same arguments as {\uldb\cf11 edit_CreateWrap()}{\v edit_CreateWrap}{\b  }predicate, but provides the additional functionality of maintaining hypertext links and fields. 
\par The editor created by this predicate, as opposed to the editor created by the {\b\uldb\cf11 edit_Create()}{\b\v edit_Create}{\b ,} is able{\cs57\v\fs16 {\*\atnid AK}{\*\atnauthor Andrew Koutchoukov}\chatn {\*\annotation \pard\plain \s53 \f5\fs20 
{\field{\*\fldinst PAGE \\# "'Page: '#'\line '"{\cs57\fs16   }}{\fldrslt }}{\cs57\fs16 \chatn }is able to wrap}} to wrap the edited text in the Editor window (like {\b edit_CreateWrap()}). It does not highlight the language tokens.
\par It is{\ul  not possible} to switch {\i Wrap mode} in an active editor. 
\par To handle hyperfield links you must use the special domain HYPER_EVENT and the corresponding constants.
\par 
\par \pard\plain \s32\qj\sa120\keep\brdrb\brdrs\brdrw15\brsp20 \tx1276\tx2552\tx3402 \f5\fs20 {\b Argument\tab Description
\par }\pard\plain \s34\qj\fi-1276\li1276\tx1276 \f5\fs20 {\i WinType\tab }type of window: {\i w_TopLevel }or {\i w_Child.} If {\i w_Child }is used{\i  }Editor will not have the status line capability{\i 
\par Rct\tab }window rectangle{\i 
\par Title\tab }window title: file name{\i 
\par Menu\tab }menu{\i 
\par ParentWin\tab }parent window{\i 
\par Flags\tab }window flags: {\uldb\cf11  wsf_***}{\v Window_domains}{\i 
\par Font\tab }window font{\i 
\par ReadOnly\tab b_true }- view mode; {\i b_false }- edit mode{\i 
\par Indent\tab b_true }- sets the {\uldb\cf11 Autoindent}{\v Editor_Options} mode ; if {\i b_false }- then no indentation{\i 
\par Wrap\tab }when{\i  b_true }sets wrap mode on ; if {\i b_false }- then text will not be wrapped{\i 
\par InputStr\tab }input string{\i 
\par InitPos\tab }where to place cursor at entry{\i 
\par EventHandler\tab }callback function which handles all editor events except for {\uldb\cf11 e_Create}{\v e_Create}, {\uldb\cf11 e_Destroy}{\v e_Destroy}, {\uldb\cf11 e_Update}{\v e_Update}{\i .} Using {\i EventHandler}
 you can implement filters for almost all editor events. Thus, you can make controllable calls to the editor. The domain for this function is {\uldb\cf11 EHANDLER}{\v EHANDLER_VPI_DOMAIN}. If {\i EventHandler} function returns zero (or fails) when it{\i  
}handles the event, then the editor handler elaborates the event in its turn. Otherwise the editor handler does not elaborate the event.
\par \pard\plain \s52\li1276 \f5\fs20 {\b\ul Note.} By default, the editor window is destroyed when the editor handler receives the{\i  }{\uldb\cf11 e_CloseRequest}{\v e_CloseRequest} event.
\par {\b\ul Note.} The Editor {\ul never} receives the {\b e_CloseRequest} event if it is running in a dialog window
\par {\b\ul Note.} The Editor handles {\uldb\cf11 e_Menu}{\v e_Menu}( {\i Menu_tag}...) events for the following menu tags only:
\par \pard\plain \s49\fi-709\li1985 \f5\fs20 1060 - undo
\par 1061 - redo
\par 1063 - cut to the clipboard
\par 1064 - copy to the clipboard
\par 1065 - paste from the clipboard
\par 1066 - clear( delete block without copying it to the clipboard )
\par 1077 - search
\par 1078 - replace
\par 1079 - search again
\par 1081 - go to line
\par 1082 - go to position
\par 1085 - set editor font
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b\ul How to handle hypertext fields and links?
\par }\pard\plain \s44\sa120 \f5\fs20 In this version of {\b edit_CreateHyper()} predicate the {\i EventHandler }is the only callback function which handles editor events. Hyperfield handling messages are sent as {\uldb\cf11 e_User}{\v e_User} events like: 

\par \pard\plain \s17\li284\keep \f11\fs20 {\b e_User(}e_RemoveLink, LongVal{\b )
\par }\pard\plain \s43 \f5\fs20 or
\par \pard\plain \s17\li284\keep \f11\fs20 {\b e_User(}e_FollowLink, LongVal{\b )
\par }\pard\plain \s46\sb120\sa120 \f5\fs20 Here {\i LongVal}  points to an object from the  HYPER_EVENT domain which contains the selected hypertext field contents. Message identifiers{\i  e_RemoveLink} and {\i e_FollowLink,} and the domain HYPER_EVENT are
 defined in the file EDITOR.DOM as follows:{\i 
\par }\pard\plain \s17\keep \f11\fs20 GLOBAL DOMAINS
\par \pard \s17\li284\keep HYPER_EVENT=
\par \pard\plain \s35\li851\keep \f11\fs20 removeLink(STRING);
\par followLink(STRING)
\par \pard\plain \s17\keep \f11\fs20 CONSTANTS
\par \pard \s17\li284\keep e_RemoveLink = 10002
\par e_FollowLink = 10003
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Note that there are no definitions for hyperfield creation, because this action {\ul cannot} be initiated from the  editor (but from menus ...).
\par \pard\plain \s44\sa120 \f5\fs20 The typical clauses for handling this event will look like this:
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 PREDICATES
\par \pard\plain \s17\keep \f11\fs20 hyper_handler : EHANDLER
\par \pard\plain \s39\sb120\keep\tx851\tx1701\tx2552\tx3402\tx4253\tx5103 \f11\fs20 CLAUSES
\par \pard\plain \s17\keep \f11\fs20 hyper_handler(_Win, e_User(e_RemoveLink, LongVal),0):-!,
\par \pard\plain \s35\li284\keep\tx4536 \f11\fs20 Term = cast(HYPER_EVENT, LongVal),\tab % To convert the domain
\par Term = removeLink(HyperID).\tab % To access the values
\par \pard\plain \s17\keep \f11\fs20 hyper_handler(_Win, e_User(e_RemoveLink, LongVal),b_true):-!,
\par \pard\plain \s35\li284\keep\tx4536 \f11\fs20 Term = cast(HYPER_EVENT, LongVal),\tab % To convert the domain
\par Term = followLink(HyperID).\tab % To access the values
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s28\sa120 \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} Portability_VPI}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} Portability VPI}} VPI Portability
\par \pard\plain \s15\qj\sa120\tx851\tx1701\tx2552\tx3402 \f5\fs20 All {\uldb\cf11 VPI}{\v The_VPI} platforms
\par \pard\plain \s46\qc\sb120\sa120 \f5\fs20 \page {\b\fs24 NEW
\par }\pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_ReverseCase_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_ReverseCase/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_ReverseCase}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Block_Manipulating_Predicates')")} }edit_ReverseCase/1
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_ReverseCase}(WINDOW {\i WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Changes all uppercase letters to lowercase letters and all lowercase letters to uppercase letters in the selected block in the Editor window {\i WinHandle}
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_UpperCase_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_UpperCase/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_UpperCase}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Block_Manipulating_Predicates')")} }edit_UpperCase/1
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_UpperCase}(WINDOW {\i WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Changes selected text to all uppercase letters in the Editor window {\i WinHandle}
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_LowerCase_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_LowerCase/1}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_LowerCase}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Block_Manipulating_Predicates')")} }edit_LowerCase/1
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_LowerCase}(WINDOW {\i WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Changes selected text to all lowercase letters in the Editor window {\i WinHandle}
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_StatusLineShow_2}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_StatusLineShow/2}} {\cs26\super K
{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super K} edit_StatusLineShow}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }edit_StatusLineShow/2
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_StatusLineShow}(WINDOW {\i WinHandle}, BOOLEAN {\i HideShow})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Hide ({\i HideShow} = b_false) or show ({\i HideShow} = b_true) the status line at the top of the specified Editor window {\i WinHandle}. 
\par The status line shows the insertion point's line number and position (the number of characters from the left margin to the insertion point, including spaces), and whether the editor is in insert (overwrite) and indent (noindent) mode.
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_CaretShow_2}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_CaretShow/2}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_CaretShow}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }edit_CaretShow/2
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_CaretShow}(WINDOW {\i WinHandle}, BOOLEAN {\i HideShow})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Hide ({\i HideShow} = b_false) or show ({\i HideShow} = b_true) the insertion point's position (A vertical blinking bar that shows your location in the text).
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SetTitle_2}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SetTitle/2}} {\cs26\super K{\footnote 
\pard\plain \s25 \f5\fs20 {\cs26\super K} edit_SetTitle}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !}
 CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }edit_SetTitle/2
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_SetTitle}(WINDOW {\i WinHandle}, STRING {\i Title})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Determines the string {\i Title} that will be displayed in the title bar of the specified Editor window {\i WinHandle.}
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Suspend_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Suspend/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_Suspend}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }
edit_Suspend/1
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Suspend}(WINDOW {\i WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Suspends the client area updating in the specified Editor window {\i WinHandle}. Call {\uldb\cf11 edit_Resume/1}{\v edit_Resume_1} to resume the updating.
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s30\sb60\sa60\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_Resume_1}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_Resume/1}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} edit_Resume}} {\cs26\super +{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super +} EDITOR}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Editor_Modes_Handling')")} }
edit_Resume/1
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_Resume}(WINDOW {\i WinHandle})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 Resumes the client area updating in the specified Editor window {\i WinHandle}. Used after {\uldb\cf11 edit_Suspend/1}{\v edit_Suspend_1}
\par {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s46\qc\sb120\sa120 \f5\fs20 \page {\b\fs24 DELETED\page }{\b\ul Manipulating large editing texts:}
\par \pard\plain \s42\keep \f5\fs20 {\b\uldb\cf11 edit_LoadFile}{\v edit_LoadFile_2}(WINDOW{\i  WinHandle, }STRING Filename) - (i,i) 
\par \pard\plain \s58\li284\sa120 \f5\fs20 This predicate loads the contents on a file {\i FileName} into the {\i WinHandle} editor window{\i .}
\par \pard\plain \s42\keep \f5\fs20 {\b\uldb\cf11 edit_SaveFile}{\v edit_SaveFile_2}(WINDOW {\i WinHandle,} STRING Filename) - (i,i) 
\par \pard\plain \s58\li284\sa120 \f5\fs20 This predicate saves the text of Edit window {\i WinHandle} editor in the file {\i FileName.}
\par This predicate saves the text being edited in the{\i  WinHandle} editor window in the file {\i FileName.}
\par \pard\plain \s44\sa120 \f5\fs20 {\b Attention! } Temporary these two predicates are {\i not} supplied with Visual Prolog.
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_LoadFile_2}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_LoadFile/2}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} Don't supported at the moment }} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Access_to_Entire_Editing_Text')")} }edit_LoadFile/2
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_LoadFile}(WINDOW{\i  WinHandle,} STRING {\i FileName})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This predicate loads the contents of the file {\i FileName} into the {\i WinHandle} editor window{\i .}
\par {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 Remember that this predicate clears {\b Undo/Redo} buffers for the editor window {\i WinHandle}! {\b 
\par Attention! } Temporary this predicate is not supplied with Visual Prolog.
\par All declarations needed for using of this predicate are in the files EDITOR.DOM and EDITOR.PRE.
\par See also: {\uldb\cf11 edit_GetText/1}{\v edit_GetText_1}, {\uldb\cf11 edit_GetText/3}{\v edit_GetText_3}, {\uldb\cf11 edit_PasteStr/2}{\v edit_PasteStr_2 }
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s23\sa80\keepn \b\f5\cf2 \page {\cs26\super #{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super #} edit_SaveFile_2}} {\cs26\super ${\footnote \pard\plain \s25 \f5\fs20 {\cs26\super $} edit_SaveFile/2}} {\cs26\super K{\footnote \pard\plain 
\s25 \f5\fs20 {\cs26\super K} Don't supported at the moment}} {\cs26\super !{\footnote \pard\plain \s25 \f5\fs20 {\cs26\super !} CBB("Overview_btn","JI(`VIP.HLP',`Access_to_Entire_Editing_Text')")} }edit_SaveFile/2
\par \pard\plain \s29\sb40\sa40\keepn \b\f5\fs16 {\ul\cf11 Portability}{\v Portability_VPI}
\par \pard\plain \s47\fi-851\li851\sa120 \f5\fs20\lang2057 {\b edit_SaveFile}(WINDOW {\i WinHandle,} STRING {\i Filename})
\par \pard \s47\fi-1701\li1701\sa120 {\b Flow pattern}\tab (i,i)
\par \pard\plain \s46\sb120\sa120 \f5\fs20 This predicate saves the contents of the{\i  WinHandle} editor window to file {\i FileName.}
\par \pard\plain \s44\sa120 \f5\fs20 {\b Attention! } Temporary this predicate is not supplied with Visual Prolog.
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Remarks}
\par \pard\plain \s44\sa120 \f5\fs20 All declarations needed for using of this predicate are in the files EDITOR.DOM and EDITOR.PRE.
\par See also: {\uldb\cf11 edit_GetText/1}{\v edit_GetText_1}, {\uldb\cf11 edit_GetText/3}{\v edit_GetText_3}, {\uldb\cf11 edit_PasteStr/2}{\v edit_PasteStr_2 }
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Fail}
\par \pard\plain \s44\sa120 \f5\fs20 Never fails
\par \pard\plain \s46\sb120\sa120 \f5\fs20 {\b Errors}
\par \pard\plain \s44\sa120 \f5\fs20 No errors
\par \pard\plain \s35\qj\fi-1701\li1701\keep\tx1701 \f11\fs20 
\par } 