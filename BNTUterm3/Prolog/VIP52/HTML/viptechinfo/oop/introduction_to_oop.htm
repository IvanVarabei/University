<html>

<head>
<title>Introduction to OOP</title>
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta name="Microsoft Theme" content="prolog2 000, default">
<meta name="Microsoft Border" content="t, default">
</head>

<body bgcolor="#FFFFFF" text="#333333" link="#0000FF" vlink="#008080" alink="#00FFFF"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="verdana, Arial, Helvetica">
<script language="JavaScript">var toRoot="../../";</script>
<script language="JavaScript" src="../../vipmenu/js/pdcbar.js"></script>
<script language="JavaScript" src="../../vipmenu/js/pdcbardef.js"></script>


<!--mstheme--></font><table class="scrElem" border="0" width="853" height="122">
  <tr>
     <td background="../../vipmenu/images/topbar-alt.gif" nowrap valign="top" ><!--mstheme--><font face="verdana, Arial, Helvetica">
                  <blockquote>
                    <blockquote>
                      <blockquote>
                        <blockquote>
                          <blockquote>
                            <blockquote>
                              <blockquote>
                  <p>
                      <strong>
                    
                      <font size="2">
                    
                      <br>
                      <br>
                      <br>
                      <br>
                      </font>
                        <a href="../../vipmenu/navigationbar.htm">
                      <font size="2"><br>
                      Navigation&nbsp; without Java Scripts</font></a></strong>
                 </p>
                              </blockquote>
                            </blockquote>
                          </blockquote>
                        </blockquote>
                      </blockquote>
                    </blockquote>
                  </blockquote>
     <!--mstheme--></font></td>
  </tr>
</table><!--mstheme--><font face="verdana, Arial, Helvetica">
</html>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top"><!--mstheme--><font face="verdana, Arial, Helvetica">

<h1><!--mstheme--><font color="#000000"><b>Introduction to the Object Oriented Programming (OOP)<!--mstheme--></font></h1>
</b>Four criteria have to be fulfilled, before a system can be considered to be
object orientated:
<!--mstheme--></font><!--msthemelist--><table border="0" cellpadding="0" cellspacing="0" width="100%">
  <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="#encapsulation">Encapsulation</a>
  <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="#objects and classes">Classes</a>
  <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="#inheritance">Inheritance</a>
  <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="#identity">Identity</a>
<!--msthemelist--></table msthemelist><!--mstheme--><font face="verdana, Arial, Helvetica">
<h2><!--mstheme--><font color="#000000"><b><a name="Encapsulation">Encapsulation</a><!--mstheme--></font></h2>
</b>The importance of encapsulation and modularity is well known. Encapsulation
helps building more structured and readable programs, because objects are
treated like black boxes. Look at a complex problem, find a part, which you can
declare and describe. Encapsulate it into an object, construct an interface and
continue so, until you have declared all the sub-problems. When you have
encapsulated the objects of the problem, and ensured, that they work correctly,
you can abstract from them.
<p>OOP is also sometimes known as data-driven programming. You can actually let
objects themselves do the work for you. They contain methods, which are invoked
when objects are created, deleted, and whenever you call them. Methods can call
methods of other objects.
<h2><!--mstheme--><font color="#000000"><b><a name="Objects and Classes">Objects and Classes</a><!--mstheme--></font></h2>
</b>The way data is stored in traditional programming languages is usually hard
to grasp for humans and not suited for modeling. Objects are much easier to work
with, because they are closer to the way humans understand real-world objects
and in fact objects themselves are a tool for modeling.
<p>Objects are far more complex data structure than lists. At the basic level an
object is a declaration of coherent data and predicates, which can work on these
data. In OOP-terminology these predicates are called methods. Each class
represents a unique set of objects and operations (methods) available to create,
manipulate, and destroy such objects.
<p>A class is a definition of an object. An instance is an actual occurrence of
this object. Normally you can define as many instances of a class as you like.
<p>For example, if a class &quot;automobile&quot; includes two member-facts:
&quot;owner&quot; and &quot;brand&quot;, actual instances of the class can be
the following:
<blockquote>
  <!--mstheme--></font><table border="0" width="80%" style="border-style: solid">
    <tr>
      <td width="50%" align="center" style="border-style: double"><!--mstheme--><font face="verdana, Arial, Helvetica"><b>Actual
        Instance</b><!--mstheme--></font></td>
      <td width="50%" align="center" style="border-style: double"><!--mstheme--><font face="verdana, Arial, Helvetica"><b>Owner Brand</b><!--mstheme--></font></td>
    </tr>
    <tr>
      <td width="50%" align="center" style="border-style: double"><!--mstheme--><font face="verdana, Arial, Helvetica">Class instance
        1<!--mstheme--></font></td>
      <td width="50%" align="center" style="border-style: double"><!--mstheme--><font face="verdana, Arial, Helvetica">Beatrice
        Morris Mascot<!--mstheme--></font></td>
    </tr>
    <tr>
      <td width="50%" align="center" style="border-style: double"><!--mstheme--><font face="verdana, Arial, Helvetica">Class instance
        2<!--mstheme--></font></td>
      <td width="50%" align="center" style="border-style: double"><!--mstheme--><font face="verdana, Arial, Helvetica">John Rolls
        Royce<!--mstheme--></font></td>
    </tr>
  </table><!--mstheme--><font face="verdana, Arial, Helvetica">
</blockquote>
<h2><!--mstheme--><font color="#000000"><b><a name="Inheritance">Inheritance</a><!--mstheme--></font></h2>
</b>OOP is a powerful modeling tool. Objects can be defined on the abstraction
level that best suits a problem representation. From this level child-objects
can be defined on lower levels, and parent-objects on higher. An object can
inherit data and methods from objects at higher levels. Objects are thus an easy
way to make very modular programs.
<h2><!--mstheme--><font color="#000000"><b><a name="Identity">Identity</a><!--mstheme--></font></h2>
</b>Every object is unique: objects have a changeable state, and since the state
of the objects can be observed by means of their member predicates an object is
only identical to itself. I.e. even if the states of two objects are identical,
the objects are not identical, because we can change the state of one object
without changing the other, and then the objects no longer have identical
states.
<p>We never have direct access to an object, we always access an object by means
of a reference to an object and while an object is only identical to itself, we
can have many references to the same object. Thus, the same object can be
accessed through many different references.
<p>Classes are also unique; they are identified by their names. Two classes
cannot have the same name in the same program.<b>
<h5><!--mstheme--><font color="#000000"><a href="toc.htm">See also</a><!--mstheme--></font></h5>
</b>
<!--msthemeseparator--><p align="center"><img src="../_themes/prolog2/modhorsd.gif" width="300" height="10"></p>
<h3><!--mstheme--><font color="#000000"><b>References<!--mstheme--></font></h3>
</b>
<ol>
  <li>Meyer, Bertrand :&quot;Object-oriented Software construction&quot;
    Prentice Hall 1988
  <li>Gamma, Erich, Helm, Richard et. al.: &quot;Design Patterns&quot;, Addison
    Wesley 1994
</ol>
&nbsp;

<!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table></body>

</html>
