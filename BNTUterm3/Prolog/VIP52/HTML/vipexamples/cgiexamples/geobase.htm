<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>

<head>
<title>Geobase - A Geographical Database</title>
<meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<meta NAME="GENERATOR" CONTENT="Microsoft FrontPage 3.0">




<meta name="Microsoft Theme" content="prolog2 000, default">
<meta name="Microsoft Border" content="t, default">
</head>

<body bgcolor="#FFFFFF" text="#333333" link="#0000FF" vlink="#008080" alink="#00FFFF"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="verdana, Arial, Helvetica">
<script language="JavaScript">var toRoot="../../";</script>
<script language="JavaScript" src="../../vipmenu/js/pdcbar.js"></script>
<script language="JavaScript" src="../../vipmenu/js/pdcbardef.js"></script>


<!--mstheme--></font><table class="scrElem" border="0" width="853" height="122">
  <tr>
     <td background="../../vipmenu/images/topbar-alt.gif" nowrap valign="top" ><!--mstheme--><font face="verdana, Arial, Helvetica">
                  <blockquote>
                    <blockquote>
                      <blockquote>
                        <blockquote>
                          <blockquote>
                            <blockquote>
                              <blockquote>
                  <p>
                      <strong>
                    
                      <font size="2">
                    
                      <br>
                      <br>
                      <br>
                      <br>
                      </font>
                        <a href="../../vipmenu/navigationbar.htm">
                      <font size="2"><br>
                      Navigation&nbsp; without Java Scripts</font></a></strong>
                 </p>
                              </blockquote>
                            </blockquote>
                          </blockquote>
                        </blockquote>
                      </blockquote>
                    </blockquote>
                  </blockquote>
     <!--mstheme--></font></td>
  </tr>
</table><!--mstheme--><font face="verdana, Arial, Helvetica">
</html>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top"><!--mstheme--><font face="verdana, Arial, Helvetica">

<h1><!--mstheme--><font color="#000000">Geobase - A Geographical Database <!--mstheme--></font></h1>

<blockquote>
  <p>Geobase demonstrates a natural language interface to a database on U.S. geography
  written in Visual Prolog.. It shouldn't be too difficult to modify it to your own
  purposes, so that this will be the first step on the way to designing natural language
  interfaces to your programs. As all Prolog programs, Geobase is highly extendible. Try
  yourself to extend Geobase rule base, so that Geobase can manage more sentences. It isn't
  that difficult! Geobase allows you to query its database in English rather than
  &quot;computerese&quot;-commands. </p>
  <p>Geobase is by no means a complete geographical database of the United States, nor is it
  a complete English language interface. If you plan to write similar routines in your own
  programs, studying how the code is put together and how certain routines are implemented
  should help. Again, we urge you to modify Geobase to be a more complete program. This will
  not only sharpen your Visual Prolog programming skills, but it will also keep you off the
  streets late at night.</p>
  <p>You can access the information stored in the Geobase database with natural language (in
  this case, the natural language is English). The database supplied with Geobase is built
  upon the geography of the United States. You can enter queries (questions) in English and
  Geobase will parse (translate) these questions into a form that Visual Prolog understands.
  Geobase will give answers to the queries to the best of its knowledge. The Geobase
  application demonstrates one of the important areas where Visual Prolog shines:
  understanding natural language.</p>
  <p>One of the most exciting features of Geobase is that you can examine and edit the
  source code. The code of Geobase is fully documented; you can take any section and modify
  it to suit your needs. Take a look at the database and modify it to include your home
  town! Soon you'll be on the road to creating your own natural language interfaces. </p>
</blockquote>

<h4><!--mstheme--><font color="#000000">Sample queries:<!--mstheme--></font></h4>

<!--mstheme--></font><!--msthemelist--><table border="0" cellpadding="0" cellspacing="0" width="100%">
  <p><i>What are the cities of New York?<br>
  What is the highest mountain in California?<br>
  What are the name of the states which border New Mexico?<br>
  Which rivers run through the state that border the state with the capital Olympia?</i></p>
<!--msthemelist--></table msthemelist><!--mstheme--><font face="verdana, Arial, Helvetica">

<p><br>
<b>Execute</b> the program as a CGI script by pressing the &quot;Run Query&quot; button on
the form below </p>

<!--mstheme--></font><!--msthemelist--><table border="0" cellpadding="0" cellspacing="0" width="100%">
  <form METHOD="POST" ACTION="http://vip.pdc.dk/vipexamples/cgiexamples/bin/geobase.exe">
    <p><br>
    <input TYPE="SUBMIT" VALUE="Run Query">&nbsp;&nbsp;<input TYPE="text" SIZE="40" NAME="query" VALUE="what are the rivers in New York">&nbsp;<input TYPE="SUBMIT" VALUE="Run Query"><br>
    </p>
  </form>
  <p>Show <a href="src/geobase.htm">Source</a> for the Geobase-application.</p>
  <p>Show <a href="src/geobasecgisource.htm">Source</a> for the Geobase-application incl.
  cgi-support.</p>
  <p>&nbsp;</p>
<!--msthemelist--></table msthemelist><!--mstheme--><font face="verdana, Arial, Helvetica">

<h4><!--mstheme--><font color="#000000">Some of the words that Geobase &quot;knows&quot;<!--mstheme--></font></h4>

<!--mstheme--></font><!--msthemelist--><table border="0" cellpadding="0" cellspacing="0" width="100%">
  <blockquote>
    <!--mstheme--></font><table BORDER="1" bordercolordark="#669999" bordercolorlight="#CCFFFF">
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica"><b>Nouns</b><!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica"><b>Comparatives</b><!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica"><b>Relatives</b><!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">area<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">biggest<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">above<!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">capital<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">greatest<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">bigger<!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">city<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">highest<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">greater<!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">lake<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">least<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">less<!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">mountain<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">lowest<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">longer<!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">point<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">maximum<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">more<!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">population<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">minimum<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">over<!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">river<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">shortest<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">shorter<!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">road<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">&nbsp;<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">smaller<!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">river<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">&nbsp;<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">under<!--mstheme--></font></td>
      </tr>
      <tr>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">state<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">&nbsp;<!--mstheme--></font></td>
        <td><!--mstheme--><font face="verdana, Arial, Helvetica">&nbsp;<!--mstheme--></font></td>
      </tr>
    </table><!--mstheme--><font face="verdana, Arial, Helvetica">
  </blockquote>
<!--msthemelist--></table msthemelist><!--mstheme--><font face="verdana, Arial, Helvetica">

<h2><!--mstheme--><font color="#000000">Examining Geobase<!--mstheme--></font></h2>

<blockquote>
  <p>The database contains the following information:</p>
  <p>Information about states:</p>
  <ol>
    <li>Area of the state in square kilometers</li>
    <li>Population of the state in citizens</li>
    <li>Capital of the state</li>
    <li>Which states border a given state</li>
    <li>Rivers in the state</li>
    <li>Cities in the state</li>
    <li>Highest and lowest point in the state in meters</li>
  </ol>
  <p>Information about rivers: </p>
  <ol>
    <li>Length of river in kilometers</li>
  </ol>
  <p>Information about cities: </p>
  <ol>
    <li>Population of the city in citizens</li>
  </ol>
  <p>Try to ask a few random questions. If Geobase doesn't understand a question, it will
  tell you the word it can't parse.Take a look at the following sample queries.</p>
  <!--mstheme--></font><!--msthemelist--><table border="0" cellpadding="0" cellspacing="0" width="100%">
    <!--msthemelist--><tr><td valign="top" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><i>What are the states?</i><!--mstheme--></font><!--msthemelist--></td></tr>
    <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><i>What are the cities of New York?</i><!--mstheme--></font><!--msthemelist--></td></tr>
    <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><i>What is the highest mountain in California?</i><!--mstheme--></font><!--msthemelist--></td></tr>
    <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><i>What are the names of the states which border New Mexico?</i><!--mstheme--></font><!--msthemelist--></td></tr>
    <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><i>Which rivers run through the state that border the state with the capital Olympia?</i><!--mstheme--></font><!--msthemelist--></td></tr>
  <!--msthemelist--></table msthemelist><!--mstheme--><font face="verdana, Arial, Helvetica">
  <p>The language is defined in the file GEOBASE.LAN, and the database is defined in
  GEOBASE.DBA.</p>
  <p>Be imaginative! Geobase will understand many English sentences, but occasionally you
  will find a sentence that Geobase simply does not recognize. This is the dilemma of a
  natural language interface. If you find a question, you feel Geobase should be able to
  answer but can't, you will need to improve Geobase so that it understands the query! </p>
</blockquote>

<h2><!--mstheme--><font color="#000000">The Idea Behind Geobase<!--mstheme--></font></h2>

<blockquote>
  <p>Geobase illustrates one way of implementing a natural language interface to a database.
  However, developing a complete natural language interface to a database is a very
  complicated task, as natural languages are far more complex than programming languages.
  There are far more words in the natural language, and natural languages have difficult
  ambiguities. But Visual Prolog is extremely well suited for natural language processing,
  because the backtracking mechanism can be used to handle ambiguities.</p>
  <p>In Geobase the stored data is a USA geographical database. However, you could use the
  same approach for other types of data.</p>
  <p>The key idea behind Geobase is simple: The user views the database as a network of
  entities connected by associations. This is known as an entity association network. The
  entities are the items stored in the database. In Geobase the entities are states, cities,
  capitals of states, rivers, lakes, etc. The associations are words that connect the
  entities in queries. For example:</p>
  <p>Cities in the state of California. Here the two entities, cities and state, are
  connected by the association in. The word &quot;the&quot; is just ignored here, and
  California is regarded as an actual constant for the state entity.</p>
  <p>Geobase is designed to accept simple English. This means that, rather than worrying
  whether a sentence is grammatically correct, Geobase tries to extract the meaning by
  attempting to match the user's query with the entity association network.</p>
  <p>Queries can be combined to form rather complex queries. For example:</p>
  <blockquote>
    <p><i>which rivers run through states that border the state with the capital Austin?</i></p>
  </blockquote>
  <p>In order to make the query match the entity association network, Geobase must simplify
  the&nbsp; various forms of the query. This occurs while Geobase &quot;parses&quot; the
  query.</p>
  <p>The first step is to ignore certain words, such as:</p>
  <blockquote>
    <p><i>which, is, are, the, tell, me, what, give, as, that, please to, how, many, live,
    lives, living, there, do, does</i></p>
  </blockquote>
  <p>This step makes the query look like this: </p>
  <blockquote>
    <p><i>rivers run through states border state with capital Austin?</i></p>
  </blockquote>
  <p>The next step is to find the internal names for entities and associations. Entities can
  have synonyms, and the query can use plural forms of the entity names. Associations can
  consist of several words, and they can also have synonyms. After these conversions, the
  query looks like this: </p>
  <blockquote>
    <p><i>river in state border state with capital Austin?</i></p>
  </blockquote>
  <p>Geobase can now classify the words as either entities or associations and group the
  query into subqueries (E=entity, A=association, C=constant):</p>
  <blockquote>
    <p><i>river in state border state with capital Austin?</i></p>
  </blockquote>
  <p><i>E A (E A (E A E C))</i></p>
  <p>Geobase can then evaluate the query by first finding the name of the state with the
  capital Austin, then finding all the states that border this state, and finally looking up
  which rivers run through these states. </p>
</blockquote>

<h2><!--mstheme--><font color="#000000">Adapting the Geobase Idea<!--mstheme--></font></h2>

<blockquote>
  <p>Geobase is a natural language query interface to an existing database. You can adapt
  the Geobase mechanisms to your own natural language query interface; we explain how in
  this section.</p>
  <h3><!--mstheme--><font color="#000000">Create Your Database<!--mstheme--></font></h3>
  <p>The first thing you need to do is to create your database. How the database is stored
  or was created, has nothing to do with Geobase. You can use internal database sections or
  Visual Prolog's external database system, or you could even access some other database
  files by means of the Visual Prolog Toolbox. Geobase accesses the actual database through
  the predicates (db) and b(ent).</p>
  <p>For simplicity, the geographical database is stored in an internal database section,
  which you can load from disk by calling the (consult) predicate. Here are some sample
  declarations from the geographical database:</p>
  <blockquote>
    <p><i>/*state(Name,Abbreviation,Capitol,Area,Admit,Population,City,City,City,City*/<br>
    state(string,string,string,real,real,integer,string,string,string,string)</i></p>
    <p><i>/*city(State,Abbreviation,Name,Population) */<br>
    city(string,string,string,real)</i></p>
    <p><i>/*river(Name,Length,StateList)*/<br>
    river(string,integer,list)</i></p>
    <p><i>/*border(State,Abbreviation,StateList) */<br>
    border(string,string,list)</i></p>
    <p><i>/*etc.*/</i></p>
  </blockquote>
  <h3><!--mstheme--><font color="#000000">Porting Geobase<!--mstheme--></font></h3>
  <p>The first step in porting Geobase to your own database is to draw the entity
  association network. The next step is to model this network with the database predicate
  schema:</p>
  <blockquote>
    <p><i>schema(Entity,Assoc,Entity)</i></p>
  </blockquote>
  <p>Here are some examples of schema clauses from Geobase:</p>
  <blockquote>
    <p><i>schema(&quot;capital&quot;,&quot;of&quot;,&quot;state&quot;)<br>
    schema(&quot;state&quot;,&quot;with&quot;,&quot;capital&quot;)<br>
    schema(&quot;population&quot;,&quot;of&quot;,&quot;state&quot;)<br>
    schema(&quot;state&quot;,&quot;with&quot;,&quot;population&quot;)<br>
    schema(&quot;area&quot;,&quot;of&quot;,&quot;state&quot;)<br>
    schema(&quot;city&quot;,&quot;in&quot;,&quot;state&quot;)}</i></p>
  </blockquote>
  <p>After you have defined the entity association network, you should implement Geobase's
  interface to the database. This requires that you define clauses for the two predicates db
  and ent.</p>
  <p><b>Predicates</b></p>
  <blockquote>
    <p><i>db(ent,assoc,ent,string,string)<br>
    ent(ent,string)</i></p>
  </blockquote>
  <p>The ent Predicate</p>
  <p>The (ent) predicate is responsible for delivering all instances of a given entity. In
  the first argument of ent, Geobase passes the name of an entity and expects the second to
  return actual string values for this entity.</p>
  <p>Here are some example clauses of ent from Geobase:</p>
  <blockquote>
    <p><i>ent(continent,usa).<br>
    ent(city,Name) :- city(_,_,Name,_).<br>
    ent(state,Name) :- state(Name,_,_,_,_,_,_,_,_,_).<br>
    ent(capital,Name):- state(_,_,Name,_,_,_,_,_,_,_).<br>
    ent(river,Name) :- river(Name,_,_).}</i></p>
  </blockquote>
  <p>The (db) predicate is a bit more complicated than ent. It is responsible for modeling
  the relation between the two entities (the association). You can also regard the (db)
  predicate as a function between one entity value and another value. All the arrows in the
  entity association network (modeled by the (schema) relation) should be implemented in
  clauses for the (db) predicate. Here are some examples from the geographical database:</p>
  <blockquote>
    <p><i>db(city,in,state,City,State) :-city(State,_,City,_).<br>
    <br>
    db(state,with,city,State,City) :-city(State,_,City,_).<br>
    <br>
    db(abbreviation,of,state,Ab,State) :- state(State,Ab,_,_,_,_,_,_,_,_).<br>
    <br>
    db(area,of,state,Area,State) :-state(State,_,_,_,Area1,_,_,_,_,_),str_real(Area,Area1).<br>
    <br>
    db(capitol,of,state,Capital,State) :-state(State,_,Capital,_,_,_,_,_,_,_).</i></p>
    <p><i>db(state,border,state,State1,State2):- border(State2,_,List),member(State1,List).</i></p>
    <p><i>db(length,of,river,Length,River) :-river(River,Length1,_),str_real(Length,Length1).</i></p>
    <p><i>db(state,with,river,State,River) :-river(River,_,List),member(State,List).</i></p>
  </blockquote>
  <p>That's really all you need to do in order to provide a natural language interface for
  your existing database.</p>
  <h3><!--mstheme--><font color="#000000">Translating Natural Language Queries<!--mstheme--></font></h3>
  <p>Most natural languages (and English in particular) are not simple, straightforward, and
  consistent. Nouns can be singular or plural, verbs conjugate, synonyms exist. Translating
  sentences from natural language to something the program recognizes is not a simple task.
  In the following sections we discuss how the Geobase program deals with these translation
  issues.</p>
  <h4><!--mstheme--><font color="#000000">Internal Entity Names<!--mstheme--></font></h4>
  <p>Geobase needs to obtain an internal entity name from the words the user has used. They
  break down into three separate problems:</p>
  <p>1). Plural forms of entities. The user might use the word states, which is the entity
  name state appended by an s; or the word cities, which comes from the entity name city.
  The predicate (entn) is responsible for converting plural entities to their singluar
  forms.</p>
  <p>2). Synonyms for entities. The user might type town instead of city, or place instead
  of point. Synonyms for entities are stored in the database predicate {synonym}.</p>
  <p>3). Compound entity values. The entity values might consist of more than one word, like
  new york or salt lake city. Geobase handles this situation during parsing with the
  predicate db(get_cmpent).</p>
  <p>Some of the involved clauses look like these:</p>
  <p><b>Predicates</b></p>
  <blockquote>
    <p><i>ent_name(ent,string) /* Converts between an entity name and an internal entity name
    */<br>
    entn(string,string) /* Converts an entity to singular form */<br>
    entity(string) /* Gets all entities */<br>
    ent_synonym(string,string) /* Synonyms for entities */</i></p>
  </blockquote>
  <p><b>Clauses</b></p>
  <blockquote>
    <p><i>ent_name(Ent,Navn) :- entn(E,Navn),ent_synonym(E,Ent),entity(Ent).<br>
    ent_synonym(E,Ent) :-synonym(E,Ent).<br>
    ent_synonym(E,E).<br>
    entn(E,N) :-concat(E,&quot;s&quot;,N).<br>
    entn(E,N) :-free(E), bound(N), concat(X,&quot;ies&quot;,N), concat(X,&quot;y&quot;,E).<br>
    entn(E,E).<br>
    entity(&quot;name&quot;):-!.<br>
    entity(&quot;continent&quot;):-!.<br>
    entity(X) :- schema(X,_,_).</i></p>
  </blockquote>
  <h3><!--mstheme--><font color="#000000">Internal Names for Associations<!--mstheme--></font></h3>
  <p>In the same way that entities can have synonyms and consist of several words, so can
  the associations in the queries be represented by several words. The alternative forms for
  the association names are stored in the b(assoc) database predicate. b(assoc) stores a
  list of words that can be used for the internal association name; for example:</p>
  <blockquote>
    <p><i>assoc(&quot;in&quot;,[&quot;in&quot;])<br>
    assoc(&quot;in&quot;,[&quot;running&quot;,&quot;through&quot;])<br>
    assoc(&quot;in&quot;,[&quot;runs&quot;,&quot;through&quot;])<br>
    assoc(&quot;in&quot;,[&quot;run&quot;,&quot;through&quot;])<br>
    assoc(&quot;with&quot;,[&quot;with&quot;])<br>
    assoc(&quot;with&quot;,[&quot;traversed&quot;])<br>
    assoc(&quot;with&quot;,[&quot;traversed&quot;,&quot;by&quot;])</i></p>
  </blockquote>
  <p>The predicate (get_assoc) is responsible for recognizing an association in the
  beginning of a list of words. It does this by using the nondeterministic version of append
  to split the list up into two parts. If the first part of the list matches an alternative
  for an association in the (assoc) predicate, the corresponding internal association name
  is returned.</p>
  <blockquote>
    <p><i>get_assoc(IL,OL,A) :- append(ASL,OL,IL), assoc(A,ASL).</i></p>
  </blockquote>
  <p>The parser is responsible for recognizing the query sentence structure. There are many
  types of sentences, but these are classified by the parser into nine different cases. Each
  of these nine cases has alternatives in the domain (query). The (query) domain is defined
  recursively, which means it can represent nested queries.</p>
  <p><i>Give me cities -ENT - q_e(ENT)</i></p>
  <p><i>state with the city new york -ENT ASSOC ENT CONST - q_eaec(ENT,ASSOC,ENT,STR)</i></p>
  <p><i>rivers in (....) -ENT ASSOC SUBQUERY - q_eaq(ENT,ASSOC,ENT,QUERY)</i></p>
  <p><i>rivers longer than 1000 miles -ENT REL UNIT VAL - q_sel(ENT,RELOP,UNIT,REAL)</i></p>
  <p><i>the smallest (...) -MIN SUBQUERY - q_min(ENT,QUERY)</i></p>
  <p><i>the biggest (..) -MAX SUBQUERY - q_max(ENT,QUERY)</i></p>
  <p><i>rivers that does not traverse -ENT ASSOC NOT SUBQ - q_not(ENT,QUERY)</i></p>
  <p><i>rivers that are longer than</i></p>
  <p><i>1 thousand miles</i></p>
  <p><i>or that run through texas -SUBQUERY OR SUBQUERY - q_or(QUERY,QUERY)</i></p>
  <p><i>which state borders nevada</i></p>
  <p><i>and borders arizona -SUBQUERY AND SUBQUERY - q_and(QUERY,QUERY)</i></p>
  <p>The words that users can type for minimum, maximum, units, etc., are stored in the
  language database section. The definition in Geobase looks like this:</p>
  <blockquote>
    <p><i>entitysize(entity,keyword)<br>
    relop(keywords,relative_size) /* relational operator */<br>
    assoc(association_between_entities,keyword)<br>
    synonym(keyword,entity)<br>
    ignore(keyword)<br>
    min(keyword)<br>
    max(keyword)<br>
    size(entity,keyword)<br>
    unit(keyword,keyword)</i></p>
  </blockquote>
  <h3><!--mstheme--><font color="#000000">Parsing by Difference Lists<!--mstheme--></font></h3>
  <p>The parser uses a method called &quot;parsing by difference lists.&quot; The first two
  arguments of the parsing predicates are the input list and what remains of the list after
  part of a query is stripped off. In the last argument the parser builds up a structure for
  the query.</p>
  <p>The parser consists of several predicates and clauses, each of which is responsible for
  handling special cases in recognizing the query. If you want to understand everything
  about the parser, study the comments and use trace mode to follow how Geobase parses
  various queries.</p>
  <p>The following clause recognizes the query <i>How large is the town new york</i>. The
  filter gives the parser list&quot;large&quot;, &quot;town&quot;, &quot;new&quot;,
  &quot;york&quot;.</p>
  <blockquote>
    <p><i>s_attr([BIG,ENAME|S1],S2,E1,q_eaec(E1,A,E2,X)):- /*First s_attr clause*/<br>
    ent_name(E2,ENAME), /*Entity type town is a city. Look up entity in the language scheme*/<br>
    size(E2,BIG), /* look up city size is large */<br>
    entitysize(E2,E1), /* look up city scale is population */<br>
    schema(E1,A,E2), /* look up scheme population of city */<br>
    get_ent(S1,S2,X),!./* return an entity name and query */</i></p>
  </blockquote>
  <p>The parser is also able to recognize the more ambiguous query <i>How large is new york.</i>
  Given this query, the first clause for s_attr fails because it expects an entity type
  (such as as <i>town</i> or <i>state</i>). Then the program calls the second clause for
  s_attr, shown here.</p>
  <blockquote>
    <p><i>s_attr([BIG|S1],S2,E1,q_eaec(E1,A,E2,X)):- /*Second s_attr clause*/<br>
    get_ent(S1,S2,X), size(E2,BIG),entitysize(E2,E1), schema(E1,A,E2),ent(E2,X),!.</i></p>
  </blockquote>
  <p>Using this clause, the parser decides that new york refers to the city and that large
  refers to the number of citizens.</p>
  <p>Once the parser returns a query, Geobase calls the (eval) clause that actually
  determines the query. The actual calls into the database are made with the (db) and (ent)
  predicates.</p>
</blockquote>

<!--msthemeseparator--><p align="center"><img src="../_themes/prolog2/modhorsd.gif" width="300" height="10"></p>
<!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table></body>
</html>
