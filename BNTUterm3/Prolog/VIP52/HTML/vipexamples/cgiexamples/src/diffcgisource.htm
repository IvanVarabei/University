<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>New Page 2</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">


<meta name="Microsoft Theme" content="prolog2 000, default">
<meta name="Microsoft Border" content="t, default">
</head>

<body bgcolor="#FFFFFF" text="#333333" link="#0000FF" vlink="#008080" alink="#00FFFF"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="verdana, Arial, Helvetica">
<script language="JavaScript">var toRoot="../../../";</script>
<script language="JavaScript" src="../../../vipmenu/js/pdcbar.js"></script>
<script language="JavaScript" src="../../../vipmenu/js/pdcbardef.js"></script>


<!--mstheme--></font><table class="scrElem" border="0" width="853" height="122">
  <tr>
     <td background="../../../vipmenu/images/topbar-alt.gif" nowrap valign="top" ><!--mstheme--><font face="verdana, Arial, Helvetica">
                  <blockquote>
                    <blockquote>
                      <blockquote>
                        <blockquote>
                          <blockquote>
                            <blockquote>
                              <blockquote>
                  <p>
                      <strong>
                    
                      <font size="2">
                    
                      <br>
                      <br>
                      <br>
                      <br>
                      </font>
                        <a href="../../../vipmenu/navigationbar.htm">
                      <font size="2"><br>
                      Navigation&nbsp; without Java Scripts</font></a></strong>
                 </p>
                              </blockquote>
                            </blockquote>
                          </blockquote>
                        </blockquote>
                      </blockquote>
                    </blockquote>
                  </blockquote>
     <!--mstheme--></font></td>
  </tr>
</table><!--mstheme--><font face="verdana, Arial, Helvetica">
</html>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top"><!--mstheme--><font face="verdana, Arial, Helvetica">

<p>/*****************************************************************************<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Copyright (c) My Company<br>
<br>
Project: DIFF<br>
FileName: DIFF.PRO<br>
Purpose: No description<br>
Written by: Visual Prolog<br>
Comments:<br>
******************************************************************************/<br>
include &quot;cgiexam.inc&quot;<br>
<br>
DOMAINS<br>
TOKL = STRING*<br>
EXP = var(STRING); int(INTEGER); plus(EXP,EXP); minus(EXP,EXP); mult(EXP,EXP);<br>
&nbsp;&nbsp;&nbsp; div(EXP,EXP); ln(EXP); cos(EXP); sin(EXP); tan(EXP); sec(EXP);
potens(EXP,EXP)<br>
<br>
PREDICATES<br>
% Scanner<br>
tokl(STRING,TOKL);<br>
front(STRING,TOKL,TOKL);<br>
<br>
% Parser<br>
s_exp(TOKL,TOKL,EXP);<br>
potensexp(TOKL,TOKL,EXP);<br>
potensexp1(TOKL,TOKL,EXP,EXP);<br>
multexp(TOKL,TOKL,EXP);<br>
multexp1(TOKL,TOKL,EXP,EXP);<br>
plusexp(TOKL,TOKL,EXP);<br>
plusexp1(TOKL,TOKL,EXP,EXP);<br>
elmexp(TOKL,TOKL,EXP);<br>
<br>
% Differentiate<br>
d(EXP,STRING,EXP);<br>
<br>
%Reducer<br>
reduce(EXP,EXP);<br>
plusr(EXP,EXP,EXP);<br>
minusr(EXP,EXP,EXP);<br>
multr(EXP,EXP,EXP);<br>
divr(EXP,EXP,EXP);<br>
lnr(EXP,EXP)<br>
<br>
% Convert expression to string<br>
strexp(EXP,string);<br>
strPOTENS(EXP,string);<br>
strMULT(EXP,string);<br>
strMINUS(EXP,string);<br>
strDIV(EXP,string);<br>
strPAR(EXP,string);<br>
<br>
writeexp(EXP)<br>
<br>
PREDICATES<br>
nondeterm member(parm,parmlist)<br>
runme(parmlist)<br>
CLAUSES<br>
member (X,[X|_]).<br>
member (X,[_|Y]):-member(X,Y).<br>
&nbsp;&nbsp;&nbsp; <br>
runme(Parmlist) :-<br>
&nbsp;&nbsp;&nbsp; member (parm(&quot;exp&quot;,STR),ParmList),<br>
&nbsp;&nbsp;&nbsp; tokl(STR,TOKL),<br>
&nbsp;&nbsp;&nbsp; s_exp(TOKL,OL,EXP), OL = [],<br>
&nbsp;&nbsp;&nbsp; d(EXP,&quot;x&quot;,EXP1),<br>
&nbsp;&nbsp;&nbsp; write(&quot;&lt;p&gt;&lt;b&gt;Differentiated
expression:&lt;/b&gt;&lt;br&gt;\n&quot;),<br>
&nbsp;&nbsp;&nbsp; writeexp(EXP1),<br>
&nbsp;&nbsp;&nbsp; write(&quot;&lt;p&gt;&lt;b&gt;Reduced
expression:&lt;/b&gt;&lt;br&gt;\n&quot;),<br>
&nbsp;&nbsp;&nbsp; reduce(EXP1,EXP2),<br>
&nbsp;&nbsp;&nbsp; writeexp(EXP2).<br>
runme (_) :-<br>
&nbsp;&nbsp;&nbsp; write (&quot;&lt;p&gt;Error while executing Diff.exe\n&quot;).<br>
<br>
GOAL<br>
write(&quot;Content-type: text/html\n\n&quot;),<br>
write(&quot;&lt;html&gt;\n&quot;),<br>
write(&quot;&lt;body&gt;\n&quot;),<br>
&nbsp;&nbsp;&nbsp; ParmList = cgi_GetParmList(), <br>
&nbsp;&nbsp;&nbsp; runme(ParmList),<br>
&nbsp;&nbsp;&nbsp; write(&quot;&lt;/body&gt;\n&quot;),<br>
&nbsp;&nbsp;&nbsp; write(&quot;&lt;/html&gt;\n&quot;).<br>
<br>
CLAUSES<br>
<br>
/******************************************************<br>
CLAUSES FOR DIFFERENTIATION<br>
******************************************************/<br>
d(int(_),_,int(0)).<br>
d(var(X),X,int(1)):-!.<br>
d(var(_),_,int(0)).<br>
d(plus(U,V),X,plus(U1,V1)):-<br>
&nbsp;&nbsp;&nbsp; d(U,X,U1),<br>
&nbsp;&nbsp;&nbsp; d(V,X,V1).<br>
d(minus(U,V),X,minus(U1,V1)):-<br>
&nbsp;&nbsp;&nbsp; d(U,X,U1),<br>
&nbsp;&nbsp;&nbsp; d(V,X,V1).<br>
d(mult(U,V),X,plus(mult(U1,V),mult(U,V1))):-<br>
&nbsp;&nbsp;&nbsp; d(U,X,U1),<br>
&nbsp;&nbsp;&nbsp; d(V,X,V1).<br>
d(div(U,V),X,div(minus(mult(U1,V),mult(U,V1)),mult(V,V))):-<br>
&nbsp;&nbsp;&nbsp; d(U,X,U1),<br>
&nbsp;&nbsp;&nbsp; d(V,X,V1).<br>
d(ln(U),X,mult(div(int(1),U),U1)):-d(U,X,U1).<br>
d(potens(E1,int(I)),X,mult(mult(int(I),potens(E1,int(I1))),EXP)):- <br>
&nbsp;&nbsp;&nbsp; I1=I-1, <br>
&nbsp;&nbsp;&nbsp; d(E1,X,EXP). <br>
d(sin(U),X,mult(cos(U),U1)):-d(U,X,U1). <br>
d(cos(U),X,minus(int(0),mult(sin(U),U1))):-d(U,X,U1).<br>
d(tan(U),X,mult(potens(sec(U),int(2)),U1)):-d(U,X,U1).<br>
<br>
<br>
/******************************************************<br>
CLAUSES FOR SCANNING THE STRING<br>
******************************************************/<br>
tokl(STR,[TOK|TOKL]):-<br>
&nbsp;&nbsp;&nbsp; fronttoken(STR,TOK,STR1),!,<br>
&nbsp;&nbsp;&nbsp; tokl(STR1,TOKL).<br>
tokl(_,[]).<br>
<br>
<br>
/******************************************************<br>
CLAUSES FOR PARSING OF AN EXPRESSION<br>
******************************************************/<br>
s_exp(IL,OL,EXP):-plusexp(IL,OL,EXP).<br>
<br>
plusexp(IL,OL,EXP2):-<br>
&nbsp;&nbsp;&nbsp; multexp(IL,OL1,EXP1),<br>
&nbsp;&nbsp;&nbsp; plusexp1(OL1,OL,EXP1,EXP2).<br>
<br>
plusexp1([&quot;+&quot;|IL],OL,EXP1,EXP3):-!,<br>
&nbsp;&nbsp;&nbsp; multexp(IL,OL1,EXP2),<br>
&nbsp;&nbsp;&nbsp; plusexp1(OL1,OL,plus(EXP1,EXP2),EXP3).<br>
plusexp1([&quot;-&quot;|IL],OL,EXP1,EXP3):-!,<br>
&nbsp;&nbsp;&nbsp; multexp(IL,OL1,EXP2),<br>
&nbsp;&nbsp;&nbsp; plusexp1(OL1,OL,minus(EXP1,EXP2),EXP3).<br>
plusexp1(IL,IL,EXP,EXP).<br>
<br>
multexp(IL,OL,EXP2):-<br>
&nbsp;&nbsp;&nbsp; potensexp(IL,OL1,EXP1),<br>
&nbsp;&nbsp;&nbsp; multexp1(OL1,OL,EXP1,EXP2).<br>
<br>
multexp1([&quot;*&quot;|IL],OL,EXP1,EXP3):-!,<br>
&nbsp;&nbsp;&nbsp; potensexp(IL,OL1,EXP2),<br>
&nbsp;&nbsp;&nbsp; multexp1(OL1,OL,mult(EXP1,EXP2),EXP3).<br>
multexp1([&quot;/&quot;|IL],OL,EXP1,EXP3):-!,<br>
&nbsp;&nbsp;&nbsp; potensexp(IL,OL1,EXP2),<br>
&nbsp;&nbsp;&nbsp; multexp1(OL1,OL,div(EXP1,EXP2),EXP3).<br>
multexp1(IL,IL,EXP,EXP).<br>
<br>
potensexp(IL,OL,EXP2):-<br>
&nbsp;&nbsp;&nbsp; elmexp(IL,OL1,EXP1),<br>
&nbsp;&nbsp;&nbsp; potensexp1(OL1,OL,EXP1,EXP2),!.<br>
potensexp1([&quot;^&quot;|IL],OL,EXP1,EXP3):-!,<br>
&nbsp;&nbsp;&nbsp; elmexp(IL,OL1,EXP2),<br>
&nbsp;&nbsp;&nbsp; potensexp1(OL1,OL,potens(EXP1,EXP2),EXP3).<br>
potensexp1(IL,IL,EXP,EXP).<br>
<br>
elmexp([&quot;(&quot;|IL],OL,EXP):-<br>
&nbsp;&nbsp;&nbsp; s_exp(IL,OL1,EXP),<br>
&nbsp;&nbsp;&nbsp; front(&quot;)&quot;,OL1,OL),!.<br>
elmexp([&quot;ln&quot;,&quot;(&quot;|IL],OL,ln(EXP)):-<br>
&nbsp;&nbsp;&nbsp; s_exp(IL,OL1,EXP),<br>
&nbsp;&nbsp;&nbsp; front(&quot;)&quot;,OL1,OL),!.<br>
elmexp([&quot;sin&quot;,&quot;(&quot;|IL],OL,sin(EXP)):-<br>
&nbsp;&nbsp;&nbsp; s_exp(IL,OL1,EXP),<br>
&nbsp;&nbsp;&nbsp; front(&quot;)&quot;,OL1,OL),!.<br>
elmexp([&quot;cos&quot;,&quot;(&quot;|IL],OL,cos(EXP)):-<br>
&nbsp;&nbsp;&nbsp; s_exp(IL,OL1,EXP),<br>
&nbsp;&nbsp;&nbsp; front(&quot;)&quot;,OL1,OL),!.<br>
elmexp([&quot;tan&quot;,&quot;(&quot;|IL],OL,tan(EXP)):-<br>
&nbsp;&nbsp;&nbsp; s_exp(IL,OL1,EXP),<br>
&nbsp;&nbsp;&nbsp; front(&quot;)&quot;,OL1,OL),!.<br>
elmexp([&quot;-&quot;,TALSTR|IL],IL,int(INT)):-!,<br>
&nbsp;&nbsp;&nbsp; str_int(TALSTR,INTp),<br>
&nbsp;&nbsp;&nbsp; INT = -INTp.<br>
elmexp([TALSTR|IL],IL,int(INT)):-str_int(TALSTR,INT),!.<br>
elmexp([NAME|IL],IL,var(NAME)).<br>
<br>
front(TOK,[TOK|L],L).<br>
<br>
<br>
/******************************************************<br>
CLAUSES FOR REDUCTION OF AN EXPRESSION<br>
******************************************************/<br>
reduce(plus(X,Y),R):-!,<br>
&nbsp;&nbsp;&nbsp; reduce(X,X1),<br>
&nbsp;&nbsp;&nbsp; reduce(Y,Y1),<br>
&nbsp;&nbsp;&nbsp; plusr(X1,Y1,R).<br>
reduce(minus(X,Y),R):-!,<br>
&nbsp;&nbsp;&nbsp; reduce(X,X1),<br>
&nbsp;&nbsp;&nbsp; reduce(Y,Y1),<br>
&nbsp;&nbsp;&nbsp; minusr(X1,Y1,R).<br>
reduce(mult(X,Y),R):-!,<br>
&nbsp;&nbsp;&nbsp; reduce(X,X1),<br>
&nbsp;&nbsp;&nbsp; reduce(Y,Y1),<br>
&nbsp;&nbsp;&nbsp; multr(X1,Y1,R).<br>
reduce(div(X,Y),R):-!,<br>
&nbsp;&nbsp;&nbsp; reduce(X,X1),<br>
&nbsp;&nbsp;&nbsp; reduce(Y,Y1),<br>
&nbsp;&nbsp;&nbsp; divr(X1,Y1,R).<br>
reduce(ln(X),R):-!,<br>
&nbsp;&nbsp;&nbsp; reduce(X,X1),<br>
&nbsp;&nbsp;&nbsp; lnr(X1,R).<br>
reduce(potens(E,int(1)),E):-!.<br>
reduce(R,R).<br>
<br>
% CLAUSES FOR REDUCTION OF AN ADDITION EXPRESSION<br>
plusr(int(0),X,X):-!.<br>
plusr(X,int(0),X):-!.<br>
plusr(int(X),int(Y),int(Z)):-!,<br>
&nbsp;&nbsp;&nbsp; X+Y=Z.<br>
plusr(X,X,mult(int(2),X)):-!.<br>
plusr(int(X),Y,Z):- <br>
&nbsp;&nbsp;&nbsp; X&lt;0,<br>
&nbsp;&nbsp;&nbsp; T=-X,!,<br>
&nbsp;&nbsp;&nbsp; minusr(int(T),Y,Z).<br>
plusr(Y,int(X),Z):- <br>
&nbsp;&nbsp;&nbsp; X&lt;0,<br>
&nbsp;&nbsp;&nbsp; T=-X,!,<br>
&nbsp;&nbsp;&nbsp; minusr(int(T),Y,Z).<br>
plusr(mult(int(I),X),X,mult(int(I1),X)):-!,<br>
&nbsp;&nbsp;&nbsp; I+1=I1.<br>
plusr(X,mult(int(I),X),mult(int(I1),X)):-!,<br>
&nbsp;&nbsp;&nbsp; I+1=I1.<br>
plusr(mult(int(I1),X),mult(int(I2),X),mult(int(I3),X)):-!,<br>
&nbsp;&nbsp;&nbsp; I1+I2=I3.<br>
plusr(int(I),X,plus(X,int(I))):-!.<br>
plusr(plus(X,int(I1)),int(I2),plus(X,int(I3))):-!,<br>
&nbsp;&nbsp;&nbsp; I1+I2=I3.<br>
plusr(plus(X,int(I1)),plus(Y,int(I2)),plus(R,int(I3))):-!,<br>
&nbsp;&nbsp;&nbsp; I1+I2=I3,<br>
&nbsp;&nbsp;&nbsp; plusr(X,Y,R).<br>
plusr(plus(X,int(I)),Y,plus(R,int(I))):-!,<br>
&nbsp;&nbsp;&nbsp; plusr(X,Y,R).<br>
plusr(X,Y,plus(X,Y)).<br>
<br>
% CLAUSES FOR REDUCTION OF A MINUS EXPRESSION<br>
minusr(int(X),int(Y),int(Z)):-!,Z=X-Y.<br>
minusr(X,int(0),X):-!.<br>
minusr(X,X,int(0)):-!.<br>
minusr(X,int(I),plus(int(I1),X)):-!,I1=-I.<br>
minusr(X,Y,minus(X,Y)).<br>
<br>
% CLAUSES FOR REDUCTION OF A MULTIPLICATION EXPRESSION<br>
multr(int(X),int(Y),int(Z)):-!,X*Y=Z.<br>
multr(int(0),_,int(0)):-!.<br>
multr(_,int(0),int(0)):-!.<br>
multr(int(1),X,X):-!.<br>
multr(X,int(1),X):-!.<br>
multr(M,plus(X,Y),plus(X1,Y1)):-!,<br>
&nbsp;&nbsp;&nbsp; multr(M,X,X1),multr(M,Y,Y1). <br>
multr(M,minus(X,Y),minus(X1,Y1)):-!,<br>
&nbsp;&nbsp;&nbsp; multr(M,X,X1),multr(M,Y,Y1). <br>
multr(plus(X,Y),M,plus(X1,Y1)):-!,<br>
&nbsp;&nbsp;&nbsp; multr(M,X,X1),multr(M,Y,Y1). <br>
multr(minus(X,Y),M,minus(X1,Y1)):-!,<br>
&nbsp;&nbsp;&nbsp; multr(M,X,X1),multr(M,Y,Y1). <br>
multr(mult(int(I1),X),int(I2),M1):-!,<br>
&nbsp;&nbsp;&nbsp; I1*I2=I3,<br>
&nbsp;&nbsp;&nbsp; multr(int(I3),X,M1).<br>
multr(int(I1),mult(int(I2),X),M1):-!,<br>
&nbsp;&nbsp;&nbsp; I1*I2=I3,<br>
&nbsp;&nbsp;&nbsp; multr(int(I3),X,M1).<br>
multr(mult(int(I1),X),mult(int(I2),Y),mult(int(I3),R)):-!,<br>
&nbsp;&nbsp;&nbsp; I1*I2=I3, <br>
&nbsp;&nbsp;&nbsp; multr(X,Y,R).<br>
multr(mult(int(I),X),Y,mult(int(I),R)):-!,<br>
&nbsp;&nbsp;&nbsp; multr(X,Y,R).<br>
multr(X,int(I),mult(int(I),X)):-!.<br>
multr(potens(X,int(I1)),potens(X,int(I2)),potens(X,int(I3))):-!,<br>
&nbsp;&nbsp;&nbsp; I3=I1+I2.<br>
multr(X,potens(X,int(I)),potens(X,int(I1))):-!,<br>
&nbsp;&nbsp;&nbsp; I1=I+1.<br>
multr(potens(X,int(I)),X,potens(X,int(I1))):-!,<br>
&nbsp;&nbsp;&nbsp; I1=I+1.<br>
multr(X,X,potens(X,int(2))):-!.<br>
multr(X,Y,mult(X,Y)).<br>
<br>
% CLAUSES FOR REDUCTION OF A DIVISION EXPRESION<br>
divr(int(0),_,int(0)):-!.<br>
divr(_,int(0),var(&quot;'endless'&quot;)):-!,write(&quot;division by zero&quot;),nl.<br>
divr(X,int(1),X):-!.<br>
divr(X,Y,div(X,Y)).<br>
<br>
% CLAUSES FOR REDUCTION OF A LOGARITHM EXPRESSION<br>
lnr(int(0),var(&quot;endless&quot;)):-!,write(&quot;logarithm error&quot;),nl.<br>
lnr(int(1),int(0)):-!.<br>
lnr(X,ln(X)).<br>
<br>
<br>
<br>
/******************************************************<br>
CLAUSE FOR WRITING OF AN EXPRESSION<br>
******************************************************/<br>
writeexp(EXP):-<br>
&nbsp;&nbsp;&nbsp; strexp(EXP,STR),<br>
&nbsp;&nbsp;&nbsp; write(STR).<br>
<br>
/*<br>
CLAUSES FOR CONVERTING AN EXPRESSION TO A STRING<br>
*/<br>
% Taken from the old writeexp clauses<br>
<br>
strexp(var(NAME),NAME).<br>
strexp(int(INT),INTSTR) :-<br>
str_int(INTSTR,INT).<br>
strexp(ln(EXP),STR) :-<br>
strPAR(EXP,STRp),<br>
concat(&quot;ln&quot;,STRp,STR).<br>
strexp(sin(EXP),STR) :- <br>
strPAR(EXP,STRp),<br>
concat(&quot;sin&quot;,STRp,STR).<br>
strexp(cos(EXP),STR) :- <br>
strPAR(EXP,STRp),<br>
concat(&quot;cos&quot;,STRp,STR).<br>
strexp(tan(EXP),STR) :- <br>
strPAR(EXP,STRp),<br>
concat(&quot;tan&quot;,STRp,STR).<br>
strexp(sec(EXP),STR) :- <br>
strPAR(EXP,STRp),<br>
concat(&quot;sec&quot;,STRp,STR).<br>
strexp(plus(EXP1,EXP2),STR):-<br>
strexp(EXP1,STR1),<br>
concat(STR1,&quot;+&quot;,STR3),<br>
strexp(EXP2,STR2),<br>
concat(STR3,STR2,STR).<br>
strexp(minus(EXP1,EXP2),STR):-<br>
strexp(EXP1,STR1),<br>
concat(STR1,&quot;-&quot;,STR3),<br>
strMINUS(EXP2,STR2),<br>
concat(STR3,STR2,STR).<br>
strexp(mult(EXP1,EXP2),STR):-<br>
strMINUS(EXP1,STR1),<br>
concat(STR1,&quot;*&quot;,STR3),<br>
strMULT(EXP2,STR2),<br>
concat(STR3,STR2,STR).<br>
strexp(div(EXP1,EXP2),STR):-<br>
strMULT(EXP1,STR1),<br>
concat(STR1,&quot;/&quot;,STR3),<br>
strDIV(EXP2,STR2),<br>
concat(STR3,STR2,STR).<br>
strexp(potens(EXP1,EXP2),STR):-<br>
strDIV(EXP1,STR1), <br>
concat(STR1,&quot;^&quot;,STR3),<br>
strPOTENS(EXP2,STR2),<br>
concat(STR3,STR2,STR).<br>
<br>
strPOTENS(div(X,Y),STR):-!,strPAR(div(X,Y),STR).<br>
strPOTENS(X,STR):-strDIV(X,STR).<br>
<br>
strDIV(mult(X,Y),STR):-!,strPAR(mult(X,Y),STR).<br>
strDIV(X,STR):-strMULT(X,STR).<br>
<br>
strMULT(minus(X,Y),STR):- !,strPAR(minus(X,Y),STR).<br>
strMULT(X,STR):-strMINUS(X,STR).<br>
<br>
strMINUS(plus(X,Y),STR):-!,strPAR(plus(X,Y),STR).<br>
strMINUS(X,STR):-strexp(X,STR).<br>
<br>
strPAR(EXP,STR):-<br>
strexp(EXP,STR1),<br>
concat(&quot;(&quot;,STR1,STR2),<br>
concat(STR2,&quot;)&quot;,STR).<br>
</p>
<!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table></body>
</html>
