<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>HTML document for the World Wide Web</title>


<meta name="Microsoft Theme" content="prolog2 000, default">
<meta name="Microsoft Border" content="t, default">
</head>

<body bgcolor="#FFFFFF" text="#333333" link="#0000FF" vlink="#008080" alink="#00FFFF"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="verdana, Arial, Helvetica">
<script language="JavaScript">var toRoot="../../";</script>
<script language="JavaScript" src="../../vipmenu/js/pdcbar.js"></script>
<script language="JavaScript" src="../../vipmenu/js/pdcbardef.js"></script>


<!--mstheme--></font><table class="scrElem" border="0" width="853" height="122">
  <tr>
     <td background="../../vipmenu/images/topbar-alt.gif" nowrap valign="top" ><!--mstheme--><font face="verdana, Arial, Helvetica">
                  <blockquote>
                    <blockquote>
                      <blockquote>
                        <blockquote>
                          <blockquote>
                            <blockquote>
                              <blockquote>
                  <p>
                      <strong>
                    
                      <font size="2">
                    
                      <br>
                      <br>
                      <br>
                      <br>
                      </font>
                        <a href="../../vipmenu/navigationbar.htm">
                      <font size="2"><br>
                      Navigation&nbsp; without Java Scripts</font></a></strong>
                 </p>
                              </blockquote>
                            </blockquote>
                          </blockquote>
                        </blockquote>
                      </blockquote>
                    </blockquote>
                  </blockquote>
     <!--mstheme--></font></td>
  </tr>
</table><!--mstheme--><font face="verdana, Arial, Helvetica">
</html>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top"><!--mstheme--><font face="verdana, Arial, Helvetica">

<h1><!--mstheme--><font color="#000000">New Features of Visual Prolog <!--mstheme--></font></h1>

<!--mstheme--></font><!--msthemelist--><table border="0" cellpadding="0" cellspacing="0" width="100%">
  <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a name="OLE_LINK2">Experts</a> <!--mstheme--></font><!--msthemelist--><table border="0" cellpadding="0" cellspacing="0" width="100%">
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#code_experts">Code Experts</a> <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#application_expert">Application </a>Expert <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#window_expert">Window </a>Expert <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#dialog_expert">Dialog </a>Expert <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#toolbar_expert">Toolbar </a>Expert <!--mstheme--></font><!--msthemelist--></td></tr>
    <!--msthemelist--></table><!--mstheme--><font face="verdana, Arial, Helvetica">
  <!--mstheme--></font><!--msthemelist--></td></tr>
  <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a name="NewFeat_Editors">Editors</a> <!--mstheme--></font><!--msthemelist--><table border="0" cellpadding="0" cellspacing="0" width="100%">
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica">Dialog and Window <a href="newfeat.htm#dialog_and_window_layout_editor">Layout Editor</a>
      <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#menu_editor">Menu </a>Editor <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#toolbar_editor">Toolbar </a>Editor <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#icon_cursor_and_bitmap_editor">Icon, Cursor and Bitmap </a>Editor <!--mstheme--></font><!--msthemelist--></td></tr>
    <!--msthemelist--></table><!--mstheme--><font face="verdana, Arial, Helvetica">
  <!--mstheme--></font><!--msthemelist--></td></tr>
  <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul1d.gif" width="14" height="13" hspace="14"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a name="NewFeat_Additional">Additional Features</a> <!--mstheme--></font><!--msthemelist--><table border="0" cellpadding="0" cellspacing="0" width="100%">
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica">Integrated <a href="newfeat.htm#integrated_make_facility">Make Facility</a> <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica">Source <a href="newfeat.htm#source_code_browser">Code Browser</a> <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#text_editor_with_token_coloring">Text Editor </a>with Token
        Coloring <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica">High Level, <a href="newfeat.htm#high_level_portable_gui_api">Portable GUI API</a> <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#help_authoring_system">Help Authoring System</a> <!--mstheme--></font><!--msthemelist--></td></tr>
      <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../_themes/prolog2/modbul2d.gif" width="12" height="12" hspace="15"></td><td valign="top" width="100%"><!--mstheme--><font face="verdana, Arial, Helvetica"><a href="newfeat.htm#resource_import">Resource Import</a> <!--mstheme--></font><!--msthemelist--></td></tr>
    <!--msthemelist--></table><!--mstheme--><font face="verdana, Arial, Helvetica">
  <!--mstheme--></font><!--msthemelist--></td></tr>
<!--msthemelist--></table><!--mstheme--><font face="verdana, Arial, Helvetica">

<!--msthemeseparator--><p align="center"><img src="../_themes/prolog2/modhorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#000000"><a name="Code_Experts"><font size="5">Code Experts </font></a><!--mstheme--></font></h3>

<p>The greatest strength of Visual Prolog is probably the combination of the Layout tools
and the Code Experts. The code experts take care of much of the work for you, meaning that
you can create a new application in a few minutes, and incrementally en-hance this from a
prototype to your final application. <i>Trivial work is done for you automatically</i> </p>

<h3><!--mstheme--><font color="#000000"><a name="Application_Expert"><font size="5">Application Expert </font></a><!--mstheme--></font></h3>

<p><img src="images/apexp.gif" alt="Screen Dump" align="right" hspace="0" vspace="10" WIDTH="360" HEIGHT="173"> The
application expert is used to create a new project. It creates all the basic components of
a new application, a project file, source files, menus, toolbars, icons, bitmaps, and even
a help file - This saves many hours of manual work! </p>

<p>The project created by the application expert can be compiled and executed
immedia-tely. The generated code serves as a framework into which you can easily add the
specifics of your application, and you need not worry about many of the details you would
have to consider in ordinary Windows programming. </p>

<p>The VPI layer provides default behavior for all events, so you should only insert code
for the events you want to handle explicitly. <i>Create a new application in less than one
minute</i> </p>

<h3><!--mstheme--><font color="#000000"><a name="Window_Expert"><font size="5">Window Expert </font></a><!--mstheme--></font></h3>

<p><img src="images/windex.gif" alt="Screen Dump" align="right" hspace="10" WIDTH="360" HEIGHT="315"> A GUI program
must react to events such as a key-press, activation of a control, a menu item, or a mouse
movement, when a window is resized or moved or when the window must be redrawn etc. </p>

<p>In Visual Prolog, this is done by connecting a Prolog predicate to a window. This
predicate serves as the event-handler for the window, and will be called each time
something happens for this window. </p>

<p>The main function of the Window expert is to handle the individual Prolog clauses (of
the event-handler) that react to the various events from the windowing system. In the
expert dialog (see figure), all the event types can be seen, and pressing the &quot;Add
Clause&quot; button adds a clause for the selected event. For example we can choose to
create a little pop-up window when the mouse is being pressed inside a window. We will add
the code for the e_MouseDown event (The event generated when a mouse button is depressed).
We select the e_MouseDown event in the code expert and press the Add Clause button: </p>

<!--mstheme--></font><pre><code>
<small>BEGIN ww, e_MouseDown 
win_ww_eh(Window,e_MouseDown(pnt(X,Y),ShiftCtlAlt,MouseButton),0):-
    dlg_Note(&quot;Hi Mum&quot;).
%END ww, e_MouseDown </small>
</code>
  </pre><!--mstheme--><font face="verdana, Arial, Helvetica">

<p>Note that the clause is marked with a %BEGIN - %END pair of comments. These are used by
the Window expert to locate the code later. In particular, once a clause exists for the
event, the &quot;Add Clause&quot; button changes to &quot;Edit Clause&quot;, which can be
used to quickly position you within the source module to edit or add functionality. </p>

<p>The name of the event-handler predicate is win_ww_eh, and it has three arguments: the
first is Window, a variable which is used in operations on the window. The next argument
is a structure which itself has three arguments: 1) the position where the mouse was
pressed, 2 the status of the Shift, Control and Alt keys when the mouse button was
activated, and finally, which mouse button was pushed. The last argument for the predicate
is a return value which just is zero in this case. </p>

<p>To call up the little dialog, the built-in dlg_Note predicate is used. Popup menus
within the editor allow you to quickly paste in calls to built-in and user-defined
predicates, constants, domain names, keywords, resource identifiers etc. for nearly
keyboard-less programming.<br>
<i>Easy to add and locate code for the user-interface.</i> </p>

<h3><!--mstheme--><font color="#000000"><a name="Dialog_Expert"><font size="5">Dialog Expert </font></a><!--mstheme--></font></h3>

<p><img src="images/diapack.gif" alt="Screen Dump" align="right" hspace="15" width="473" height="305"> The core of the Code Expert for dialogs is a tool which allows you to
specify a number of high-level properties for controls, and also to select which program
variables to associate with control values. Various validations like checking to see if a
field is an integer, lies within a given range, if a string has exceeded a maximum length
etc. are done auto-matically. The only thing the programmer has to do is to supply a value
for each field before the dialog is created, and to handle the returned values when the
dialog is terminated. <i>Dialog handling made easy.</i> <br clear="all">
</p>

<h3><!--mstheme--><font color="#000000"><a name="Toolbar_Expert"><font size="5">Toolbar Expert </font></a><!--mstheme--></font></h3>

<p>Visual Prolog supports toolbars, help lines, and even tooltips. The toolbar expert can
assist you by generating default code for toolbar handling, and our toolbar editor is an
exceptionally easy way to layout your toolbar dynamically and specify its properties. <i>No
programming needed for toolbars and help lines.</i> </p>

<h3><!--mstheme--><font color="#000000"><a name="Layout_Editors"><font size="5">Layout Editors </font></a><!--mstheme--></font></h3>

<p>The layout editors are used to interactively design the user interface for your
applications. </p>

<h3><!--mstheme--><font color="#000000"><a name="Dialog_and_Window_Layout_Editor"><font size="5">Dialog and Window Layout
Editor </font></a><!--mstheme--></font></h3>

<p><img src="images/layout.gif" alt="Screen Dump" border="1" hspace="20" WIDTH="353" HEIGHT="345"> </p>

<p>Dialogs and Windows are laid out using the dialog and window editor. You can use this
to position controls like edit-fields, push-buttons, check boxes etc. inside a dialog or
window. <br>
There are numerous facilities to make it easy to get the right layout: a group of controls
can be aligned in various ways, resized or moved. The &quot;tabstops&quot; and &quot;visit
order&quot; for using the tab key can be set.<br>
For each control, a number of its basic attributes can be set. Each control is given a
name which becomes a source code constant. These constants connect the layout to the code,
and are used when the content of a control should be retrieved or changed, a check box
should be checked etc. When Compile or Build is selected from the menu, these constants
are written into a file, which is included in your source files. <i>Easy layout of dialogs
and windows</i> <br clear="left">
</p>

<h3><!--mstheme--><font color="#000000"><a name="Menu_Editor"><font size="5">Menu Editor </font></a><!--mstheme--></font></h3>

<p><img src="images/menued.gif" alt="Screen Dump" hspace="50" WIDTH="370" HEIGHT="269"> </p>

<p>Pulldown (or popup) menus can be readily created using the menu editor. For each menu
entry a constant is specified (or automatically generated) which will be passed to the
event handler when the menu choice is activated. The menu editor also handles the
definition of accelerator keys for special commands. In the Window expert it is possible
to specify interactively what code should be called when a menu item is activated. <i>Design
menus interactively</i> <br>
<br>
</p>

<h3><!--mstheme--><font color="#000000"><a name="Toolbar_Editor"><font size="5">Toolbar Editor </font></a><!--mstheme--></font></h3>

<p><img src="images/tbed.gif" alt="Screen Dump" hspace="15" WIDTH="396" HEIGHT="147"> </p>

<p>The toolbar editor allows easy visual creation of toolbars. A toolbar can be built-up
interactively with icon buttons, icon checkboxes, static texts, combo boxes, context
sensitive fields or separators.</p>

<p>Toolbars can be attached to the top, bottom, left or right side of a window, or they
can be either fixed or floating inside of a window.<b><i><br>
Easy layout of toolbars and help lines</i></b> </p>

<blockquote>
  <blockquote>
    <p>&nbsp;</p>
  </blockquote>
</blockquote>

<h3><!--mstheme--><font color="#000000"><a name="Icon_Cursor_and_Bitmap_Editor"><font size="5">Icon, Cursor and Bitmap Editor </font></a><!--mstheme--></font></h3>

<p><img src="images/bited.gif" alt="Screen Dump" hspace="15" vspace="10" WIDTH="480" HEIGHT="307"> </p>

<p>Windows programs use bitmaps in many places: Icons, Cursors, Bitmap buttons, Toolbars
-- all require some small pictures. Visual Prolog incorporates an image editor that is
specially geared to editing such bitmaps. <br>
The image editor can rotate or move pictures. There is a special mirror facility, which
makes it easy to create symmetric images. Hotspots can be set for cursors etc. All
Cursors, Icons and Bitmaps that are created in the project can easily be selected from the
other editors. For example, if the bitmaps are already created, it takes only a few
minutes to create a toolbar that uses them. <i>Convenient design of small bitmaps</i> <br clear="right">
</p>

<h1><!--mstheme--><font color="#000000"><a name="Additional_Features">Additional Features</a><!--mstheme--></font></h1>

<h3><!--mstheme--><font color="#000000"><a name="Integrated_Make_Facility">Integrated Make Facility </a><!--mstheme--></font></h3>

<p><img src="images/make.gif" alt="Screen Dump" hspace="15" WIDTH="419" HEIGHT="257"> </p>

<p>The Make facility handles all the complexity of compiling, linking, resource
compilation and resource binding etc. The make facility checks on time stamps in order to
recompile only the necessary files. The dependencies can be displayed as a tree in order
to visualize the structure of the project. <i>Building the application is done
automatically</i> <br clear="left">
</p>

<h3><!--mstheme--><font color="#000000"><a name="Source_Code_Browser"><font size="5">Source Code Browser </font></a><!--mstheme--></font></h3>

<p><img src="images/browse.gif" alt="Screen Dump" hspace="15" vspace="10" WIDTH="493" HEIGHT="259"> </p>

<p>The Visual Prolog compiler generates information for the code browser, so it is
possible to inspect the predicates in a module, browse all the global predicates in the
project or locate where any predicate or domain is either declared or defined. <i>Easy
navigation in the source code</i> <br clear="right">
</p>

<h3><!--mstheme--><font color="#000000"><a name="Text_Editor_with_Token_Coloring"><font size="5">Text Editor with Token
Coloring </font></a><!--mstheme--></font></h3>

<p><img src="images/toked.gif" alt="Screen Dump" hspace="15" vspace="10" WIDTH="446" HEIGHT="345"> <br>
Visual Prolog contains a powerful editor with color-coding of Visual Prolog keywords and
other language elements. The colors make it much easier to differentiate between predicate
names, parameters, comments, etc. as, for example, integer constants could be assigned to
display in red. <br>
The editor supports an unlimited undo and redo facility, search and replace, cut, copy,
paste, and drag and drop for quick block movements. And, as with previous PDC editors, you
can include it in your own applications! <br>
A unique feature of the editor as used within the VDE is that it knows about all the
predicates, user interface components, colors, constants etc. of Visual Prolog - you can
paste any of them into the source code with a click of the mouse. <br>
<i>Fast creation of easily read of Prolog code</i> <br clear="left">
</p>

<h3><!--mstheme--><font color="#000000"><a name="High_Level_Portable_GUI_API">High Level, Portable GUI API (The VPI). </a><!--mstheme--></font></h3>

<p>A portable Prolog GUI API has been defined. The API is an abstraction of the facilities
found in the basic windowing environments of the Windows 3.x, Windows 95, Windows NT, OS/2
PM, UNIX Motif and Macintosh platforms. This gives the Visual Prolog programmer an API
which is both portable and easier to use than programming to the native API. However, in
order not to restrict users, the API also contains platform-specific facilities and
options which are non portable. If these facilities are used the application is either not
portable, or conditional compilation must be used to provide alternative behavior on each
platform. It is also possible to program directly to the underlying windowing API as
illustrated in the current WINBIND or PMBIND subdirectories. <bk><i>Your program is not bound
to one platform</i> </p>

<h3><!--mstheme--><font color="#000000"><a name="Help_Authoring_System">Help Authoring System </a><!--mstheme--></font></h3>

<p><img src="images/hlp_inp.gif" alt="Screen Dump" hspace="15" WIDTH="400" HEIGHT="282"> <br clear="left">
The built-in help authoring system makes it very easy to provide your application with
on-line Help. <br>
The authoring system is based on the PDC Hypertext Abstract Machine (HAM). In the Help
authoring system it is possible to enter help text interactively, mark new links with the
mouse, and to follow existing links during the design phase. The help authoring system
outputs both the windows .RTF format and the OS/2 IPF format so it is possible to generate
native help systems for both OS/2 and Windows. (The Help compiler HC.EXE is not included
with Visual Prolog) <br>
<i>Easy to support on-line Help for applications</i> <br clear="all">
</p>

<h3><!--mstheme--><font color="#000000"><a name="Resource_Import">Resource Import </a><!--mstheme--></font></h3>

<p><img src="images/res_imp.gif" alt="Screen Dump" hspace="15" vspace="15" WIDTH="500" HEIGHT="263"></p>

<p>In addition to creating new resource definitions, you can also import resources from
existing .VPR, .RES, .EXE or .DLL files. You might have created an application already,
and want to move this to the new Visual Prolog environment.<br clear="left">
<!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table></body>
</html>
