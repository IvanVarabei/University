<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./readme_files/filelist.xml">
<title>readme</title>
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>117</w:Zoom>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p
	{margin-right:0in;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
span.EmailStyle18
	{mso-style-type:personal;
	mso-ansi-font-size:10.0pt;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	color:#003300;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:269701684;
	mso-list-type:hybrid;
	mso-list-template-ids:-1023925428 -1917926462 1621423448 -60246294 -1376458252 -861733152 -1782552914 -1812456700 -1345838258 -1043818028;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:509804933;
	mso-list-type:hybrid;
	mso-list-template-ids:-104270880 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l2
	{mso-list-id:1372267585;
	mso-list-type:hybrid;
	mso-list-template-ids:831577322 -1464168010 1680775976 -1245253984 230593174 -76648320 958309604 761436182 191367160 75022708;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l3
	{mso-list-id:1449087847;
	mso-list-type:hybrid;
	mso-list-template-ids:-576666206 1989063678 -1355788320 -976589792 -1500642088 365045676 1611323060 1137229292 -1930498830 -1785793292;}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l4
	{mso-list-id:1822304559;
	mso-list-type:hybrid;
	mso-list-template-ids:1375367418 -908059954 -911291020 1672535158 1331432642 -979062570 -1572325962 -515065232 -130920654 -1734290098;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l5
	{mso-list-id:1949850909;
	mso-list-type:hybrid;
	mso-list-template-ids:-957086260 -720575198 -808305302 1557047158 -358958440 -308239858 2139144090 -31701464 -898876474 2002168818;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l6
	{mso-list-id:2129808828;
	mso-list-type:hybrid;
	mso-list-template-ids:-445070534 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l6:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<meta name=Template content="C:\Program Files\Microsoft Office\Office\html.dot">
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h1 align=center style='text-align:center'>Using Visual Prolog DLL's from
Microsoft Visual Basic</h1>

<p>This directory contains examples of how to use a Dynamic Link Library (DLL)
created with Visual Prolog in Microsoft Visual Basic<span style='font-size:
10.0pt'> </span>(see <a href="..\readme.htm">Using Visual Prolog DLL’s from
other languages</a> for an overview of the examples)</p>

<p>All these examples uses the same Visual Prolog DLL’s that are found in the <a
href="..\DLLS\readme.htm">DLLS</a> directory, so these have to be compiled
before any of the examples are compiled and run.</p>

<p>These examples tested with MS Visual Basic 5.0</p>

<h2>Notes for Visual Basic</h2>

<p>Please read the <a href="..\readme.htm#notes">common notes</a>.</p>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo3;tab-stops:list .5in'>The type of the import
     function in the Microsoft Visual Basic<span style='font-size:10.0pt'> </span>code
     should be:</li>
</ul>

<p style='margin-left:2.0in'><b>sub</b> - if the predicate does not have a return
value, and<br>
<b>function</b> - if the predicate has a return value</p>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo6;tab-stops:list .5in'>The following table maps
     Visual Prolog types to Microsoft Visual Basic<span style='font-size:10.0pt'>
     </span>types:</li>
</ul>

<div align=center>

<table border=1 cellspacing=1 cellpadding=0 width=425 style='width:318.75pt;
 mso-cellspacing:.7pt;border:outset black .75pt;mso-padding-alt:5.25pt 5.25pt 5.25pt 5.25pt'>
 <tr>
  <td width="47%" valign=top style='width:47.0%;border:inset black .75pt;
  padding:5.25pt 5.25pt 5.25pt 5.25pt'>
  <p><b>Visual Prolog </b></p>
  </td>
  <td width="53%" valign=top style='width:53.0%;border:inset black .75pt;
  padding:5.25pt 5.25pt 5.25pt 5.25pt'>
  <p><b>Visual Basic</b></p>
  </td>
 </tr>
 <tr>
  <td width="47%" valign=top style='width:47.0%;border:inset black .75pt;
  padding:5.25pt 5.25pt 5.25pt 5.25pt'>
  <p>integer</p>
  </td>
  <td width="53%" valign=top style='width:53.0%;border:inset black .75pt;
  padding:5.25pt 5.25pt 5.25pt 5.25pt'>
  <p>Integer</p>
  </td>
 </tr>
 <tr>
  <td width="47%" valign=top style='width:47.0%;border:inset black .75pt;
  padding:5.25pt 5.25pt 5.25pt 5.25pt'>
  <p>real</p>
  </td>
  <td width="53%" valign=top style='width:53.0%;border:inset black .75pt;
  padding:5.25pt 5.25pt 5.25pt 5.25pt'>
  <p>Double</p>
  </td>
 </tr>
 <tr>
  <td width="47%" valign=top style='width:47.0%;border:inset black .75pt;
  padding:5.25pt 5.25pt 5.25pt 5.25pt'>
  <p>long</p>
  </td>
  <td width="53%" valign=top style='width:53.0%;border:inset black .75pt;
  padding:5.25pt 5.25pt 5.25pt 5.25pt'>
  <p>Long</p>
  </td>
 </tr>
 <tr>
  <td width="47%" valign=top style='width:47.0%;border:inset black .75pt;
  padding:5.25pt 5.25pt 5.25pt 5.25pt'>
  <p>string</p>
  </td>
  <td width="53%" valign=top style='width:53.0%;border:inset black .75pt;
  padding:5.25pt 5.25pt 5.25pt 5.25pt'>
  <p>String</p>
  </td>
 </tr>
</table>

</div>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l5 level1 lfo9;tab-stops:list .5in'>Parameter Transfers:</li>
</ul>

<p style='margin-left:1.0in'>Input arguments from Visual Basic application to
Visual Prolog DLL must be sent <i>ByVal</i>, and output arguments must be
declared in Visual Basic using<i> ByRef </i>keyword<i>.<o:p></o:p></i></p>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l4 level1 lfo12;tab-stops:list .5in'>Transfer string variable</li>
</ul>

<p style='margin-left:1.0in'>When you transfer output string variables to VB,
then you must use dll_Mark_GStack and dll_ReleaseGStack functions on VB side.
For more information please read the <a href="..\readme.htm#notes">common notes</a>.</p>

<p style='margin-left:1.0in'>You should use the <span style='font-size:10.0pt;
font-family:"Courier New"'>ASCIIZ_2_VB_String-(i,o)</span> predicate in Prolog
for transfer output string parameter to VB, because MS Visual Basic requires
BSTR type of strings.</p>

<p style='margin-left:1.0in'>Example getString with <span style='font-size:
10.0pt;font-family:"Courier New"'>ASCIIZ_2_VB_String </span>predicate :</p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'>getString(Out):-<o:p></o:p></span></p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>s(Source),<o:p></o:p></span></p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>ASCIIZ_2_VB_String( Source, Out ).
%Convert to BSTR type. Needed for Visual basic<o:p></o:p></span></p>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo15;tab-stops:list .5in'>Example of procedure
     declaration <i>getReal </i>in MS Visual Basic:</li>
</ul>

<p style='margin-left:2.0in'><span style='font-size:10.0pt;font-family:"Courier New"'>Public
Declare Sub getReal Lib &lt;name of DLL&gt; (ByRef OutReal As Double)<o:p></o:p></span></p>

<h2>Caution</h2>

<p>In complex commercial applications we insistently recommend using the
following more safe way of getting strings (and other data allocated on Prolog
GStack) from Prolog DLLs. </p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l6 level1 lfo17;
tab-stops:list .5in'><![if !supportLists]>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>All string arguments in global predicates (Prolog DLL) should
be declared with input flow.</p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l6 level1 lfo17;
tab-stops:list .5in'><![if !supportLists]>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>VB program should allocate memory for all string arguments by
itself. That is, VB should allocate VB memory for a string, which should return
data from VIP. Calling a Prolog DLL predicate VB should pass to it the pointer
to the memory block allocated for the string that should return a value to VB.
In this case, VB should declare passing of this string &quot;<span
style='font-family:"Courier New"'>ByVal</span>&quot;.</p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l6 level1 lfo17;
tab-stops:list .5in'><![if !supportLists]>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>The predicate in VIP DLL will receive pointer to the VB memory
block allocated for the string that should be returned. It should accomplish
the following actions: </p>

<p style='margin-left:1.0in;text-indent:-.25in;mso-list:l6 level2 lfo17;
tab-stops:list 1.0in'><![if !supportLists]>a.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>The VIP predicate should call <span style='font-family:"Courier New"'>mem_markGstack</span>.</p>

<p style='margin-left:1.0in;text-indent:-.25in;mso-list:l6 level2 lfo17;
tab-stops:list 1.0in'><![if !supportLists]>b.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>The VIP predicate should retrieve the required string.</p>

<p style='margin-left:1.0in;text-indent:-.25in;mso-list:l6 level2 lfo17;
tab-stops:list 1.0in'><![if !supportLists]>c.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>The VIP predicate should write the string data into the memory
block obtained from VB. Notice that the size of the allocated memory block
should by enough for this string. For instance, VB can previously request the
string size. </p>

<p style='margin-left:1.0in;text-indent:-.25in;mso-list:l6 level2 lfo17;
tab-stops:list 1.0in'><![if !supportLists]>d.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>The VIP predicate should call <span style='font-family:"Courier New"'>mem_ReleaseGstack</span>
to free all used GStack. In this case, VB need not have any care about Prolog
GStack.</p>

<p style='margin-left:1.0in;text-indent:-.25in;mso-list:l6 level2 lfo17;
tab-stops:list 1.0in'><![if !supportLists]>e.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>The VIP predicate should return control to the main VB
program.</p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l6 level1 lfo17;
tab-stops:list .5in'><![if !supportLists]>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>Now VB can access the string data modified by the VIP
predicate. </p>

<p>Notice that on this way VB program does not accomplish any handling of
Visual Prolog GStack. Therefore, VB need not use <span style='font-family:"Courier New"'>dll_Mark_GStack</span>
and <span style='font-family:"Courier New"'>dll_ReleaseGStack</span> functions.
From the other hand, Visual Prolog does not need using <span style='font-size:
10.0pt;font-family:"Courier New"'>ASCIIZ_2_VB_String</span> predicate.<b><o:p></o:p></b></p>

<p>For example: </p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo19;
tab-stops:list .5in'><![if !supportLists]><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>VB can use the following declaration of <span
style='font-size:10.0pt;font-family:"Courier New"'>dll_getString</span>: </p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'>Public
Declare Sub dll_getString Lib &quot;Dll&quot; (ByVal OutStr As String)<o:p></o:p></span></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo19;
tab-stops:list .5in'><![if !supportLists]><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Visual Prolog should use the following declaration for
the correspondent global predicate (with the input string argument):</p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'>dll_getString(string
OutStr) - (i) language stdcall<o:p></o:p></span></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo19;
tab-stops:list .5in'><![if !supportLists]><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>VB can use the following call of <span
style='font-size:10.0pt;font-family:"Courier New"'>dll_getString</span>:</p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'>OutStr
= string(1000, &quot; &quot;) 'String memory allocation for 1000 characters<o:p></o:p></span></p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'>Call
dll_getString(OutStr)<o:p></o:p></span></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo19;
tab-stops:list .5in'><![if !supportLists]><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Visual Prolog can provide the following clauses for <span
style='font-size:10.0pt;font-family:"Courier New"'>dll_getString</span>: </p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'>dll_getString(VB_OutStr):-
<o:p></o:p></span></p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>StackMark=mem_MarkGStack(),<o:p></o:p></span></p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>%<span style="mso-spacerun: yes"> 
</span>Prolog code retrieving &quot;PrologString&quot;<o:p></o:p></span></p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'><span
style="mso-spacerun: yes">  </span><span style='mso-tab-count:1'>     </span>str_len(PrologString,
PrologStrLen),<o:p></o:p></span></p>

<p style='margin-left:1.0in;text-indent:.5in'><span style='font-size:10.0pt;
font-family:"Courier New"'>PrologString_Pointer = cast(POINTER, PrologString), <span
style='mso-tab-count:1'>     </span>%required to use movmem() <o:p></o:p></span></p>

<p style='margin-left:1.0in;text-indent:.5in'><span style='font-size:10.0pt;
font-family:"Courier New"'>VB_OutStr_Pointer = cast(POINTER, VB_OutStr), <span
style='mso-tab-count:2'>             </span>%required to use movmem()<o:p></o:p></span></p>

<p style='margin-left:1.0in;text-indent:.5in'><span style='font-size:10.0pt;
font-family:"Courier New"'>movmem(PrologString_Pointer,VB_OutStr_Pointer,PrologStrLen),
<o:p></o:p></span></p>

<p style='margin-left:1.0in'><span style='font-size:10.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>mem_ReleaseGStack(StackMark).<o:p></o:p></span></p>

<p>The <span style='font-size:10.0pt;font-family:"Courier New"'>movmem</span>
predicate copies the specified <span style='font-size:10.0pt;font-family:"Courier New"'>PrologStrLen</span>
number of bytes from the source location in the program memory pointed by <span
style='font-size:10.0pt;font-family:"Courier New"'>PrologString_Pointer</span>
to the new location pointed by <span style='font-size:10.0pt;font-family:"Courier New"'>VB_OutStr_Pointer</span>.
See description of <span style='font-size:10.0pt;font-family:"Courier New"'>movmem</span>
predicate in Visual Prolog Help in topic &quot;PROLOG.LIB Predicates Declared
in PDCRUNT.PRE&quot;. Domain <span style='font-size:10.0pt;font-family:"Courier New"'>POINTER
= ULONG</span> is declared in TYPES.DOM standard include file.</p>

<h2>Examples</h2>

<p style='margin-left:1.0in'><a href="NONGUI\readme.htm#NONGUI_example">NONGUI</a>:
Microsoft Visual Basic project uses non-GUI Visual Prolog DLL.</p>

<p style='margin-left:1.0in'><a href="USEVPI\readme.htm#USEVPI_example">USEVPI</a>:
Microsoft Visual Basic project uses a Visual Prolog DLL with VPI.</p>

<p style='margin-left:1.0in'>&nbsp;</p>

</div>

</body>

</html>
