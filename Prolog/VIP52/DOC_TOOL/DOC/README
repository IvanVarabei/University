CONTENTS
========
1. Overview
2. File List
3. Font handling
4. Tabstops
5. Link attributies renaming
6. Hypergraphic

1. Overview
-----------

This directory contains the first approach to build structural
documents converter library. At this time two converters are
implemented:
	1. HTML to/from Prolog converter
	2. RTF to/from Prolog converter
        3. IPF to/from Prolog converter

This converter translates the HTML/RTF/IPF documents to/from the term
of the domain DOC, which is declared in the DOCSTR.DOM. This domain is
99% Prolog representation of the HTML grammar, what is declared in
HTML 4.01 DTD.

The converter itself is represented by the following Prolog predicates

html_term (String HTML, DOC Term) - (i,o) - converts from the document
                                            to the term
                                    (o,i) - vise versa
                                    (i,i) - unifies the term and
                                            the document
                                    (o,o) - generates the default "empty" term and document

rtfpage_term (RTF_PARSER_CALLBACK) - (i)
    parses the RTF document page by page, then calls the user
    supplied predicate, that assept the term of DOC domain as its
    argument.

rtfpage_term (STRING RTF,DOC Term) - (o,i) - converts the term
                                             into the RTF page

ipf_term (String HTML, DOC Term)  - (i,o) - converts from the document
                                            to the term
                                    (o,i) - vise versa
                                    (i,i) - unifies the term and
                                            the document
                                    (o,o) - generates the default "empty" term and document

Auxilary:

rtf_Set_FontStyle - asserts the new font style record into the
                    internal style sheet

rtf_Default_FontStyle - reset the default internal style sheet

The following 3rd part tools are used to build libraries and test applications
1. Microsoft Visual C/C++ 1.51
2. Microsoft Visual C/C++ 4.1
3. Borland C/C++ 4.5
4. CNU's FLex and ATT's Yacc.


All the HTML documents generated by the converter are tested using three
browsers (Netscape Navigator, SPRY Mosaic, MS Internet Explorer).

2. File List
------------

 \INCLUDE
    HTML.PRE           Interface for HTML converter
    HTML.PRO           Implementation of html_term (o,i) (i,i) (o,o)
    RTF.PRE            Interface for RTF converter
    RTF.PRO            Implementation of rtfpage_term (o,i)
    HTML.PRE           Interface for IPF converter
    HTML.PRO           Implementation of ipf_term (o,i) (i,i) (o,o)
    ERRHNDL.PRE        Error handler declaration
    ERRHNDL.PRO        Default error handler implementation
    DOCSTR.DOM         Declaration of HTML DTD

 \LIB
    \DOS
        DOCLIB.LIB     The library (16 bit)
    \WIN16
        DOCLIB.LIB     The library (16 bit)
    \WIN32
       \MSC 
	   DOCLIB.LIB  The library (32 bit COFF)
       \BC
	   DOCLIB.LIB  The library (32 bit OMF)
    \OS2_32
       \IBMC 
	   DOCLIB.LIB  The library (for IBM C/C++)
       \BC
	   DOCLIB.LIB  The library (for Borland C/C++)
		

 \SOURCE
    GRAM.BAT           Batch file to build grammar
    DOCLIB.MAK         Make script to build 16 bit library
    DOCLIB32.MAK       Make script to build 32 bit library
    DOCLIB32.MPD       MSVC 4.1 Project database
    DOCLIB.IDE         BC 4.5 Project
    DOCLIB2I.MAK       Make script to build OS2 library with IBMC
    DOCLIB2B.MAK       Make script to build OS2 library with BC
    PROLOG.SKL         Flex's sceleton file
    CONFIG.H           Project configuration
    DOCSTR.H           DOC domain C representation

    \0_OBJ             Intermediares
    \0_OBJ32           ""
    \0_OBJOS2          ""

    \COMMON            Common parts for both scanners

        ATTS.C          Tag attibuties
        LIST.C          List handling routines
        MISC.C          Some C RTL replacements (strcpy(),bsearch, etc.)
        ATTS.H          Headers
        LIST.H          ""
        MISC.H          ""
        Y_PDCDEF.H      Declaration for C RTL repalcements (malloc etc.)
        PDCRUNT.H       Our header

    \HTML              HTML converter

        HTML_MEM.C      Initialization and stacks
        HTML_PRO.C      Core converter
        HTML_II.C       ""
        HTML_OI.C       ""
        HTML_OO.C       ""
        HTML_KEY.C      HTML keyword table
        HTML_TAG.C      HTML tag's handling routines
        HTML_LEX.C      Scanner
        HTML_TAB.C      Parser
        HTML.H          Common constants and declarations
        HTML_PRO.H      Headers for appropriate modules
        HTML_MEM.H      ""
        HTML_TAB.H      ""
        HTML_KEY.H      ""
        HTML_TAG.H      ""
        HTML.L          Lex scanner source
        HTML.Y          Yacc parser source

    \RTF               RTF converter

        RTF_MEM.C       Initialization and stacks
        RTF_FORM.C      Formatting
        RTF_STMT.C      RTF statements
        RTF_FONT.C      Font tables
        RTF_FOOT.C      Footnotes
        RTF_KEY.C       RTF keyword table
        RTF_PROC.C      Core converter
        RTF_PRO.C       ""
        RTF_LEX.C       Scanner
        RTF_TAB.C       Parser
        RTF.H           Common constants and declarations
        RTF_FONT.H      Headers for appropriate modules
        RTF_FOOT.H      ""
        RTF_FORM.H      ""
        RTF_KEY.H       ""
        RTF_MEM.H       ""
        RTF_PROC.H      ""
        RTF_STMT.H      ""
        RTF_PRO.H       ""
        RTF_TAB.H       ""
        RTF.L           Lex scanner source
        RTF.Y           Yacc parser source

    \IPF	        IPF converter

        IPF_MEM.C       Initialization and stacks
        IPF_PRO.C       Core converter
        IPF_II.C        ""
        IPF_OI.C        ""
        IPF_OO.C        ""
        IPF_KEY.C       IPF keyword table
        IPF_TAG.C       IPF tag's handling routines
        IPF_LEX.C       Scanner
        IPF_TAB.C       Parser
        IPF.H           Common constants and declarations
        IPF_PRO.H       Headers for appropriate modules
        IPF_MEM.H       ""
        IPF_TAB.H       ""
        IPF_KEY.H       ""
        IPF_TAG.H       ""
        IPF.L           Lex scanner source
        IPF.Y      	Yacc parser source

 \EXAMPLE               Test application: Simple Document Converter

    DOCCNV16.VPR        The Project (16-bit)
    DOCCNV32.VPR        The Project (32-bit (COFF))
    DOCNVOS2.VPR        The Project (OS/2)
    DOCCNV.PRO          Prolog Source
    DOCCNV16.HAM        HelpMaker Database (16-bit)
    DOCCNV32.HAM        HelpMaker Database (32-bit)
    \EXE
       \HTML
            0.HTM           Sample documents
            1.HTM           ""
            2.HTM           ""
            301MILL.HTM     ""
            ANNC.HTM        ""
            AS_HOME2.HTM    ""
            BLOCK.HTM       ""
            BODY.HTM        ""
            CHAR.HTM        ""
            DIRMENU.HTM     ""
            DL.HTM          ""
            DOCHEAD.HTM     ""
            EX.HTM          ""
            FIG.HTM         ""
            FORM.HTM        ""
            FORM2.HTM       ""
            HEAD.HTM        ""
            IMAGE.HTM       ""
            IN.HTM          ""
            INLINE.HTM      ""
            LIST.HTM        ""
            MATH.HTM        ""
            MDIRECT.HTM     ""
            OBSOLETE.HTM    ""
            PAR.HTM         ""
            Q.HTM           ""
            QUESTION.HTM    ""
            SEL.HTM         ""
            STR.HTM         ""
            TABLE.HTM       ""
            GLOBIE.GIF      ""
       \RTF
            BGI.RTF         Sample RTF documents
            E1.RTF          ""
            EX.RTF          ""
            KEYS.RTF        ""
            PG.RTF          ""
            TBL.RTF         ""
            TERMS.RTF       ""
            EDITOR.RTF      ""
    
       \IPF
            1.IPF          Sample IPF documents
            2.IPF          ""
            3.IPF          ""
            ART.IPF        ""
            ART2.IPF       ""
            ARTLINK.IPF    ""
            CGRAPHIC.IPF   ""
            FIG.IPF        ""
            GLOBIE.GIF     ""
            HANOI.IPF      ""
            HEAD.IPF       ""
            INCLUDE.IPF    ""
            LINES.IPF      ""
            LINK.IPF       ""
            LISTS.IPF      ""
            MARGINS.IPF    ""
            NOTES.IPF      ""
            SORT.IPF       ""
            SYMBOL.IPF     ""
            TABLE.IPF      ""
            TITLE.IPF      ""
            USUPPORT.IPF   ""
            XMP.IPF        ""

 \DOC
    README      This text


3. Font handling
----------------

There is one important differnce in the manner wich HTML,RTF and IPF handle
fonts.

In the RTF documents all used fonts must be set explicitly and exactly. There
are two tokens for this porpuse: 
\fN - for font face, refered in special font table
\fsN - for font size

IPF documents also can explicitly set the desired font's face and size
using the tag :font face="Tms Rmn" size=12.

In the HTML documents there are no any legal way (declared in the HTML DTD)
to set exact font's face and size. But, the modern browsers like Netscape 
Navigator or MS Internet Explorer support a special tag <FONT> to set them.
But the attribute SIZE in this tag is used to set relative size, instead of
the exact one.
 
So, we need a way to distinct these "relative" or "absolute" font handling
style in the corresponding Prolog term. It can be done by added the
special attribute to this term.

The html_term/2 (i,o) will convert the following tag:
	<FONT FACE="Arial SIZE=2>
into :
	font(1,[
		att("FACE",lit("Arial")),
		att("SIZE",num(2)),
		att("RELATIVE",nil))
	       ])

And rtfpage_term/1 (i) will convert the following fragment:
	{\fonttbl{\f1\fswiss\fcharsert2 Arial;}}
	....
	\f1\fs20
into:
	font(1,[
		att("FACE",lit("Arial")),
		att("SIZE",num(10)),		% RTF multiplies size by 2
		att("ABSOLUTE",nil))
	       ])

The converters from the Prolog term to the HTML/RTF documents must 
perform the appropriate calculations.
            
4. Tabstops
-----------
The tags for horizontal tabstops exists both in RTF and HTML, but none of the 
used browsers can render them. So, html_term (Str,Doc) - (o,i) produces 
"\t" for any tabstops (See HTML.PRO).


5. Link Attributies Renaming
----------------------------
There are some differences between link attributies in HTML and IPF.

Since IPF usualy uses local links (in the same file scope) then the
IPF parser converts :link. tag's attribute 'refid' into attribute 'href'
and adds the '#' character to it's value.
On other hand, the HTML generator considers the heading tags <H1>...<H6> with
the attributies 'id','name' and 'res' as link targets and adds the
appropriate <A></A> tags to the heading's text flow.

6. Hypergraphic
---------------

Both HTML 3.0 and IPF can include segmented hypergraphic, and use
the appropriate tags for this porpuse. The following simple example
illustrates this:

	<IMG SRC="PICTURE.GIF USEMAP="#img_map">
	<MAP NAME="img_map">
	  <AREA href="#1"....>
	  <AREA href="#2"....>
	</MAP>

	:artwork name="PICTURE.BMP".
	:artlink.
	  :link reftype=hd refid=1.
	  :link reftype=hd refid=2.
	:eartlink.

Converters will produce the same term both for HTML and IPF. Appropriate 
'USEMAP' attribute in conjunction with 'NAME' attribute For IPF
documents will be generated automaticaly as 'img_map_N'. Where N
is unigue number in a document scope.

	img([att("SRC",lit("PICTURE.GIF"),att("USEMAP",lit("#img_map")])
	map([att("NAME",lit("img_map")],
		[
		 area([att("href",lit("#1")]),
		 area([att("href",lit("#2")])
		]
	    ).

Note, that all used HTML browsers don't support segmented hypergraphic
at this time. They used the following construction to use pictures as
hotspots:
	<A HREF="#1"><IMG SRC="PICTURE.GIF></A>


