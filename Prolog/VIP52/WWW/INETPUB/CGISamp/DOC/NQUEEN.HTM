<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<title>The N Queens Problem</title>
</head>

<body bgcolor="#FFFFFF">

<p><a name="_Toc342996020"><font size="5"><b>The N Queens Problem</b></font></a></p>

<p><font size="3">In the N Queens problem, the object is to place
<i>N</i> queens on a chessboard in such a way that no two queens
can take each other. Accordingly, no two queens can be placed on
the same row, column, or diagonal.</font></p>

<p><font size="3">To solve the problem, you'll number the rows
and columns of the chessboard from 1 to <i>N</i>. To number the
diagonals, you divide them into two types, so that a diagonal is
uniquely specified by a type and a number calculated from its row
and column numbers:</font></p>

<blockquote>
    <pre>
Diagonal = N + Column - Row (Type 1)

Diagonal = Row + Column
    </pre>
</blockquote>

<p><font size="3">When you view the chessboard with row 1 at the
top and column 1 on the left side, Type 1 diagonals resemble the
backslash (\) character in shape, and Type 2 diagonals resemble
the shape of slash (/). Figure 15.5 shows the numbering of Type 2
diagonals on a 4x4 board.</font></p>

<p align="center"><font size="2"><img src="nqueen.gif"
width="203" height="203"></font></p>

<p align="center"><font size="3"><i>The N Queens Chessboard</i></font></p>

<p><font size="3">To solve the N Queens Problem with a Visual
Prolog program, you must record which rows, columns, and
diagonals are unoccupied, and also make a note of where the
queens are placed.</font></p>

<p><font size="3">A queen's position is described with a row
number and a column number as in the domain declaration:</font></p>

<blockquote>
    <pre>queen = q(integer, integer)</pre>
</blockquote>

<p><font size="3">This declaration represents the position of one
queen. To describe more positions, you can use a list:</font></p>

<blockquote>
    <pre>queens = queen*</pre>
</blockquote>

<p><font size="3">Likewise, you need several numerical lists
indicating the rows, columns, and diagonals not occupied by a
queen. These lists are described by:</font></p>

<blockquote>
    <pre>freelist = integer*</pre>
</blockquote>

<p><font size="3">You will treat the chessboard as a single
object with the following domain declaration:</font></p>

<blockquote>
    <pre>board = board(queens, freelist, freelist, freelist, freelist)</pre>
</blockquote>

<p><font size="3">The four <i>freelist</i>s represent the free
rows, columns, and diagonals of Type 1 and Type 2, respectively.</font></p>

<p><font size="3">To see how this is going to work, let <b><i>board</i></b>
represent a 4*4 chessboard in two situations: (1) without queens,
and (2) with one queen at the top left corner.</font></p>

<ol>
    <li><font size="3"><b><i>board</i></b> without queens</font></li>
</ol>

<blockquote>
    <blockquote>
        <pre>
board([], [1,2,3,4], [1,2,3,4], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7])</pre>
    </blockquote>
</blockquote>

<ol start="2">
    <li><font size="3"><b><i>board</i></b> with one queen</font></li>
</ol>

<blockquote>
    <blockquote>
        <pre>
board([q(1,1)], [2,3,4], [2,3,4], [1,2,3,5,6,7], [2,3,4,5,6,7])</pre>
    </blockquote>
</blockquote>

<p><font size="3">You can now solve the problem by describing the
relationship between an empty board and a board with <i>N</i>
queens. You define the predicate</font></p>

<blockquote>
    <pre>placeN(integer, board, board)</pre>
</blockquote>

<p><font size="3">with the two clauses following. Queens are
placed one at a time until every row and column is occupied. You
can see this in the first clause, where the two lists of <i>freerows</i>
and <i>freecols</i> are empty:</font></p>

<blockquote>
    <pre>
placeN(_, board(D, [], [], X, Y), board(D, [], [], X, Y)) <b>:-</b> !.
placeN(N, Board1, Result) :-
	place_a_queen(N, Board1, Board2),
	placeN(N, Board2, Result).
</pre>
</blockquote>

<p><font size="3">In the second clause, the predicate <b><i>place_a_queen</i></b>
gives the connection between <i>Board1</i> and <i>Board2</i>. (<i>Board2</i>
has one more queen than <i>Board1</i>). Use this predicate
declaration:</font></p>

<blockquote>
    <pre>
place_a_queen(integer, board, board)</pre>
</blockquote>

<p><font size="3">The core of the N Queens Problem lies in the
description of how to add extra queens until they have all been
successfully placed, starting with an empty board. To solve this
problem, add the new queen to the list of those already placed:</font></p>

<blockquote>
    <pre>[q(R, C)|Queens]</pre>
</blockquote>

<p><font size="3">Among the remaining free rows, <i>Rows</i>, you
need to find a row <i>R</i> where you can place the next queen.
At the same time, you must remove <i>R</i> from the list of free
rows, resulting in a new list of free rows, <i>NewR</i>. This is
formulated as:</font></p>

<blockquote>
    <pre>findandremove(R, Rows, NewR)</pre>
</blockquote>

<p><font size="3">Correspondingly, you must find and remove a
vacant column <i>C</i>. From <i>R</i> and <i>C</i>, you can
calculate the numbers of the occupied diagonals. Then you can
determine if <i>D1</i> and <i>D2</i> are among the vacant
diagonals.</font></p>

<p><font size="3">This is the <b><i>place_a_queen</i></b> clause:</font></p>

<pre>
</pre>

<blockquote>
    <pre>place_a_queen(N, board(Queens, Rows, Columns, Diag1, Diag2),
		board([q(R,C)|Queens], NewR, NewS, NewD1, NewD2)) :-
        findandremove(R, Rows, NewR),
        findandremove(C, Columns, NewC),
        D1=N+S-R,
        findandremove(D1, Diag1, NewD1),
        D2=R+S-1,
        findandremove(D2, Diag2, NewD2).
</pre>
</blockquote>

<p><font size="3">NQUEEN.PRO is the complete program. It contains
a number of smaller additions to define <b><i>nqueens</i></b>, so
you only need to give a goal like:</font></p>

<blockquote>
    <pre>nqueens(5)</pre>
</blockquote>

<p><font size="3">to obtain a possible solution (in this case,
for placing five queens on a 5*5 board).</font></p>

</body>
</html>
