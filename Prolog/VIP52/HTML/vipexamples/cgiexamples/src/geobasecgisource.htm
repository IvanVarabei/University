<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>New Page 3</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">


<meta name="Microsoft Theme" content="prolog2 000, default">
<meta name="Microsoft Border" content="t, default">
</head>

<body bgcolor="#FFFFFF" text="#333333" link="#0000FF" vlink="#008080" alink="#00FFFF"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="verdana, Arial, Helvetica">
<script language="JavaScript">var toRoot="../../../";</script>
<script language="JavaScript" src="../../../vipmenu/js/pdcbar.js"></script>
<script language="JavaScript" src="../../../vipmenu/js/pdcbardef.js"></script>


<!--mstheme--></font><table class="scrElem" border="0" width="853" height="122">
  <tr>
     <td background="../../../vipmenu/images/topbar-alt.gif" nowrap valign="top" ><!--mstheme--><font face="verdana, Arial, Helvetica">
                  <blockquote>
                    <blockquote>
                      <blockquote>
                        <blockquote>
                          <blockquote>
                            <blockquote>
                              <blockquote>
                  <p>
                      <strong>
                    
                      <font size="2">
                    
                      <br>
                      <br>
                      <br>
                      <br>
                      </font>
                        <a href="../../../vipmenu/navigationbar.htm">
                      <font size="2"><br>
                      Navigation&nbsp; without Java Scripts</font></a></strong>
                 </p>
                              </blockquote>
                            </blockquote>
                          </blockquote>
                        </blockquote>
                      </blockquote>
                    </blockquote>
                  </blockquote>
     <!--mstheme--></font></td>
  </tr>
</table><!--mstheme--><font face="verdana, Arial, Helvetica">
</html>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top"><!--mstheme--><font face="verdana, Arial, Helvetica">

<p>/*****************************************************************************<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Copyright (c) My Company<br>
<br>
Project: GEOBASE<br>
FileName: GEOBASE.PRO<br>
<br>
Geobase demonstrates a natural language interface to a database<br>
on U.S. geography. Geobase allows you to query its database in<br>
English rather than computerese. For a more complete discussion <br>
of Geobase and its features please refer to Appendix F in the <br>
Reference Guide.<br>
<br>
The database contains the following information:<br>
<br>
Information about states:<br>
Area of the state in square kilometers<br>
Population of the state in citizens<br>
Capital of the state<br>
Which states border a given state<br>
Rivers in the state<br>
Cities in the state<br>
Highest and lowest point in the state in meters<br>
<br>
Information about rivers:<br>
Length of river in kilometers<br>
<br>
Information about cities:<br>
Population of the city in citizens<br>
<br>
<br>
You can retrieve any or all of this information by asking questions<br>
in normal English. Some sample queries:<br>
<br>
- states<br>
<br>
- give me the cities in california.<br>
<br>
- what is the biggest city in california ?<br>
<br>
- what is the longest river in the usa?<br>
<br>
- which rivers are longer than 1 thousand kilometers?<br>
<br>
- what is the name of the state with the lowest point ?<br>
<br>
- which states border alabama ?<br>
<br>
- which rivers do not run through texas<br>
<br>
- which rivers run through states that border the state<br>
with the capital austin?<br>
<br>
You can modify Geobase as you work with it. If it doesn't<br>
understand a word in one of your questions, you can add the word<br>
to the language definition. The language is defined in a number<br>
of relations, the most important one being the schema. A schema<br>
is a description of the logical structure of a database. In<br>
Geobase, the schema is the &quot;entity network&quot; for the language. A<br>
schema entry follows the form: ENTITY ASSOCIATION ENTITY; this<br>
signifies that the two entities are bound together by the given<br>
association.<br>
<br>
To display the relations and their schema, select View Language<br>
from the Geobase main menu, then choose one of the items listed<br>
below.<br>
<br>
1. Schema of relations<br>
The geographic data is stored in a number of relations. The<br>
schema for these relations is listed here.<br>
<br>
2. Schema of questions<br>
The schema for all possible questions that can be asked is listed<br>
here. For example, one possibility is:<br>
&gt; population of city &lt;<br>
That is, what is the population of a given city?<br>
<br>
3. Names of entities<br>
All known entities are listed here.<br>
<br>
4. Synonyms for entities<br>
Synonyms for entities are allowed. The previously defined<br>
synonyms are listed here; you can also add synonyms to the<br>
database dynamically.<br>
<br>
5. Synonyms for associations<br>
Synonyms for associations are allowed and can consist of<br>
more than one word.<br>
<br>
6. Words that are ignored<br>
Some words are simply ignored by the system since they are not<br>
directly relevant to the meaning of questions. Ignored words are<br>
listed here.<br>
<br>
7. Units for entities<br>
The units of measure for different entities are listed here. For<br>
instance, the unit for population is &quot;number of citizens&quot;.<br>
<br>
8. Synonyms for relational operators<br>
There are several ways to say that a city is &quot;bigger than&quot; 1 million<br>
citizens or that a river is &quot;shorter than&quot; 1 thousand miles. These<br>
synonyms are listed here.<br>
<br>
9. Alternative ways to designate the minimum<br>
The different ways to designate adjectives for &quot;minimum&quot; are listed here.<br>
<br>
10. Alternative ways to designate the maximum<br>
The different ways to designate adjectives for &quot;maximum&quot; are listed here.<br>
<br>
******************************************************************************/<br>
include &quot;cgiexam.inc&quot;<br>
<br>
DOMAINS<br>
ENT&nbsp;&nbsp;&nbsp; = STRING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Names of
entities<br>
ASSOC&nbsp;&nbsp;&nbsp; = STRING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Names of
associations<br>
RELOP&nbsp;&nbsp;&nbsp; = STRING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % gt, lt, eq
for comparisons<br>
UNIT&nbsp;&nbsp;&nbsp; = STRING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % kilometers,
citizens etc.<br>
STRINGLIST = STRING*<br>
<br>
/**********************************************************<br>
The Language Tables - These are the database predicates<br>
which define the language we will use to query Geobase.<br>
***********************************************************/<br>
<br>
DATABASE - language<br>
schema(ENT,ASSOC,ENT)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Entity network:
entity-assoc-entity<br>
entitysize(ENT,STRING)&nbsp;&nbsp;&nbsp; % This attribute tells which words can be<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %
user to query the size of the entity<br>
relop(STRINGLIST,STRING)&nbsp;&nbsp;&nbsp; % Example: relop([greater,than],gt]<br>
assoc(ASSOC,STRINGLIST)&nbsp;&nbsp;&nbsp; % Alternative assoc names<br>
synonym(STRING,ENT)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Synonyms for entities<br>
ignore(STRING)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Words to be ignored<br>
minn(STRING)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Words
stating minimum<br>
maxx(STRING)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Words
stating maximum<br>
size(STRING,STRING)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % big, long, high ....<br>
unit(STRING,STRING)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Units for population, area
...<br>
<br>
<br>
/**************************************************************<br>
The real database - These are the database predicates which<br>
actually maintain the information we will access.<br>
****************************************************************/<br>
<br>
DATABASE - data<br>
state(STRING name,STRING abbreviation,STRING capital,REAL area,REAL admit,<br>
&nbsp;&nbsp;&nbsp; INTEGER population,STRING city,STRING city,STRING city,STRING city)<br>
city(STRING state,STRING abbreviation,STRING name,REAL population)<br>
river(STRING name,INTEGER length,STRINGLIST statelist)<br>
border(STRING state,STRING abbreviation,STRINGLIST statelist)<br>
highlow(STRING state,STRING abbreviation,STRING point,INTEGER height,STRING point,INTEGER
height)<br>
mountain(STRING state,STRING abbreviation,STRING name,REAL height)<br>
lake(STRING name,REAL area,STRINGLIST statelist)<br>
road(STRING number,STRINGLIST statelist)<br>
<br>
<br>
/**************************************************************<br>
&nbsp;&nbsp;&nbsp; Access to the database<br>
****************************************************************/<br>
<br>
PREDICATES<br>
nondeterm member(STRING,STRINGLIST)<br>
nondeterm member(parm,parmlist)<br>
<br>
CLAUSES<br>
member(X,[X|_]).<br>
member(X,[_|L]):-member(X,L).<br>
<br>
PREDICATES<br>
nondeterm db(ENT,ASSOC,ENT,STRING,STRING)<br>
nondeterm ent(ENT,STRING)<br>
<br>
CLAUSES<br>
% ent returns values for a given entity name. Ex. if called by<br>
% ent(city,X) X is instantiated to cities.<br>
ent(continent,usa).<br>
ent(city,NAME):-&nbsp;&nbsp;&nbsp; city(_,_,NAME,_).<br>
ent(state,NAME):-&nbsp;&nbsp;&nbsp; state(NAME,_,_,_,_,_,_,_,_,_).<br>
ent(capital,NAME):-&nbsp;&nbsp;&nbsp; state(_,_,NAME,_,_,_,_,_,_,_).<br>
ent(river,NAME):-&nbsp;&nbsp;&nbsp; river(NAME,_,_).<br>
ent(point,POINT):-&nbsp;&nbsp;&nbsp; highlow(_,_,_,_,POINT,_).<br>
ent(point,POINT):-&nbsp;&nbsp;&nbsp; highlow(_,_,POINT,_,_,_).<br>
ent(mountain,M):-&nbsp;&nbsp;&nbsp; mountain(_,_,M,_).<br>
ent(lake,LAKE):-&nbsp;&nbsp;&nbsp; lake(LAKE,_,_).<br>
ent(road,NUMBER):-&nbsp;&nbsp;&nbsp; road(NUMBER,_).<br>
ent(population,POPUL):-city(_,_,_,POPUL1),str_real(POPUL,POPUL1).<br>
ent(population,S):-state(_,_,_,POPUL,_,_,_,_,_,_),str_real(S,POPUL).<br>
<br>
% The db predicate is used to establish relationships between<br>
% entities. The first three parameters should always be instantiated<br>
% to entity_name - assoc_name - entity_name. The last two parameters<br>
% return the values corresponding to the two entity names.<br>
<br>
% Relationships about cities<br>
db(city,in,state,CITY,STATE):-&nbsp;&nbsp;&nbsp; city(STATE,_,CITY,_).<br>
db(state,with,city,STATE,CITY):-&nbsp;&nbsp;&nbsp; city(STATE,_,CITY,_).<br>
db(population,of,city,POPUL,CITY):-
&nbsp;&nbsp;&nbsp; city(_,_,CITY,POPUL1),str_real(POPUL,POPUL1).<br>
db(population,of,capital,POPUL,CITY):-city(_,_,CITY,POPUL1),str_real(POPUL,POPUL1).<br>
<br>
% Relationships about states<br>
db(abbreviation,of,state,ABBREVIATION,STATE):-
&nbsp;&nbsp;&nbsp; state(STATE,ABBREVIATION,_,_,_,_,_,_,_,_).<br>
db(state,with,abbreviation,STATE,ABBREVIATION):-state(STATE,ABBREVIATION,_,_,_,_,_,_,_,_).<br>
db(area,of,state,AREA,STATE):-
&nbsp;&nbsp;&nbsp; state(STATE,_,_,_,AREA1,_,_,_,_,_),str_real(AREA,AREA1).<br>
db(capital,of,state,CAPITAL,STATE):-
&nbsp;&nbsp;&nbsp; state(STATE,_,CAPITAL,_,_,_,_,_,_,_).<br>
db(state,with,capital,STATE,CAPITAL):-state(STATE,_,CAPITAL,_,_,_,_,_,_,_).<br>
db(population,of,state,POPULATION,STATE):-state(STATE,_,_,POPUL,_,_,_,_,_,_),str_real(POPULATION,POPUL).<br>
db(state,border,state,STATE1,STATE2):-border(STATE2,_,LIST),member(STATE1,LIST).<br>
<br>
% Relationships about rivers<br>
db(length,of,river,LENGTH,RIVER):-
&nbsp;&nbsp;&nbsp; river(RIVER,LENGTH1,_),str_real(LENGTH,LENGTH1).<br>
db(state,with,river,STATE,RIVER):-
&nbsp;&nbsp;&nbsp; river(RIVER,_,LIST),member(STATE,LIST).<br>
db(river,in,state,RIVER,STATE):-&nbsp;&nbsp;&nbsp; river(RIVER,_,LIST),member(STATE,LIST).<br>
<br>
% Relationships about points<br>
db(point,in,state,POINT,STATE):-&nbsp;&nbsp;&nbsp; highlow(STATE,_,POINT,_,_,_).<br>
db(point,in,state,POINT,STATE):-&nbsp;&nbsp;&nbsp; highlow(STATE,_,_,_,POINT,_).<br>
db(state,with,point,STATE,POINT):-&nbsp;&nbsp;&nbsp; highlow(STATE,_,POINT,_,_,_).<br>
db(state,with,point,STATE,POINT):-&nbsp;&nbsp;&nbsp; highlow(STATE,_,_,_,POINT,_).<br>
db(height,of,point,HEIGHT,POINT):-
&nbsp;&nbsp;&nbsp; highlow(_,_,_,_,POINT,H),str_int(HEIGHT,H),!.<br>
db(height,of,point,HEIGHT,POINT):-
&nbsp;&nbsp;&nbsp; highlow(_,_,POINT,H,_,_),str_int(HEIGHT,H),!.<br>
<br>
% Relationships about mountains<br>
db(mountain,in,state,MOUNT,STATE):-&nbsp;&nbsp;&nbsp; mountain(STATE,_,MOUNT,_).<br>
db(state,with,mountain,STATE,MOUNT):-&nbsp;&nbsp;&nbsp; mountain(STATE,_,MOUNT,_).<br>
db(height,of,mountain,HEIGHT,MOUNT):-
&nbsp;&nbsp;&nbsp; mountain(_,_,MOUNT,H1),str_int(HEIGHT,H1).<br>
<br>
% Relationships about lakes<br>
db(lake,in,state,LAKE,STATE):-&nbsp;&nbsp;&nbsp; lake(LAKE,_,LIST),member(STATE,LIST).<br>
db(state,with,lake,STATE,LAKE):-&nbsp;&nbsp;&nbsp; lake(LAKE,_,LIST),member(STATE,LIST).<br>
db(area,of,lake,AREA,LAKE):-
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lake(LAKE,A1,_),str_real(AREA,A1).<br>
<br>
% Relationships about roads<br>
db(road,in,state,ROAD,STATE):-&nbsp;&nbsp;&nbsp; road(ROAD,LIST),member(STATE,LIST).<br>
db(state,with,road,STATE,ROAD):-&nbsp;&nbsp;&nbsp; road(ROAD,LIST),member(STATE,LIST).<br>
<br>
db(E,in,continent,VAL,usa):-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ent(E,VAL).<br>
db(name,of,_,X,X):-
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bound(X).<br>
<br>
<br>
PREDICATES<br>
write_list(INTEGER,STRINGLIST)<br>
write_list2(STRINGLIST)<br>
nondeterm append(STRINGLIST,STRINGLIST,STRINGLIST)<br>
unik(STRINGLIST,STRINGLIST)<br>
index(STRINGLIST,INTEGER,STRING)<br>
<br>
CLAUSES<br>
index([X|_],1,X):- !.<br>
index([_|L],N,X):- N&gt;1,N1=N-1,index(L,N1,X).<br>
<br>
unik([],[]).<br>
unik([H|T],L):-member(H,T),!,unik(T,L).<br>
unik([H|T],[H|L]):-unik(T,L).<br>
<br>
append([],L,L).<br>
append([Ah|At],B,[Ah|C]):-append(At,B,C).<br>
<br>
write_list(_,[]).<br>
write_list(_,[X]):-!,write(X).<br>
write_list(4,[H|T]):-!,write(H),nl,write_list(0,T).<br>
write_list(3,[H|T]):-str_len(H,LEN),LEN&gt;13,!,write(H),nl,write_list(0,T).<br>
write_list(N,[H|T]):-str_len(H,LEN),LEN&gt;13,!,N1=N+2,writef(&quot;%-27
&quot;,H),write_list(N1,T).<br>
write_list(N,[H|T]):-N1=N+1,writef(&quot;%-13 &quot;,H),write_list(N1,T).<br>
<br>
write_list2([]).<br>
write_list2([H|T]):-write(H,' '),write_list2(T).<br>
<br>
<br>
/*************************************************************************<br>
Evaluating queries - This is the mechanism which reads a query, scans<br>
the string and removes punctuation, parses the query and evaluates<br>
it. The number of solutions are also reported here.<br>
*************************************************************************/<br>
<br>
DOMAINS<br>
% Nine types of questions are recognized by the evaluator<br>
QUERY&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp; q_e(ENT) ;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q_eaec(ENT,ASSOC,ENT,STRING) ;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q_eaq(ENT,ASSOC,ENT,QUERY) ;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q_sel(ENT,RELOP,ENT,REAL);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q_min(ENT,QUERY);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q_max(ENT,QUERY);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q_not(ENT,QUERY) ;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q_or(QUERY,QUERY) ;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q_and(QUERY,QUERY)<br>
<br>
PREDICATES<br>
write_unit(STRING)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %
Write the unit for an entity<br>
write_solutions(INTEGER)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Write the number of
solutions<br>
<br>
scan(STRING,STRINGLIST)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Convert a string to a
list of words<br>
filter(STRINGLIST,STRINGLIST)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Eliminate commas
and periods<br>
pars(STRINGLIST,STRING,QUERY)<br>
nondeterm eval(QUERY,STRING)<br>
<br>
listlen(STRINGLIST,INTEGER)<br>
<br>
<br>
PREDICATES<br>
runme(parmlist)<br>
plus_to_blank(string,string,string)<br>
CLAUSES<br>
&nbsp;&nbsp;&nbsp; <br>
runme(Parmlist) :-<br>
&nbsp;&nbsp;&nbsp; consult(&quot;GEOBASE.DBA&quot;,data),<br>
&nbsp;&nbsp;&nbsp; consult(&quot;GEOBASE.LAN&quot;,language),<br>
&nbsp;&nbsp;&nbsp; member (parm(&quot;query&quot;,STR),ParmList),<br>
&nbsp;&nbsp;&nbsp; plus_to_blank(STR,&quot;&quot;,STR1),<br>
&nbsp;&nbsp;&nbsp; write(&quot;&lt;p&gt;&lt;b&gt;Query:&lt;/b&gt;&quot;,STR1,&quot;&lt;br&gt;\n&quot;),<br>
&nbsp;&nbsp;&nbsp; STR1 &gt;&lt; &quot;&quot;,<br>
&nbsp;&nbsp;&nbsp; scan(STR1,LIST),&nbsp;&nbsp;&nbsp;&nbsp; % Returns a list of
words(symbols)<br>
&nbsp;&nbsp;&nbsp; filter(LIST,LIST1),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Removes
punctuation and words to be ignored<br>
&nbsp;&nbsp;&nbsp; pars(LIST1,E,Q),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % Parses
queries<br>
&nbsp;&nbsp;&nbsp; findall(A,eval(Q,A),L),<br>
&nbsp;&nbsp;&nbsp; unik(L,L1),<br>
&nbsp;&nbsp;&nbsp; write(&quot;&lt;p&gt;&lt;b&gt;Answer:&lt;/b&gt;\n&quot;),<br>
&nbsp;&nbsp;&nbsp; write_list(0,L1),<br>
&nbsp;&nbsp;&nbsp; write_unit(E),<br>
&nbsp;&nbsp;&nbsp; listlen(L1,N),<br>
&nbsp;&nbsp;&nbsp; write_solutions(N),!.<br>
runme (_) :-<br>
&nbsp;&nbsp;&nbsp; write (&quot;&lt;p&gt;Error while executing Geobase.exe\n&quot;).<br>
&nbsp;&nbsp;&nbsp; <br>
plus_to_blank (&quot;&quot;,STR,STR) :-!.<br>
plus_to_blank (STR,BUFF,STR1) :-<br>
&nbsp;&nbsp;&nbsp; searchchar(STR,'+',POS),<br>
&nbsp;&nbsp;&nbsp; P = POS-1,<br>
&nbsp;&nbsp;&nbsp; frontstr(P,STR,FRONT,REST),<br>
&nbsp;&nbsp;&nbsp; frontchar(REST,_,REST1),<br>
&nbsp;&nbsp;&nbsp; concat (BUFF,FRONT,B1),<br>
&nbsp;&nbsp;&nbsp; concat (B1,&quot; &quot;,B2),!,<br>
&nbsp;&nbsp;&nbsp; plus_to_blank (REST1,B2,STR1).<br>
plus_to_blank (STR,BUFF,STR1) :-!,<br>
&nbsp;&nbsp;&nbsp; concat(BUFF,STR,STR1).<br>
<br>
GOAL<br>
write(&quot;Content-type: text/html\n\n&quot;),<br>
write(&quot;&lt;html&gt;\n&quot;),<br>
write(&quot;&lt;body&gt;\n&quot;),<br>
&nbsp;&nbsp;&nbsp; ParmList = cgi_GetParmList(), <br>
&nbsp;&nbsp;&nbsp; runme(ParmList),<br>
&nbsp;&nbsp;&nbsp; write(&quot;&lt;/body&gt;\n&quot;),<br>
&nbsp;&nbsp;&nbsp; write(&quot;&lt;/html&gt;\n&quot;).<br>
<br>
CLAUSES<br>
scan(STR,[TOK|LIST]):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fronttoken(STR,SYMB,STR1),!,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; upper_lower(SYMB,TOK),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scan(STR1,LIST).<br>
scan(_,[]).<br>
<br>
filter([&quot;.&quot;|T],L):-&nbsp;&nbsp;&nbsp; !,filter(T,L).<br>
filter([&quot;,&quot;|T],L):-&nbsp;&nbsp;&nbsp; !,filter(T,L).<br>
filter([&quot;?&quot;|T],L):-&nbsp;&nbsp;&nbsp; !,filter(T,L).<br>
filter([H|T],L):-&nbsp;&nbsp;&nbsp; ignore(H),!,filter(T,L).<br>
filter([H|T],[H|L]):-&nbsp;&nbsp;&nbsp; filter(T,L).<br>
filter([],[]).<br>
<br>
write_unit(E):-unit(E,UNIT),!,write(' ',UNIT).<br>
write_unit(_).<br>
<br>
write_solutions(0):-!,write(&quot;&lt;p&gt;&lt;b&gt;No solutions&lt;/b&gt;\n&quot;).<br>
write_solutions(1):-!,nl.<br>
write_solutions(N):-!,writef(&quot;&lt;p&gt;&lt;b&gt;% Solutions&lt;/b&gt;\n&quot;,N).<br>
<br>
listlen([],0).<br>
listlen([_|T],N):-<br>
&nbsp;&nbsp;&nbsp; listlen(T,X),<br>
&nbsp;&nbsp;&nbsp; N=X+1.<br>
<br>
/*************************************************************************<br>
ENTITY NAMES<br>
*************************************************************************/<br>
<br>
PREDICATES<br>
nondeterm entn(STRING,STRING)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Convert an
entity to singular form */<br>
nondeterm entity(STRING)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Get all entities */<br>
nondeterm ent_synonym(STRING,STRING)&nbsp;&nbsp;&nbsp; /* Synonyms for entities */<br>
nondeterm ent_name(STRING,STRING)&nbsp;&nbsp;&nbsp; /* Convert between an entity<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name
and an internal entity name */<br>
<br>
CLAUSES<br>
ent_synonym(E,ENT):-synonym(E,ENT).<br>
ent_synonym(E,E).<br>
<br>
ent_name(ENT,NAVN):-entn(E,NAVN),ent_synonym(E,ENT),entity(ENT).<br>
<br>
entn(E,N):-concat(E,&quot;s&quot;,N).<br>
entn(E,N):-free(E),bound(N),concat(X,&quot;ies&quot;,N),concat(X,&quot;y&quot;,E).<br>
entn(E,E).<br>
<br>
entity(name):-!.<br>
entity(continent):-!.<br>
entity(X):-schema(X,_,_).<br>
<br>
<br>
/*************************************************************************<br>
ERROR DETECTION -<br>
Once the string has been converted to a list of words, the word<br>
list can be checked against the language database to see if it<br>
is a known word. Words which are not known are collected into a<br>
list which the system reports on.<br>
*************************************************************************/<br>
<br>
PREDICATES<br>
error(STRINGLIST)<br>
nondeterm known_word(STRING)<br>
<br>
CLAUSES<br>
error(LIST):-&nbsp;&nbsp;&nbsp; write(&quot;&gt;&gt;
&quot;),member(Y,LIST),not(known_word(Y)),!,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; write(&quot;Unknown word: &quot;,Y),nl.<br>
<br>
error(_):-&nbsp;&nbsp;&nbsp; write(&quot;Sorry, the sentence can't be recognized&quot;).<br>
<br>
known_word(X):-str_real(X,_),!.<br>
known_word(&quot;and&quot;):-!.<br>
known_word(&quot;or&quot;):-!.<br>
known_word(&quot;not&quot;):-!.<br>
known_word(&quot;all&quot;):-!.<br>
known_word(&quot;thousand&quot;):-!.<br>
known_word(&quot;million&quot;):-!.<br>
known_word(X):-minn(X),!. /* If not a special case word, check the */<br>
known_word(X):-maxx(X),!. /* dynamic database for known words */<br>
known_word(X):-size(_,X),!. /* additional words. */<br>
known_word(X):-ignore(X),!.<br>
known_word(X):-unit(_,X),!.<br>
known_word(X):-assoc(_,AL),member(X,AL),!.<br>
known_word(X):-ent_name(_,X),!.<br>
known_word(X):-entity(X),!.<br>
known_word(X):-relop(L,_),member(X,L),!.<br>
known_word(X):-entity(E),not(unit(E,_)),ent(E,X).<br>
<br>
/*************************************************************************<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PARSER<br>
<br>
PARSER SUPPORT - Compound entities:<br>
This is used by the parser to handle a compound entity (e.g.<br>
New York).<br>
*************************************************************************/<br>
<br>
PREDICATES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
nondeterm get_ent(STRINGLIST,STRINGLIST,STRING)<br>
nondeterm get_cmpent(STRINGLIST,STRINGLIST,STRING,STRING)<br>
ent_end(STRINGLIST)<br>
<br>
CLAUSES<br>
get_ent([E|S],S,E):-ent_end(S),!.<br>
get_ent(S1,S2,ENT):-get_cmpent(S1,S2,&quot; &quot;,E1),frontchar(E1,_,E),ENT=E.<br>
<br>
get_cmpent([E|S],S,IND,ENT):-ent_end(S),concat(IND,E,ENT).<br>
get_cmpent([E|S1],S2,IND,ENT):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; concat(IND,E,II),concat(II,&quot; &quot;,III),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get_cmpent(S1,S2,III,ENT).<br>
<br>
ent_end([]).<br>
ent_end([&quot;and&quot;|_]).<br>
ent_end([&quot;or&quot;|_]).<br>
<br>
/********************************************************************<br>
Here begins the parser. The first two parameters for the parsing<br>
predicates are the inputlist and what remains of the list<br>
after a part of a query is stripped off. In the last parameter, a<br>
structure for the query is built up.<br>
<br>
This method is called &quot;parsing by difference lists.&quot; Once you<br>
understand how it works, you can easily add new sentence<br>
constructions to the language.<br>
********************************************************************/<br>
<br>
PREDICATES<br>
nondeterm s_rel(STRINGLIST,STRINGLIST,STRING)<br>
s_unit(STRINGLIST,STRINGLIST,STRING)<br>
s_val(STRINGLIST,STRINGLIST,REAL)<br>
<br>
CLAUSES<br>
s_rel(S1,S2,REL):-relop(RLIST,REL),append(RLIST,S2,S1).<br>
<br>
s_unit([UNIT|S],S,UNIT).<br>
s_val([X,thousand|S],S,VAL):-&nbsp;&nbsp;&nbsp; !,str_real(X,XX),VAL=1000*XX.<br>
s_val([X,million|S],S,VAL):-&nbsp;&nbsp;&nbsp; !,str_real(X,XX),VAL=1000000*XX.<br>
s_val([X|S],S,VAL):-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str_real(X,VAL).<br>
<br>
<br>
PREDICATES<br>
nondeterm s_attr(STRINGLIST,STRINGLIST,STRING,QUERY)<br>
nondeterm s_minmax(STRINGLIST,STRINGLIST,STRING,QUERY)<br>
nondeterm s_rest(STRINGLIST,STRINGLIST,STRING,QUERY)<br>
nondeterm s_or(STRINGLIST,STRINGLIST,STRING,QUERY)<br>
nondeterm s_or1(STRINGLIST,STRINGLIST,STRING,QUERY,QUERY)<br>
nondeterm s_and(STRINGLIST,STRINGLIST,STRING,QUERY)<br>
nondeterm s_and1(STRINGLIST,STRINGLIST,STRING,QUERY,QUERY)<br>
nondeterm s_elem(STRINGLIST,STRINGLIST,STRING,QUERY)<br>
nondeterm s_assoc(STRINGLIST,STRINGLIST,STRING,QUERY)<br>
nondeterm s_assoc1(STRINGLIST,STRINGLIST,STRING,STRING,QUERY)<br>
nondeterm s_nest(STRINGLIST,STRINGLIST,STRING,QUERY)<br>
nondeterm get_assoc(STRINGLIST,STRINGLIST,STRING)<br>
<br>
CLAUSES<br>
pars(LIST,E,Q):-s_attr(LIST,OL,E,Q),OL=[],!.<br>
pars(LIST,_,_):-error(LIST),fail.<br>
<br>
% How big is the city new york -- BIG ENTITY CONSTANT<br>
s_attr([BIG,ENAME|S1],S2,E1,q_eaec(E1,A,E2,X)):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ent_name(E2,ENAME),size(E2,BIG),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; entitysize(E2,E1),schema(E1,A,E2),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get_ent(S1,S2,X),!.<br>
<br>
% How big is new york -- BIG CONSTANT<br>
s_attr([BIG|S1],S2,E1,q_eaec(E1,A,E2,X)):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get_ent(S1,S2,X),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size(E2,BIG),entitysize(E2,E1),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; schema(E1,A,E2),ent(E2,X),!.<br>
<br>
% How big is the biggest city -- BIG QUERY<br>
s_attr([BIG|S1],S2,E1,q_eaq(E1,A,E2,Q)):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size(_,BIG),s_minmax(S1,S2,E2,Q),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size(E2,BIG),entitysize(E2,E1),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; schema(E1,A,E2),!.<br>
<br>
s_attr(S1,S2,E,Q):-s_minmax(S1,S2,E,Q).<br>
<br>
% The smallest city -- MIN QUERY<br>
s_minmax([MIN|S1],S2,E,q_min(E,Q)):-minn(MIN),!,s_rest(S1,S2,E,Q).<br>
<br>
% The biggest city -- MAX QUERY<br>
s_minmax([MAX|S1],S2,E,q_max(E,Q)):-maxx(MAX),!,s_rest(S1,S2,E,Q).<br>
<br>
s_minmax(S1,S2,E,Q):-s_rest(S1,S2,E,Q).<br>
<br>
% give me cities -- ENTITY<br>
s_rest([ENAME],[],E,q_e(E)):-!,ent_name(E,ENAME).<br>
<br>
s_rest([ENAME|S1],S2,E,Q):-ent_name(E,ENAME),s_or(S1,S2,E,Q).<br>
<br>
% And has a higher priority than or<br>
s_or(S1,S2,E,Q):-s_and(S1,S3,E,Q1),s_or1(S3,S2,E,Q1,Q).<br>
s_or1([&quot;or&quot;,ENT|S1],S2,E,Q1,q_or(Q1,Q2)):-ent_name(E,ENT),!,s_or(S1,S2,E,Q2).<br>
s_or1([&quot;or&quot;|S1],S2,E,Q1,q_or(Q1,Q2)):-!,s_or(S1,S2,E,Q2).<br>
s_or1(S,S,_,Q,Q).<br>
<br>
s_and(S1,S2,E,Q):-s_elem(S1,S3,E,Q1),s_and1(S3,S2,E,Q1,Q).<br>
s_and1([&quot;and&quot;,ENT|S1],S2,E,Q1,q_and(Q1,Q2)):-ent_name(E,ENT),!,s_elem(S1,S2,E,Q2).<br>
s_and1([&quot;and&quot;|S1],S2,E,Q1,q_and(Q1,Q2)):-!,s_elem(S1,S2,E,Q2).<br>
s_and1(S,S,_,Q,Q).<br>
<br>
% not QUERY<br>
s_elem([&quot;not&quot;|S1],S2,E,q_not(E,Q)):-!,s_assoc(S1,S2,E,Q).<br>
s_elem(S1,S2,E,Q):-s_assoc(S1,S2,E,Q).<br>
<br>
% ... longer than 1 thousand miles -- REL VAL UNIT<br>
s_assoc(S1,S4,E,q_sel(E,REL,ATTR,VAL)):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s_rel(S1,S2,REL),s_val(S2,S3,VAL),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s_unit(S3,S4,UNIT),!,unit(ATTR,UNIT).<br>
<br>
% ... longer than 1 thousand -- REL VAL<br>
s_assoc(S1,S3,E,q_sel(E,REL,ATTR,VAL)):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s_rel(S1,S2,REL),s_val(S2,S3,VAL),!,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; entitysize(E,ATTR).<br>
<br>
s_assoc(S1,S3,E,Q):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get_assoc(S1,S2,A),s_assoc1(S2,S3,E,A,Q).<br>
<br>
% Before s_assoc1 is called ENT ASSOC is met<br>
<br>
% ... the shortest river in texas -- MIN QUERY<br>
s_assoc1([MIN|S1],S2,E1,A,q_eaq(E1,A,E2,q_min(E2,Q))):-minn(MIN),!,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s_nest(S1,S2,E2,Q),schema(E1,A,E2).<br>
<br>
% ... the longest river in texas -- MAX QUERY<br>
s_assoc1([MAX|S1],S2,E1,A,q_eaq(E1,A,E2,q_max(E2,Q))):-maxx(MAX),!,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s_nest(S1,S2,E2,Q),schema(E1,A,E2).<br>
<br>
% ... with a population that is smaller than 1 million citizens -- NT REL VAL UNIT<br>
s_assoc1([ATTR|S1],S4,E,A,q_sel(E,REL,ATTR,VAL)):-<br>
&nbsp;&nbsp;&nbsp; s_rel(S1,S2,REL),s_val(S2,S3,VAL),s_unit(S3,S4,UNIT1),!,<br>
&nbsp;&nbsp;&nbsp; ent_name(E2,ATTR),schema(E,A,E2),unit(E2,UNIT),<br>
&nbsp;&nbsp;&nbsp; UNIT=UNIT1,!.<br>
<br>
% ... with a population that are smaller than 1 million -- ENT REL VAL<br>
s_assoc1([ATTR|S1],S3,E,A,q_sel(E,REL,ATTR,VAL)):-<br>
&nbsp;&nbsp;&nbsp; s_rel(S1,S2,REL),s_val(S2,S3,VAL),!,<br>
&nbsp;&nbsp;&nbsp; ent_name(E2,ATTR),schema(E,A,E2),unit(E2,_).<br>
<br>
% ... that is smaller than 1 million citizens -- REL VAL UNIT<br>
s_assoc1(S1,S4,E,A,q_sel(E,REL,E2,VAL)):-<br>
&nbsp;&nbsp;&nbsp; s_rel(S1,S2,REL),s_val(S2,S3,VAL),s_unit(S3,S4,UNIT1),!,<br>
&nbsp;&nbsp;&nbsp; schema(E,A,E2),unit(E2,UNIT),<br>
&nbsp;&nbsp;&nbsp; UNIT=UNIT1,!.<br>
<br>
% ... that is smaller than 1 million -- REL VAL<br>
s_assoc1(S1,S3,E,A,q_sel(E,REL,E2,VAL)):-<br>
&nbsp;&nbsp;&nbsp; s_rel(S1,S2,REL),s_val(S2,S3,VAL),!,<br>
&nbsp;&nbsp;&nbsp; schema(E,A,E2),unit(E2,_).<br>
<br>
% ... with a population on 1 million citizens -- ENT VAL UNIT<br>
s_assoc1([ATTR|S1],S3,E,A,q_sel(E,eq,ATTR,VAL)):-<br>
&nbsp;&nbsp;&nbsp; s_val(S1,S2,VAL),s_unit(S2,S3,UNIT1),!,<br>
&nbsp;&nbsp;&nbsp; ent_name(E2,ATTR),schema(E,A,E2),unit(E2,UNIT2),UNIT1=UNIT2,!.<br>
<br>
% ... with a population on 1 million -- ENT VAL<br>
s_assoc1([ATTR|S1],S2,E,A,q_sel(E,eq,ATTR,VAL)):-<br>
&nbsp;&nbsp;&nbsp; s_val(S1,S2,VAL),<br>
&nbsp;&nbsp;&nbsp; ent_name(E2,ATTR),schema(E,A,E2),unit(E2,_),!.<br>
<br>
% .. the state new york -- ENT CONST<br>
s_assoc1([ENAME|S1],S2,E1,A,q_eaec(E1,A,E2,X)):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get_ent(S1,S2,X),ent_name(E2,ENAME),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not(unit(E2,_)),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; schema(E1,A,E2),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ent(E2,X),!.<br>
<br>
s_assoc1(S1,S2,E1,A,q_eaq(E1,A,E2,Q)):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s_nest(S1,S2,E2,Q),schema(E1,A,E2),!.<br>
<br>
% .. new york -- CONST<br>
s_assoc1(S1,S2,E1,A,q_eaec(E1,A,E2,X)):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get_ent(S1,S2,X),schema(E1,A,E2),ent(E2,X),!.<br>
<br>
% Parse a nested query<br>
s_nest([ENAME|S1],S2,E,Q):-ent_name(E,ENAME),s_elem(S1,S2,E,Q).<br>
s_nest([ENAME|S],S,E,q_e(E)):-ent_name(E,ENAME).<br>
<br>
% ... runs through texas -- ASSOC REST<br>
get_assoc(IL,OL,A):-append(ASL,OL,IL),assoc(A,ASL).<br>
<br>
/*************************************************************************<br>
EVALUATION OF QUESTIONS<br>
*************************************************************************/<br>
<br>
PREDICATES<br>
sel_min(STRING,STRING,REAL,STRING,STRING,STRINGLIST)<br>
sel_max(STRING,STRING,REAL,STRING,STRING,STRINGLIST)<br>
<br>
CLAUSES<br>
eval(q_min(ENT,TREE),ANS):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; findall(X,eval(TREE,X),L),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; entitysize(ENT,ATTR),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sel_min(ENT,ATTR,99e99,&quot;&quot;,ANS,L).<br>
<br>
eval(q_max(ENT,TREE),ANS):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; findall(X,eval(TREE,X),L),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; entitysize(ENT,ATTR),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sel_max(ENT,ATTR,-1,&quot;&quot;,ANS,L).<br>
<br>
eval(q_sel(E,gt,ATTR,VAL),ANS):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; schema(ATTR,ASSOC,E),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db(ATTR,ASSOC,E,SVAL2,ANS),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str_real(SVAL2,VAL2),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VAL2&gt;VAL.<br>
<br>
eval(q_sel(E,lt,ATTR,VAL),ANS):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; schema(ATTR,ASSOC,E),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db(ATTR,ASSOC,E,SVAL2,ANS),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str_real(SVAL2,VAL2),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VAL2&lt;VAL.<br>
<br>
eval(q_sel(E,eq,ATTR,VAL),ANS):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; schema(ATTR,ASSOC,E),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db(ATTR,ASSOC,E,SVAL,ANS),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str_real(SVAL,VAL).<br>
<br>
eval(q_not(E,TREE),ANS):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; findall(X,eval(TREE,X),L),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ent(E,ANS),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not(member(ANS,L)).<br>
<br>
eval(q_eaq(E1,A,E2,TREE),ANS):-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eval(TREE,VAL),db(E1,A,E2,ANS,VAL).<br>
<br>
eval(q_eaec(E1,A,E2,C),ANS):-db(E1,A,E2,ANS,C).<br>
<br>
eval(q_e(E),ANS):-&nbsp;&nbsp;&nbsp; ent(E,ANS).<br>
<br>
eval(q_or(TREE,_),ANS):- eval(TREE,ANS).<br>
<br>
eval(q_or(_,TREE),ANS):- eval(TREE,ANS).<br>
<br>
eval(q_and(T1,T2),ANS):- eval(T1,ANS1),eval(T2,ANS),ANS=ANS1.<br>
<br>
sel_min(_,_,_,RES,RES,[]).<br>
sel_min(ENT,ATTR,MIN,_,RES,[H|T]):-schema(ATTR,ASSOC,ENT),<br>
&nbsp;&nbsp;&nbsp; db(ATTR,ASSOC,ENT,VAL,H),<br>
&nbsp;&nbsp;&nbsp; str_real(VAL,HH),MIN&gt;HH,!,<br>
&nbsp;&nbsp;&nbsp; sel_min(ENT,ATTR,HH,H,RES,T).<br>
sel_min(ENT,ATTR,MIN,NAME,RES,[_|T]):-sel_min(ENT,ATTR,MIN,NAME,RES,T).<br>
<br>
sel_max(_,_,_,RES,RES,[]).<br>
sel_max(ENT,ATTR,MAX,_,RES,[H|T]):-<br>
&nbsp;&nbsp;&nbsp; schema(ATTR,ASSOC,ENT),<br>
&nbsp;&nbsp;&nbsp; db(ATTR,ASSOC,ENT,VAL,H),<br>
&nbsp;&nbsp;&nbsp; str_real(VAL,HH),MAX&lt;HH,!,<br>
&nbsp;&nbsp;&nbsp; sel_max(ENT,ATTR,HH,H,RES,T).<br>
sel_max(ENT,ATTR,MAX,NAME,RES,[_|T]):-sel_max(ENT,ATTR,MAX,NAME,RES,T).</p>
<!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table></body>
</html>
