<html>

<head>
<title>Classes and Objects</title>
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta name="Microsoft Theme" content="prolog2 000, default">
<meta name="Microsoft Border" content="t, default">
</head>

<body bgcolor="#FFFFFF" text="#333333" link="#0000FF" vlink="#008080" alink="#00FFFF"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="verdana, Arial, Helvetica">
<script language="JavaScript">var toRoot="../../";</script>
<script language="JavaScript" src="../../vipmenu/js/pdcbar.js"></script>
<script language="JavaScript" src="../../vipmenu/js/pdcbardef.js"></script>


<!--mstheme--></font><table class="scrElem" border="0" width="853" height="122">
  <tr>
     <td background="../../vipmenu/images/topbar-alt.gif" nowrap valign="top" ><!--mstheme--><font face="verdana, Arial, Helvetica">
                  <blockquote>
                    <blockquote>
                      <blockquote>
                        <blockquote>
                          <blockquote>
                            <blockquote>
                              <blockquote>
                  <p>
                      <strong>
                    
                      <font size="2">
                    
                      <br>
                      <br>
                      <br>
                      <br>
                      </font>
                        <a href="../../vipmenu/navigationbar.htm">
                      <font size="2"><br>
                      Navigation&nbsp; without Java Scripts</font></a></strong>
                 </p>
                              </blockquote>
                            </blockquote>
                          </blockquote>
                        </blockquote>
                      </blockquote>
                    </blockquote>
                  </blockquote>
     <!--mstheme--></font></td>
  </tr>
</table><!--mstheme--><font face="verdana, Arial, Helvetica">
</html>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top"><!--mstheme--><font face="verdana, Arial, Helvetica">

<h1><!--mstheme--><font color="#000000"><b>Classes and Objects in Visual Prolog<!--mstheme--></font></h1>
</b>Visual Prolog contains a powerful object mechanism, that combines the Logic
programming and <a href="introduction_to_oop.htm">object oriented programming</a>
(OOP) paradigms.
<h2><!--mstheme--><font color="#000000"><b>Class Definition in Visual Prolog<!--mstheme--></font></h2>
</b>Defining a class in Visual Prolog requires in general two things: the class
declaration, and the class implementation.
<p>The <a href="class_declaration.htm"><i>class declaration</i></a> specifies
the interface to a class; that is, domains, predicates, and facts that can be
seen from the outside of the class.
<p>The <a href="class_implementation.htm#3cd99d1b"><i>class implementation</i></a>
contains Prolog clauses (and other sections) defining the actual functionality
of a class.
<p>That is, the declaration of the class interface and the definition of the
class functionality are separated. A class declaration (interface) can often be
placed in a header file that should be included in those modules of the project,
which use members of this class. A class implementation can be placed in any
project module, which includes the class declaration.
<p>In Visual Prolog declaration of a class with the name <b><i>class_name</i></b>
automatically generates an internal global -<a href>domain</a> <b><i>class_name</i></b>.
The generated <b><i>class_name</i></b> domain can be used as an ordinary global
domain to declare arguments for predicates that should handle references to
objects of this class. Most rules applied to ordinary global domains are applied
to the class domains.
<p>Each class, except <a href>abstract</a> classes, must have both the
declaration and the implementation. Abstract classes cannot have
implementations.
<p>&lt;<i>class</i> &gt; ::= &lt;<i>class_declaration</i>&gt; &lt;<i>class_implementation</i>&gt;
<p>&lt;<i>abstract_class</i> &gt; ::= ABSTRACT &lt;<i>class_declaration</i>&gt;
<h2><!--mstheme--><font color="#000000"><b>Class Members in Visual Prolog<!--mstheme--></font></h2>
</b>Domains, predicates, and facts declared in a class (both in the class
declaration and in the class implementation) are called class members:
member-domains, member-predicates, and member-facts.
<p>Class members' default <a href="class_access_control.htm">access rights</a>
are determined by the place where the class member is declared (in the class
declaration or in the class implementation).
<h2><!--mstheme--><font color="#000000"><b>Classes as Modules<!--mstheme--></font></h2>
</b>Beginning with version 5.2 Visual Prolog provides possibility to declare
domains inside classes. Being able to declare domains in classes opens the
possibility to use classes as modules.
<p>Public domains declared in a class declaration are global and can be used
outside the class. All domains declared in classes are static/class entities.
The domain belongs to the class not to the individual objects.
<p>If a class declares only static/class entities, then it can be considered a
module.
<p>The static/class entities of a class can be used as ordinary global entities,
as long as you remember to qualify them with the class name. One advantage of
creating modules this way is that the module will have a separate name space (as
the result of qualification with the class name). This means that you can choose
names in the module more freely. It also ensures consistent naming of all
entities in the module. Another advantage is that classes do not have to be
included in the main module, even if they contain public domains.</p>
<b>
<h5><!--mstheme--><font color="#000000"><a href="toc.htm">See also</a><!--mstheme--></font></h5>
</b>

<!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table></body>

</html>
